<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Limbo-Nova</title>
  
  <subtitle>Seize the Day</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.limbonova.com/"/>
  <updated>2018-10-29T08:01:26.821Z</updated>
  <id>http://www.limbonova.com/</id>
  
  <author>
    <name>Anthony</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>晶体管：献给赛博朋克的十四行诗</title>
    <link href="http://www.limbonova.com/2018/04/transistor-a-sonnet-to-cyberpunk/"/>
    <id>http://www.limbonova.com/2018/04/transistor-a-sonnet-to-cyberpunk/</id>
    <published>2018-04-26T14:54:34.000Z</published>
    <updated>2018-10-29T08:01:26.821Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>When I first saw you up on that stage back there.<br>It was like…<br>everyone loved you.<br>Everyone except for them.</p></blockquote><p>《晶体管》(Transistor) 是一款由《堡垒》(Bastion)开发商 <a href="https://www.supergiantgames.com/" target="_blank" rel="noopener">Supergiant Games</a> 所开发的科幻题材作品。游戏讲述了主角——云堤城 (Cloudbank) 歌星红伶 (Red)，躲过卡梅拉塔组织 (The Camerata) 刺杀后，意外获得了一件名叫“晶体管” (Transistor) 的武器，并以此复仇的故事。</p><p>虽然《晶体管》被官方定义为 ARPG ，但确切地说，它更应该被称作为一款 TRPG (Tactical RPG)。类似 XCOM 或者 神界：原罪 (Divinity: Original Sin) 的战斗规则 但又有所不同。首先，在行动规划阶段没有移动的次序和限制，玩家可以移动多次，并且在发动技能前后都可以移动，行动规划如同施放“时间暂停”一般。其次，个别技能会影响敌人位置，如拉近/击飞等效果。而在行动规划期间，受到此类效果影响的敌人并不会实时改变其位置，因为是规划嘛，所以需要一定的预判，游戏中会给出相应的提示。</p><p><img src="/images/screenshots/20180426140854_1.jpg" alt="transistor"></p><a id="more"></a><p>另外值得一提的是《晶体管》的技能设计。程序员们看到这些技能可能会会心一笑——函数 (function)：Crash()，Ping()，Load()，Get()…… 每个函数可以作为主动技能，也可以用来强化主动技能，还可以作为被动技能。由于主动和强化的区分，你可以使用 Crash() + Ping()，也可以使用 Ping() + Crash()，但是这两个技能组合的效果却不相同。因此16个函数经过排列组合可以形成成千上万的变种，极大丰富了应对不同敌人的策略。</p><p><img src="/images/screenshots/20180426140719_1.jpg" alt="transistor"></p><p>为了提高游戏难度，开发者设计了一个叫做限制器( Limiter )系统，可以根据自己的喜好开启一定数量的限制器来提高游戏难度，并相应提高了奖励。</p><p>Supergiant Games 作品的艺术风格历来独树一帜，不管是初试啼声的《堡垒》(Bastion)，还是最新力作《柴堆》(Pyre)。鲜明的色彩是其一大特色。如同手绘卡通风格之于 Klei 的游戏，从 Shank 到 Don’t Starve，再到 Oxygen Not Included，可以看到Klei艺术风格的传承。而 Supergiant 也是如此，新作 Pyre 的角色动画更是将这种风格运用得淋漓尽致。</p><p><img src="/images/screenshots/20180404092846_1.jpg" alt="transistor"></p><p>游戏制作得精心与否，从音频制作上可以窥见一斑。如果从成本控制角度来考虑，首先被削减预算的就是声音。但《晶体管》的声音制作出色，除了全程叙述语音，音乐依然由 Darren Korb 制作。有意思的是，因为主角 Red 是一名当红歌手，游戏特地加入了看似无用的功能—— Red 的哼唱。任何非战斗时刻，都可以让主角随着音乐哼唱，于是他们又录制了所有曲目的哼唱版本！</p><p><img src="/images/transistor_hummed_ost.png" alt="transistor"></p><p>因为职业的原因，有时会去挖掘游戏开发者使用的相关技术。《晶体管》的目录结构相当清晰，执行程序目录里包含了启动程序和一系列 dll。基于 MonoGame 的开发框架，使用 FMOD 处理音频，使用 Lua 5.2 作为脚本系统，引入 NLua 和 KeraLua 实现 C# 和 Lua 的绑定。还有其他的一些跨平台和外设相关的，以及游戏平台相关的：Steam 和 腾讯TGP。腾讯TGP（就是现在的 WeGame ）的库非常巨大，几乎占到整个目录文件的一半大小。</p><p><img src="/images/transistor_movies.png" alt="transistor"></p><p>为什么 Supergiant Games 的游戏动画复杂精细又那么流畅？打开 Movies 目录后恍然大悟。原来所有的角色动作，特效都是 bink video 视频文件。使用高效的视频渲染引擎来处理复杂的动态效果，可谓是另辟蹊径。</p><p>《晶体管》不是一部“大作”，却处处可见开发者精雕细刻的用心。它像是一首献给赛博朋克的十四行诗，诠释了开发者对这个科幻类型的独特理解。独特的艺术风格和流畅的动画将会是 Supergiant Games 作品的一大亮点。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="https://www.supergiantgames.com/games/transistor/" target="_blank" rel="noopener">https://www.supergiantgames.com/games/transistor/</a></li><li><a href="https://store.steampowered.com/app/237930/Transistor/" target="_blank" rel="noopener">https://store.steampowered.com/app/237930/Transistor/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;When I first saw you up on that stage back there.&lt;br&gt;
It was like…&lt;br&gt;
everyone loved you.&lt;br&gt;
Everyone except for them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;《晶体管》(Transistor) 是一款由《堡垒》(Bastion)开发商 &lt;a href=&quot;https://www.supergiantgames.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Supergiant Games&lt;/a&gt; 所开发的科幻题材作品。游戏讲述了主角——云堤城 (Cloudbank) 歌星红伶 (Red)，躲过卡梅拉塔组织 (The Camerata) 刺杀后，意外获得了一件名叫“晶体管” (Transistor) 的武器，并以此复仇的故事。&lt;/p&gt;
&lt;p&gt;虽然《晶体管》被官方定义为 ARPG ，但确切地说，它更应该被称作为一款 TRPG (Tactical RPG)。类似 XCOM 或者 神界：原罪 (Divinity: Original Sin) 的战斗规则 但又有所不同。首先，在行动规划阶段没有移动的次序和限制，玩家可以移动多次，并且在发动技能前后都可以移动，行动规划如同施放“时间暂停”一般。其次，个别技能会影响敌人位置，如拉近/击飞等效果。而在行动规划期间，受到此类效果影响的敌人并不会实时改变其位置，因为是规划嘛，所以需要一定的预判，游戏中会给出相应的提示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/screenshots/20180426140854_1.jpg&quot; alt=&quot;transistor&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="http://www.limbonova.com/tags/game/"/>
    
      <category term="game review" scheme="http://www.limbonova.com/tags/game-review/"/>
    
  </entry>
  
  <entry>
    <title>基于TypeScript的PixiJS开发环境设置（webpack篇）</title>
    <link href="http://www.limbonova.com/2017/09/setup-pixijs-with-typescript-using-webpack/"/>
    <id>http://www.limbonova.com/2017/09/setup-pixijs-with-typescript-using-webpack/</id>
    <published>2017-09-21T15:36:47.000Z</published>
    <updated>2018-10-29T08:01:26.808Z</updated>
    
    <content type="html"><![CDATA[<p>前几天写了一篇<a href="http://www.limbonova.com/2017/09/setup-pixijs-with-typescript-using-browserify">用<code>Browserify</code>打包的 PixiJS 的开发环境配置流程</a>，但是Web技术一日千里，开发工具也日新月异， Webpack 就是其中之一。本文介绍了以 TypeScript 作为开发语言， PixiJS 作为图形渲染引擎， Webpack 作为模块打包工具的开发环境的配置过程，遵循简化易用的原则，省略了一些非必要模块的安装。</p><h2>安装</h2><h3>项目结构</h3><ol><li>创建项目目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ts_pixi</span><br><span class="line">cd ts_pixi</span><br><span class="line">mkdir assets src dist</span><br></pre></td></tr></table></figure><ol start="2"><li>新建项目文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch index.html</span><br><span class="line">touch src/main.ts</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h3>安装模块</h3><ol><li>PixiJS</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev pixi.js</span><br></pre></td></tr></table></figure><ol start="2"><li>TypeScript，如果使用Visual Studio Code作为IDE，可以安装相应<code>@types</code>文件，用于代码提示等功能。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript @types/pixi.js @types/node</span><br></pre></td></tr></table></figure><ol start="3"><li>其它</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev ts-loader webpack webpack-dev-server</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><code>ts-loader</code> TypeScript加载器， 用于处理 TypeScript 文件。</li><li><code>webpack</code> 模块加打包器，将JavaScript 文件打包在一起，打包后的文件用于在浏览器中使用。</li><li><code>webpack-dev-server</code> webpack提供的简易服务器，用于运行调试。也可以选择安装<code>http-server</code>或者<code>live-server</code>；</li></ul><h3>初始化模块</h3><p>生成 tsconfig.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tsc --init</span><br></pre></td></tr></table></figure><h2>设置</h2><h3>package.json 设置</h3><p>配置scripts中的构建和测试命令。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ts_pixi"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.html"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"node_modules/.bin/webpack-dev-server"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"node_modules/.bin/webpack"</span>,</span><br><span class="line">    <span class="attr">"build:watch"</span>: <span class="string">"node_modules/.bin/webpack -w"</span>,</span><br><span class="line">    <span class="attr">"clean"</span>: <span class="string">"rm ./dist/*"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"pixi.js"</span>: <span class="string">"^4.5.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^8.0.29"</span>,</span><br><span class="line">    <span class="attr">"@types/pixi.js"</span>: <span class="string">"^4.5.4"</span>,</span><br><span class="line">    <span class="attr">"source-map-loader"</span>: <span class="string">"^0.2.1"</span>,</span><br><span class="line">    <span class="attr">"ts-loader"</span>: <span class="string">"^2.3.7"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^2.5.2"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^3.6.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^2.8.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>tsconfig.json 设置</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"./dist/"</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"filesGlob"</span>: [</span><br><span class="line">    <span class="string">"./src/*.ts"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>webpack.config.js 设置</h3><p>在项目根目录下创建<code>webpack.config.js</code>文件，并加入以下内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./src/main.ts"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">"./dist/bundle.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Enable sourcemaps for debugging webpack's output.</span></span><br><span class="line">    devtool: <span class="string">"inline-source-map"</span>,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        <span class="comment">// Add '.ts' as resolvable extensions.</span></span><br><span class="line">        extensions: [<span class="string">".ts"</span>, <span class="string">".js"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                use: [<span class="string">"ts-loader"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: path.join(__dirname, <span class="string">"."</span>),</span><br><span class="line">        compress: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">8080</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Omit "externals" if you don't have any. Just an example because it's</span></span><br><span class="line">    <span class="comment">// common to have them.</span></span><br><span class="line">    externals: &#123;</span><br><span class="line">        <span class="comment">// Don't bundle giant dependencies, instead assume they're available in</span></span><br><span class="line">        <span class="comment">// the html doc as global variables node module name -&gt; JS global</span></span><br><span class="line">        <span class="comment">// through which it is available</span></span><br><span class="line">       <span class="comment">//"pixi.js": "PIXI"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>需要注意的是，使用vs code chrome debug插件调试时，<code>devtool</code>需要配置为<code>inline-source-map</code>，否则断点命中有问题。<br>如果有些第三方的JS库较大,比如 PixiJS，可以考虑不用<code>webpack</code>打包，而通过 HTML 的<code>&lt;scrpt&gt;</code>标签从外部加载。那么就需要在 <code>externals</code>选项中启用，并在html中包含对应的 JavaScript 文件。</p><h2>测试</h2><h3>修改文件</h3><h4>main.ts</h4><p>写一段测试代码，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * as PIXI from <span class="string">"pixi.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create the renderer</span></span><br><span class="line"><span class="keyword">var</span> renderer = PIXI.autoDetectRenderer(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Add the canvas to the HTML document</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.view);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create a container object called the `stage`</span></span><br><span class="line"><span class="keyword">var</span> stage = <span class="keyword">new</span> PIXI.Container();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tell the `renderer` to `render` the `stage`</span></span><br><span class="line">renderer.render(stage);</span><br></pre></td></tr></table></figure><h4>index.html</h4><p>修改文件内容为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World, Pixi!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>编译测试</h3><h4>编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>此举将会执行<code>package.json</code>中设置的<code>build</code>命令，编译TypeScript文件，并打包至<code>dist/bundle.js</code>中</p><h4>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>执行命令，打开相应的网址，测试刚刚编写的代码，查看代码是否正确执行。</p><h2>总结</h2><p>Web 技术更新很快，Webpack 3.6 已经发布了， 而网上的很多资料还停留在 1.x， 2.x 的时代，PixiJS也更新到了 4.5.6，环境配置也不再像以前那么复杂。但是 Web 前端的发展实在是太快，重复造的“轮子”也是花样百出，让人目不暇接。“若无必要，勿增实体”，引入更多的模块会产生更多的问题，如果将来重新配置环境，可以考虑将<code>Webpack</code>也去掉。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://www.proofbyexample.com/typescript-project-setup-with-npm.html" target="_blank" rel="noopener">http://www.proofbyexample.com/typescript-project-setup-with-npm.html</a></li><li><a href="http://www.proofbyexample.com/typescript-pixi-webpack.html" target="_blank" rel="noopener">http://www.proofbyexample.com/typescript-pixi-webpack.html</a></li><li><a href="https://gist.github.com/mjackson/ecd3914ebee934f4daf4" target="_blank" rel="noopener">https://gist.github.com/mjackson/ecd3914ebee934f4daf4</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天写了一篇&lt;a href=&quot;http://www.limbonova.com/2017/09/setup-pixijs-with-typescript-using-browserify&quot;&gt;用&lt;code&gt;Browserify&lt;/code&gt;打包的 PixiJS 的开发环境配置流程&lt;/a&gt;，但是Web技术一日千里，开发工具也日新月异， Webpack 就是其中之一。本文介绍了以 TypeScript 作为开发语言， PixiJS 作为图形渲染引擎， Webpack 作为模块打包工具的开发环境的配置过程，遵循简化易用的原则，省略了一些非必要模块的安装。&lt;/p&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;h3&gt;项目结构&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建项目目录&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir ts_pixi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ts_pixi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir assets src dist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;新建项目文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;touch index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch src/main.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;初始化项目&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3&gt;安装模块&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;PixiJS&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev pixi.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;TypeScript，如果使用Visual Studio Code作为IDE，可以安装相应&lt;code&gt;@types&lt;/code&gt;文件，用于代码提示等功能。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev typescript @types/pixi.js @types/node&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;其它&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev ts-loader webpack webpack-dev-server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="game dev" scheme="http://www.limbonova.com/tags/game-dev/"/>
    
      <category term="PixiJS" scheme="http://www.limbonova.com/tags/pixijs/"/>
    
      <category term="TypeScript" scheme="http://www.limbonova.com/tags/typescript/"/>
    
      <category term="HTML5" scheme="http://www.limbonova.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>基于TypeScript的PixiJS开发环境设置（browserify篇）</title>
    <link href="http://www.limbonova.com/2017/09/setup-pixijs-with-typescript-using-browserify/"/>
    <id>http://www.limbonova.com/2017/09/setup-pixijs-with-typescript-using-browserify/</id>
    <published>2017-09-18T13:28:22.000Z</published>
    <updated>2018-10-29T08:01:26.807Z</updated>
    
    <content type="html"><![CDATA[<p>PixiJS 作为一款出色的WebGL 2D渲染引擎，除了支持JavaScript之外，还支持 TypeScript 。 TypeScript 的优点不言而喻，支持静态类型检查，IDE代码提示，具有较好的可读性。所以用来替代JavaScript开发项目，也有利于将来的代码重构。本文介绍了以 TypeScript 作为开发语言， PixiJS 作为图形渲染引擎， Browserify 作为模块打包工具的开发环境的配置过程。</p><h2>前提</h2><p>不可或缺的当然是node。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><h2>安装</h2><h3>初始化项目</h3><ol><li>创建项目目录</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir ts_pixi</span><br><span class="line">cd ts_pixi</span><br><span class="line">mkdir assets src dist</span><br></pre></td></tr></table></figure><ol start="2"><li>新建项目文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">touch index.html</span><br><span class="line">touch src/main.ts</span><br></pre></td></tr></table></figure><ol start="3"><li>初始化项目</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure><h3>安装模块</h3><ol><li>PixiJS</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save pixi.js</span><br></pre></td></tr></table></figure><ol start="2"><li>TypeScript</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev typescript</span><br></pre></td></tr></table></figure><ol start="3"><li>其它</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev browserify browserify-shim http-server tsify tslint</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><code>tslint</code> TypeScript代码风格控制工具，用于辅助执行编码规范，控制代码质量。</li><li><code>browserify</code> 模块加载和打包工具，参照了Node中的模块系统，约定用require()来引入其他模块，用module.exports来引出模块。</li><li><code>Browserify-Shim</code> 模块转换器，把非 CommonJS 的模块转换成 CommonJS 模块。同时可以通过全局变量暴露模块文件所提供的公开接口。</li><li><code>tsify</code> Browserify的插件，能够访问TypeScript编译器，让Browserify能够处理TypeScript文件。</li><li><code>http-server</code> 简单易用的http服务器，用于运行调试，也可以选择安装<code>live-server</code>。</li></ul><p>如果使用Visual Studio Code作为IDE，可以安装以下<code>@types</code>文件，用于代码提示等功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev @types/pixi.js @types/node</span><br></pre></td></tr></table></figure><h3>初始化模块</h3><ol><li>生成 tsconfig.json</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tsc --init</span><br></pre></td></tr></table></figure><ol start="2"><li>生成 tslint.json</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules/.bin/tslint --init</span><br></pre></td></tr></table></figure><h2>设置</h2><h3>package.json 设置</h3><p>配置scripts中的构建和测试命令，并增加<code>browserify-shim</code>的配置。</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ts_pixi"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.html"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line"><span class="attr">"build"</span>: <span class="string">"node browserify.js &gt; dist/bundle.js"</span>,</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"node_modules/.bin/http-server -c-1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"browserify-shim"</span>: &#123;</span><br><span class="line">    <span class="attr">"pixi"</span>: <span class="string">"global:PIXI"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"pixi.js"</span>: <span class="string">"^4.5.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"@types/node"</span>: <span class="string">"^8.0.28"</span>,</span><br><span class="line">    <span class="attr">"@types/pixi.js"</span>: <span class="string">"^4.5.4"</span>,</span><br><span class="line">    <span class="attr">"browserify"</span>: <span class="string">"^14.4.0"</span>,</span><br><span class="line">    <span class="attr">"browserify-shim"</span>: <span class="string">"^3.8.14"</span>,</span><br><span class="line">    <span class="attr">"http-server"</span>: <span class="string">"^0.10.0"</span>,</span><br><span class="line">    <span class="attr">"tsify"</span>: <span class="string">"^3.0.3"</span>,</span><br><span class="line">    <span class="attr">"tslint"</span>: <span class="string">"^5.7.0"</span>,</span><br><span class="line">    <span class="attr">"typescript"</span>: <span class="string">"^2.5.2"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3>browserify.js设置</h3><ol><li>在项目根目录下新建新建文件<code>browserify.js</code></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch browserify.js</span><br></pre></td></tr></table></figure><ol start="2"><li>修改文件内容为</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> browserify = <span class="built_in">require</span>(<span class="string">'browserify'</span>);</span><br><span class="line"><span class="keyword">var</span> tsify = <span class="built_in">require</span>(<span class="string">'tsify'</span>);</span><br><span class="line"></span><br><span class="line">browserify()</span><br><span class="line">    .add(<span class="string">'src/main.ts'</span>)</span><br><span class="line">    .plugin(tsify, &#123; project: <span class="string">'.'</span> &#125;)</span><br><span class="line">    .transform(<span class="string">'browserify-shim'</span>)</span><br><span class="line">    .bundle()</span><br><span class="line">    .on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123; <span class="built_in">console</span>.error(error.toString()); &#125;)</span><br><span class="line">    .pipe(process.stdout);</span><br></pre></td></tr></table></figure><h2>测试</h2><h3>修改文件</h3><h4>main.ts</h4><p>写一段测试代码，如下所示：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * as PIXI from <span class="string">"pixi.js"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create the renderer</span></span><br><span class="line"><span class="keyword">var</span> renderer = PIXI.autoDetectRenderer(<span class="number">256</span>, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Add the canvas to the HTML document</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(renderer.view);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Create a container object called the `stage`</span></span><br><span class="line"><span class="keyword">var</span> stage = <span class="keyword">new</span> PIXI.Container();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Tell the `renderer` to `render` the `stage`</span></span><br><span class="line">renderer.render(stage);</span><br></pre></td></tr></table></figure><h4>index.html</h4><p>修改文件内容为</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World, Pixi!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>编译测试</h3><h4>编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>此举将会执行<code>package.json</code>中设置的<code>build</code>命令，编译TypeScript文件，并打包至<code>dist/bundle.js</code>中</p><h4>测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm test</span><br></pre></td></tr></table></figure><p>执行命令，打开相应的网址，测试刚刚编写的代码，查看代码是否正确执行。</p><h2>总结</h2><p>不熟悉 node.js 开发，配置的时候遇到了不少问题，不过也都很快解决了。相比 Native 的开发，Web 的工具实在太好用了，很适合前期的原型构建。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://augix.me/archives/5246" target="_blank" rel="noopener">http://augix.me/archives/5246</a></li><li><a href="http://www.mishengqiang.com/index.php/101.html" target="_blank" rel="noopener">http://www.mishengqiang.com/index.php/101.html</a></li><li><a href="https://github.com/kittykatattack/learningPixi" target="_blank" rel="noopener">https://github.com/kittykatattack/learningPixi</a></li><li><a href="https://zhuanlan.zhihu.com/p/21611724" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/21611724</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;PixiJS 作为一款出色的WebGL 2D渲染引擎，除了支持JavaScript之外，还支持 TypeScript 。 TypeScript 的优点不言而喻，支持静态类型检查，IDE代码提示，具有较好的可读性。所以用来替代JavaScript开发项目，也有利于将来的代码重构。本文介绍了以 TypeScript 作为开发语言， PixiJS 作为图形渲染引擎， Browserify 作为模块打包工具的开发环境的配置过程。&lt;/p&gt;
&lt;h2&gt;前提&lt;/h2&gt;
&lt;p&gt;不可或缺的当然是node。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;node --version&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;h3&gt;初始化项目&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;创建项目目录&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir ts_pixi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cd ts_pixi&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mkdir assets src dist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;新建项目文件&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;touch index.html&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;touch src/main.ts&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;初始化项目&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3&gt;安装模块&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;PixiJS&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save pixi.js&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;TypeScript&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev typescript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;其它&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install --save-dev browserify browserify-shim http-server tsify tslint&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="game dev" scheme="http://www.limbonova.com/tags/game-dev/"/>
    
      <category term="PixiJS" scheme="http://www.limbonova.com/tags/pixijs/"/>
    
      <category term="TypeScript" scheme="http://www.limbonova.com/tags/typescript/"/>
    
      <category term="HTML5" scheme="http://www.limbonova.com/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>AI行为树的工作原理</title>
    <link href="http://www.limbonova.com/2017/09/behavior-trees-for-ai-how-they-work/"/>
    <id>http://www.limbonova.com/2017/09/behavior-trees-for-ai-how-they-work/</id>
    <published>2017-09-13T12:19:48.000Z</published>
    <updated>2018-10-29T08:01:26.766Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原文：</strong> <a href="https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php" target="_blank" rel="noopener">Behavior trees for AI: How they work</a><br><strong>作者：</strong> Chris Simpson<br><strong>译者：</strong> Anthony Han</p><blockquote><p>最近在研究行为树相关的内容，看了不少很好的文章。不同于其它文章阐述行为树的原理和实现，这篇文章着重于实践使用，介绍了行为树一般用法，还有一些开阔眼界的特别技巧。为加深印象，我利用业余时间翻译了一下，也希望对他人也有帮助。</p></blockquote><h2>引言</h2><p>虽然网上有很多行为树的教程和指南，但是在研究能不能用在 <a href="http://store.steampowered.com/app/108600" target="_blank" rel="noopener">Project Zomboid</a> 中时，我总是遇到同样的问题。许多教程把重点放在行为树的代码实现上，或者仅仅专注在无上下文的流程图上，而没有任何真正适用的示例，其图表就像这样：<br><img src="/images/bt_for_ai_image_01.png" alt="image"></p><p>虽然在帮助我理解行为树的核心原则方面，这些教程是非常有价值的。但我发现自己处于一种情况：即使知道行为树的运作机制，我也不知道我应该为游戏创建什么样的节点，或者一个真正的完全成型的行为树是什么样子。</p><p>我花了大量的时间进行实验（由于Zomboid项目是用Java写的，我一直在用很棒的JBT —— Java行为树（ <a href="http://sourceforge.net/projects/jbt/" target="_blank" rel="noopener">http://sourceforge.net/projects/jbt/</a> ），所以我没有必要关心自己的实际代码实现。尽管有很多教程的重点在这方面，还有许多常用的游戏引擎中的实现。</p><p>我在这篇文章提到的某些特定装饰器的节点类型，可能来自于 JBT 而不是一般的行为树概念，但是我发现它们是行为树系统中不可或缺的一部分。如果你的行为树不支持的话，你可以考虑实现一下。</p><p>我不会自称是这个方面的专家，但是经过 Project Zomboid 游戏中NPC的开发工作，我觉得我还是有点本事的，所以我想我要爆料一些东西。如果我早点知道会让我的第一次尝试更顺利，或者至少打开了我的眼界，让我了解通过行为树可以做到什么。我不打算深入进行实现，但会给出一些在 Zomboid 项目中使用的抽象示例。</p><a id="more"></a><h2>基础知识</h2><p>顾名思义，与有限状态机或AI编程的其他系统不同，行为树是控制AI实体决策流程的分层节点树。在树的范围内，叶子节点是控制AI实体的实际命令，而分支节点则是各种类型的功能节点，用来控制AI沿树结构走到最符合情况的命令序列。</p><p>行为树可能非常深，带有很多执行特定功能子树的节点，允许开发人员创建可以链接在一起的行为库，用来产生非常令人信服的AI行为。开发是高度迭代的，你可以从构建基本行为开始，然后创建分支节点来处理实现目标的各种方法，分支节点按其需求排序，允许AI在特定行为失败时具有后备策略。这是它们的出众之处。</p><h2>数据驱动与代码驱动</h2><p>这个区别与本指南几乎没有关系，但是应该注意的是行为树有许多不同的实现。一个主要区别是树是否在代码库的外部定义，或许是以XML或专有格式定义的，并且使用外部编辑器进行操作，还是通过嵌套类实例直接在代码中定义树的结构。</p><p>JBT采用了这两种方式的混合方案，其中提供了一个编辑器来允许你可视化地构建行为树，但是导出器的命令行工具实际上会生成java代码来表现代码库中的行为树。</p><p>无论实现是什么样，叶子节点，实际执行游戏特定业务并控制角色或查看角色情况或环境的节点，都是你需要在代码中定义自己的东西。使用原生开发语言或使用Lua或Python等脚本语言。这些可以让你的行为树提供复杂的行为。这些节点可以表现得相当多，有时候作为一个标准库去操作树本身的数据，而不仅仅是简单的字符命令，这些都是行为树让我excited的原因。</p><h2>树的遍历</h2><p>行为树的一个核心部分是，与代码库中的方法不同，树上的特定节点或分支可能需要游戏中很多个循环才能完成。在行为树的基本实现中，系统在每一帧里从树的根节点向下遍历，测试每个节点以查看哪个是活动的，重新检查沿途的任何节点，直到到达当前活动的节点再进行下一次循环。</p><p>这不是一个非常有效的处理方式，尤其是行为树在开发过程中逐渐扩展时而变得越来越深时。在我看来，行为树有必要存储当前正在处理的节点，这样下次循环可以被直接处理，而不是每次循环重新遍历整个树。JBT就是采用这种处理方式的。</p><h2>流程</h2><p>行为树由几种类型的节点组成，但是一些核心功能对于行为树中的所有类型的节点都是通用的。就是它们都有三种返回状态。（根据行为树的实现情况，可能有三种以上的返回状态，但是我还没有用过，而且和本文的介绍内容无关）。三种常见的状态如下：</p><ul><li>成功</li><li>失败</li><li>正在运行</li></ul><p>前两个，如名字所示，告诉父节点，执行的动作是成功还是失败。第三个的意思是成功或失败尚未确定，节点仍在运行。下一次循环行为树再次运行的时候，该节点将被再次执行，这时它有可能成功，失败或继续运行。</p><p>这个功能是行为树强大的关键，因为它允许节点的处理持续多个游戏循环。例如，一个负责行走的 Walk 节点在计算路径时返回运行状态，以及在角色走到到指定位置的期间。如果由于任何原因导致寻路失败，或者在步行过程中出现某些其他复杂情况，以阻止该角色到达目标位置，则该节点将向父节点返回失败状态。如果角色的当前位置等于目标位置，则返回成功来表示 Walk 命令执行成功。</p><p>这意味着独立的节点一定会返回成功或失败，并且可以保证任何调用该节点的树一定会接收到其返回值。这些返回状态然后传播并明确了行为树的执行流程，提供了一系列事件和不同的执行路径，以保证AI的行为和期望的一样。</p><p>通过这种共有的功能，行为树节点有三个主要原型：</p><ul><li>组合节点</li><li>装饰节点</li><li>叶子节点</li></ul><p><img src="/images/bt_for_ai_image_02.png" alt="image"></p><h3>组合节点</h3><p>组合节点是可以有一个或多个子节点的节点。它会根据复合节点的特定规则以先后顺序或随机处理一个或多个子节点，并且在某些阶段将完成处理并将成功/失败状态传递给其父节点，其状态通常由子节点的成功/失败决定。组合节点在处理子节点的期间将持续返回正在运行状态。</p><p>最常用的组合节点是Sequence，它会依次执行每个子节点，当在任何一个孩子失败的时刻返回失败，并且如果每个孩子返回成功状态，则返回成功。</p><h3>装饰节点</h3><p>装饰节点，和组合节点一样也可以拥有一个子节点。不同的是，它们只能拥有单个子节点。装饰器节点根据其类型的不同，转换子节点返回状态中接收到的结果，以终止子节点，或重复处理子节点。</p><p>取反节点是一个常用的装饰节点，它会取反子节点的返回值。如果它的子节点失败，那么取反节点会返回成功，或者子节点成功，那么它会返回失败。</p><h3>叶子节点</h3><p>叶子节点是最低层级的节点类型，并且不能拥有任何子节点。</p><p>但子节点却是最强大的节点类型，因为它是由你的游戏定义并实现的，用来进行游戏相关或者角色相关的测试或行动，使你的行为树切实地发挥作用。</p><p>继续用上面那个例子，就是Walk。Walk叶子节点会让角色走到地图上的特定地点，并根据结果返回成功或失败。</p><p>既然你可以自己定义叶子节点（通常是非常精简的代码），那么当它布置在复合节点和装饰节点之上时，就会非常具有表现力，并且允许你创建功能相当强大的行为树，这些树具备相当复杂的层次和智能优先级的行为。</p><p>以游戏代码做类比，将复合节点和装饰节点视为函数、if语句、while循环以及定义代码流的其他语言结构，而叶子节点视作游戏特定的函数调用，使你的AI动起来或者检查它的状况。</p><p>这些节点可以定义参数。例如，Walk 叶子节点可能含有一个角色走向的目标坐标。</p><p>这些参数可以从存储在的AI角色行为树的上下文的变量获取。例如，移动到位置是由 <code>GetSafeLocation</code> 节点决定并存储在一个变量中，而 Walk 节点可以使用这个存储在上下文中的变量来定义目标位置。在行为树的运行过程中，在节点间共享的上下文来存储和更改持久化的数据，使得行为树非常的强大。</p><p>叶子节点的另一个主要类型是调用另一个行为树，将现有树的上下文数据传递到被调用的树。</p><p>这些功能是非常关键，因为它能行为树大幅模块化，来创建可以重用的行为树，也可以在使用上下文中特定变量进行操作。例如，“闯入建筑”行为可能需要一个<code>targetBuilding</code>变量，因此父树可以在上下文中设置这个变量，然后通过子树的叶子节点调用子树。</p><h2>组合节点</h2><p>这里我们会讨论在行为树中最常见的复合节点。还有其它类型的，但是我们会介绍一些你自己编写复杂的行为树时会碰到的基础知识。</p><h3>序列节点</h3><p>行为树中的最简单的复合节点，正如其名。序列节点会依次执行每个子节点，从第一个开始，成功则执行第二个，依此类推。如果任何一个子节点失败，它会立即返回失败。如果序列中的最后一个子节点返回成功，则该序列节点将返回成功。</p><p>需要明确的是，行为树中的节点类型具有相当广泛的应用。序列节点最常见的用法是用来定义必须全部完成的任务序列，一个任务失败就意味着任务序列的下一步处理变得多余。例如：</p><p><img src="/images/bt_for_ai_image_03.png" alt="image"></p><p>这个序列节点清楚地表明，会让给定的角色走过一扇门，然后关上门。实际上，这些节点在生产环境中可能会更为抽象并且会使用参数。Walk (location), Open (openable), Walk (location), Close (openable)</p><p>处理顺序是这样的：</p><p>序列节点 -&gt; 走向门（成功） -&gt; 序列节点（正在运行） -&gt; 开门（成功） -&gt; 序列节点（正在运行） -&gt; 走过门（成功） -&gt; 序列节点（正在运行） -&gt; 关门（成功） -&gt;  序列节点（成功） -&gt; 序列节点返回成功。</p><p>如果一个角色不能走到门口，也许是因为路径被阻挡，那么尝试开门或走过门就没有意义了。当行走失败时序列节点会返回失败，序列节点的父节点可以正常地处理失败情况。</p><p>事实上，序列节点天生适用于角色的动作顺序，而由于看上去是序列节点在AI行为树的唯一用法，使得其除此之外的用法不那么明朗。请看：</p><p><img src="/images/bt_for_ai_image_04.png" alt="image"></p><p>在上面的例子中，我们没有一个行动列表，而是一个测试列表。子节点检查角色是否饥饿，他们身上是否有食物，他们是否在安全的位置，并且只有当所有这些都返回成功时，角色才会吃食物。使用这样的顺序可以让你在执行动作之前测试一个或多个条件。类似于代码中的if语句，以及电路中的与（AND）门。由于所有的子节点都需要成功，而这些子节点可能是复合/装饰或叶子节点的任何组合，它可以在AI大脑中进行非常强大的条件判断。</p><p>例如看一下上面提到的取反节点：</p><p><img src="/images/bt_for_ai_image_05.png" alt="image"></p><p>和前面的例子功能相同，在这里我们展示如何使用取反节点来否定判断，相当于给你一个非（NOT）门。这意味着你可以大大减少角色或游戏判断条件的节点数量。</p><h3>选择节点</h3><p>选择节点是序列节点的反面。序列节点是一个与（AND）门，所有的子节点返回成功才返回成功，如果选择节点的一个子节点返回成功，那么它会直接返回成功，并且不再处理其它的子节点。它会处理第一个子节点，如果失败那么处理第二个子节点，如果再失败会处理第三个子节点，直到有子节点返回成功，那么它将立即返回成功。如果所有的子节点全部失败则会返回失败。这意味着选择节点类似于或（OR）门，并且作为条件语句用来检查多个条件以判断其中任何一个是否为真。</p><p>选择节点的主要能力来自于他们可以表示多种不同的行动方式，按照从最有利到最不利的优先顺序，并且如果任何一个动作执行成功，都会返回成功。这样功能的潜力巨大，你可以通过使用选择节点快速开发出相当复杂的AI行为。</p><p>让我们重新看一下例子，增加一个潜在的复杂度，并用一个选择节点来解决问题。</p><p><img src="/images/bt_for_ai_image_06.png" alt="image"></p><p>是的，这里我们可以只用少量的新节点，就可以聪明地处理锁住的门。</p><p>那么在执行选择节点时发生了什么？</p><p>首先，开始执行开门的节点。最可取的行动是简单地打开门，没有什么复杂动作。如果成功，那么选择节点会返回成功，知道这个任务完成了。就没有必要处理其他子节点了。</p><p>然而，如果门被哪个家伙锁起来而没有被打开，那么开门节点将返回失败，将失败状态传递给选择节点。这种情况下选择节点将尝试执行第二个子节点，或第二种趋向的行动，即尝试解锁门。</p><p>我们在这里创建了另一个序列节点（必须全部完成返回成功），我们先解锁门，然后尝试打开它。</p><p>如果解锁门的任何一个步骤失败了（也许是AI没有钥匙，或者缺乏所需的撬锁技巧，或者是他们完成了开锁，但是门被钉死了？）那么它会向选择节点返回失败，然后尝试第三个种行动——把门砸开！</p><p>如果角色不够强壮，那么这样或许会失败。在这种情况下，没有更多的行动可选，选择节点会失败，这将导致选择节点的父节点——序列节点失败，放弃通过门的尝试。</p><p>为了更进一步，也许上面还有一个选择节点，由于这个序列节点的失败而选择另一个行动方案？</p><p><img src="/images/bt_for_ai_image_07.png" alt="image"></p><p>这是我们用顶端的选择节点进行扩展后的树。在左边（常用的一面），我们通过门，如果失败，我们会尝试从窗户进入。事实上，实际的实现可能不会是这样，这是我们在Zomboid项目上的一个简化版，但是它能说明问题。稍后我们会做一个更为通用和可用的实现方案。</p><p>简而言之，我们现在有了一个“进入建筑”的行为，你可以依靠这些行为进入有关建筑物，或通知其父节点执行失败。如果没有窗户会怎么样？在这种情况下，最上面的选择节点会执行失败，也许一个父选择节点会告诉AI到另一栋建筑？</p><p>经过之前的各种尝试，行为树大幅简化了AI的开发工作，它的一个关键因素是：而无论我在做什么，失败不再是一个致命终结（呃，路径失败，现在怎么办？），但只是自然而然的AI决策过程的一部分。</p><p>你可以针对每种可能的情况分别准备故障恢复和备用操作。Project Zomboid的一个例子就是 <code>EnsureItemInInventory</code> 行为。</p><p>这个行为传入一个物品类型参数，并使用选择节点从多个操作过程中来确定某个物品是否在NPC的物品栏中，包括用不同物品作为参数执行同一个行为的递归调用。</p><p>首先，它将检查物品是否在角色的主要物品栏中。这是理想的情况，因为什么都不用做。如果是，则选择节点成功，因此整个行为成功。EnsureItemInInventory已成功，物品在那里供使用。</p><p>如果该物品不在角色的物品栏中，则检查角色携带的袋子或背包。如果找到该物品，那么将物品从袋子中转移到他的顶级物品栏中。满足成功条件则会成功。</p><p>如果失败了，则选择节点的第三个分支将确定该项目位于该字符当前所在的建筑物中。如果是，那么角色将会移动到存放物品的容器那里并取出物品。再一次满足条件，成功！</p><p>如果这次又失败了，那么NPC还有一计可施。遍历所需物品的制作列表，并且对于每个原料，将遍历它的制作配方，并且依次递归地为每个物品执行<code>EnsureItemInInventory</code>行为。如果全部成功了，那么我们知道一个事实，就是NPC现在拥有了制作物品所需的各种原料。然后，在满足条件返回成功之前，角色将用这些原料制作物品。</p><p>如果这次还失败，那么<code>EnsureItemInInventory</code>行为会执行失败，没有其它后备方案，NPC会将该物品添加到所需项目的列表中，以便在拾荒任务期间寻找，并在没有该物品的情况下尽力生存下去。</p><p>这么做的结果就是，如果有所需的原料或者可以从房子里取得原料，那么NPC能够在游戏中立即制作出想要的任何物品。</p><p>由于行为的递归性质，如果他们自己没有原料，那么他们甚至会从基础的去尝试制造原料。如果必要的话会搜寻建筑物，多次制造原料以制作他们真正需要的物品。</p><p>突然间我们有了一个非常复杂和令人印象深刻的AI行为，实际上可以归结为相对简单的节点一个一个堆叠起来的。只要我们需要确认NPC的物品栏是否有某个物品时，那么可以在许多其它行为树上轻松使用<code>EnsureItemInInventory</code>这个行为。</p><p>我确信在开发过程的某个时候，我们还会添加其他的后备方案，允许NPC出去专门搜寻他们急需的物品，选择一个最有可能带有该物品的拾取目标。</p><p>另一个故障保护机制可能在优先级列表中的级别会更高，就是考虑与所选物品达成相同目标的其它物品。如果有一天我们最终为了支持“临时工具”而编写了代码，然后寻找不太有效的替代方案，那么用石头敲一个钉子，可能会胜过偷偷摸摸穿过城镇进到一家充斥僵尸的五金店。</p><p>由于在开发过程中行为树的易于扩展，因此很容易创建一个“干活的”的简单行为，然后通过选择节点添加额外的分支来持续迭代地改进NPC行为，以满足更加可靠的故障保护和后备方案，降低行为失败的可能性。物品制作的后备方案在最后阶段加入，给NPC配备一些行为以帮助他们他们实现目标。</p><p>此外，如果仔细确定优先级，这些后备方案虽然本质上是脚本行为，但却给AI角色提供了智能问题解决和自然决策的表现。</p><h3>随机选择/序列节点</h3><p>我不会去讨论这些，因为前面的章节已经清楚地介绍过了。随机序列/选择节点正如其名，但处理子节点的实际顺序是随机确定的。如果没有明确的执行顺序，这些可以用在AI行为中增加更多的不可预测性。</p><h2>装饰节点</h2><h3>取反节点</h3><p>我们已经讲过这个了。简单地说，它们会反转或否定其子节点的结果。成功变成失败，失败变成成功。它们常用于条件测试。</p><h3>成功节点</h3><p>无论子节点返回的什么，总返回成功。当你执行某个预期失败的分支，却又不想放弃执行分支所在的整个序列时，这个节点尤为有用。不需要这种节点的相反方式，因为如果需要向父节点返回失败，取反节点将把一个成功节点变成一个“失败节点”。</p><h3>重复节点</h3><p>重复节点会在其子节点返回结果时重新处理子节点。这些通常用于行为树的根基上，使树连续运行。重复节点可以选择在返回结果前多次执行他们的子节点。</p><h3>重复直到失败</h3><p>像重复节点一样，这些装饰节点会持续地执行其子节点。直到其子节点返回失败时，此节点才会返回成功。</p><h2>数据上下文</h2><p>具体细节取决于行为树的实际实现，所使用的编程语言以及所有其他方面的内容，所以我们将保持这些都是相当抽象和概念化的。</p><p>当在AI实体上调用行为树时，也会创建一个数据上下文来存储变量，这些变量由节点解释和修改（使用 C＃Dictionary 或 Java HashMap 中的 string/object pair，可能是C ++ 或者是 string / void * STL映射，因为我很久没用C++了，所以现在可能有更好的办法）</p><p>节点能够读取或写入变量，提供上下文数据给后面执行的节点，让行为树作为一个团结的整体有序运行。一旦你开始奋力利用这些，行为树的灵活性和作用范围变得非常令人印象深刻，你的指尖真正的威力变得如此耀眼。当我们重新讲门窗行为时再讨论这部分内容。</p><h2>定义叶子节点</h2><p>再次声明，该节点的细节取决于行为树的实际实现。为了提供叶子节点的功能，将特定于游戏的功能添加到行为树中，大多数系统有两个需要实现的函数。</p><p>init  - 首次调用是节点的父节点执行期间，该节点被其父节点访问时。例如，当一个序列节点的子节点要被处理的时候，这个序列节点就会调用这个函数。直到下一次父节点完成处理并返回结果之后，重新出发父节点时，才会再次调用它。该函数用于初始化节点并启动节点所代表的动作。以前面的行走为例，它会获取参数，并可能启动寻路任务。</p><p>process - 在处理节点时，行为树的每次循环都会调用这个函数。如果此函数返回“成功”或“失败”，则其处理将结束，并将结果传递给其父节点。如果返回正在运行，下次循环时它会再次处理，一次又一次，直到它返回成功或失败。在Walk示例中，它会返回正在运行，直到寻路成功或失败。</p><p>节点可以具有与它们相关联的属性，可以显式地传递参数，或者控制AI实体的数据上下文内变量的引用。</p><p>我不会探讨实现的细节，因为这不仅依赖语言，也依赖于行为树的实现，但行为树实例中的参数和存储的概念是相当通用的。</p><p>所以例如，我们可以描述这样一个Walk节点：</p><blockquote><p>Walk (character, destination)<br>-成功：到达目的地<br>-失败：未到达目的地<br>-正在运行：在途中</p></blockquote><p>这种情况下，Walk有两个参数，即角色和目标。假设执行AI行为的角色是一个节点的主体，看上去似乎是很自然的事情，因此也不需要作为参数显式地传递。最好不要做这个假设，尽管“走路”是一个相当安全的赌注。特别是在条件节点上，我已经很多次发现自己不得不重新编码节点，以满足测试另一个角色状态或以某种方式与其进行交互。即使你相当确定只有执行该行为的AI会用到它，最好多花点力气，传入要命令的角色参数。</p><p>如前所述，位置可以用X，Y，Z坐标手动输入。但更可能的是，位置被另一个节点作为变量存储在上下文中，获取一些游戏对象或者建筑的位置，或者计算NPC附近的安全地点。</p><h2>堆栈</h2><p>初见行为树时， 它自然地限制了他们用于角色动作的节点的范围，或对角色或其环境的条件测试。带着这个限制有时很难看出行为树的是多么的强大。</p><p>当我突然想到在实现节点的栈操作时，它的实用行才真的变得清晰起来。所以我将以下节点的实现添加到了游戏中：</p><blockquote><p>PushToStack(item, stackVar)<br>PopFromStack(stack, itemVar)<br>IsEmpty(stack)</p></blockquote><p>就是这三个节点。所需要的只是使用<code>init/process</code>函数来创建和修改标准库堆栈对象，只需几行代码，并且它们打开了一大堆可能性。</p><p>例如 <code>PushToStack</code> 创建一个原先不存在的新堆栈，并将其存储在传递的变量中，然后把 “物品”对象压到栈上去。</p><p>类似地，将一个物品从栈弹出，并将其存储在 itemVar 变量中， 如果堆栈已经为空则会产生问题 ，IsEmpty 检查堆栈是否为空，如果是则返回成功，否则失败。</p><p>有了这些节点，我们现在有能力遍历堆栈，如下所示：</p><p><img src="/images/bt_for_ai_image_08.png" alt="image"></p><p>使用“重复直到失败”节点，我们可以从堆栈中重复弹出元素并对其进行操作，直到堆栈为空，此时 <code>PopFromStack</code> 会返回失败并退出“重复直到失败”节点。</p><p>下面是我经常使用的其他几个重要的实用节点：</p><blockquote><p>SetVariable(varName, object)<br>IsNull(object)</p></blockquote><p>这些可以让我们在复合和装饰节点无法允许我们获取所需信息的情况下，在整个行为树中设置任意变量。</p><p>现在假设我们添加了一个名为 <code>GetDoorStackFromBuilding</code> 的节点，你可以向其传入一个建筑对象，它会取得一个该建筑物的外部大门对象的列表，然后新建并将这些对象压入堆栈，并赋值对应的变量。那么我们可以用上面介绍的这些做什么？</p><p><img src="/images/bt_for_ai_image_09.png" alt="image"></p><p>哎呦，不错哦。这个更复杂一些。乍看起来，很难发现变化了什么。但是像任何语言一样，最终变得更一目了然，失去了可读性却获得了灵活性。</p><p>那这是做什么的呢？一开始可能会让人头大，但是一旦你熟悉了节点的运行方式，以及成功和失败状态是如何贯穿行为树的，它就变得清晰明了。必要的话，如果我的描述不够清楚，我会扩展本节内容，显示整个树的运行过程。</p><p>简而言之，这是一可以找到并尝试从每一扇门进入建筑物的行为，如果角色成功地从进入，就会返回成功，如果没有，它将返回失败。</p><p>首先，它会去找一个保存了进入建筑的所有门的堆栈。然后它调用“重复直到失败”节点，该节点将继续反复处理其子节点，直到其子节点返回失败。</p><p>那个序列子节点，首先从堆栈中弹出一个门，将其存储在门变量中。</p><p>如果没有门而堆栈是空的，那么该节点将失败，跳出“重复直到失败”节点并返回成功（“直到失败”节点总是成功），继续其父序列节点，我们这节点上放置了取反的<code>IsNull(usedDoor)</code>。如果 <code>usedDoor</code> 为<code>null</code>（它会为<code>null</code>，因为它没机会设置这个变量），那么返回失败，这会导致整个行为失败。</p><p>如果堆栈有一扇门，那么调用另一个序列节点（带有一个取反节点），它会尝试走向门，打开门，然后通过门。</p><p>如果NPC没有任何可行的方式通过门（门被锁住，或者NPC太弱而不能打破门），那么选择节点会失败，并返回失败到父节点，这时取反节点将失败转换为成功，这意味着它不会跳出“重复直到失败”节点，而“重复直到失败”节点会重复运行，并重新重新调用其子节点——序列节点，从堆栈弹出下一个门，然后继续让NPC继续尝试。</p><p>如果NPC成功通过一个门，那么它会将这扇门设置到<code>usedDoor</code>变量，此时序列节点将返回成功。这个成功状态被反转成为失败状态，所以我们可以跳出“重复直到失败”节点。</p><p>在这种情况下，我们会在对<code>usedDoor</code>的非空检查中失败，因为它不为<code>null</code>。但它被反转为成功状态，让整个行为返回了成功。其父节点会知道NPC成功地找到了一扇门并进入了建筑。</p><p>如果失败了，可以使用 <code>GetWindowStackFromBuilding</code> 节点重复相同过程来处理从窗子进入的情况。或者通过一些节点的堆栈操作，也许你可​​以调用<code>GetDoorStackFromBuilding</code>和<code>GetWindowStackFromBuilding</code>，把窗户压入到门堆栈的末尾，然后在同一个“重复直到失败”节点中处理，假设开门、解锁、砸门、关门这些操作是基于门窗的基类，或者在运行时检查NPC在操作的对象。</p><p>最后，你可能会注意到我在关门节点上添加了一个装饰节点——成功节点。因为我觉得如果一个NPC砸了门，那么毫无疑问他就不能把它关上。</p><p>没有了成功节点，会导致序列节点在设置<code>usedDoor</code>变量之前失败，并移动到下一扇门。一个替代的解决方案是将“关门”设计为始终成功，即使门被砸了也返回成功。但是，我们希望保留判断关门是否成功的能力（例如，在“保卫避难所”行为中使用该节点会认为门无法关闭而导致失败，因为它确实关不上！ ），因此成功节点可以确保在必要的时候忽略失败。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&quot;https://www.gamasutra.com/blogs/ChrisSimpson/20140717/221339/Behavior_trees_for_AI_How_they_work.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Behavior trees for AI: How they work&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;作者：&lt;/strong&gt; Chris Simpson&lt;br&gt;
&lt;strong&gt;译者：&lt;/strong&gt; Anthony Han&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最近在研究行为树相关的内容，看了不少很好的文章。不同于其它文章阐述行为树的原理和实现，这篇文章着重于实践使用，介绍了行为树一般用法，还有一些开阔眼界的特别技巧。为加深印象，我利用业余时间翻译了一下，也希望对他人也有帮助。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;引言&lt;/h2&gt;
&lt;p&gt;虽然网上有很多行为树的教程和指南，但是在研究能不能用在 &lt;a href=&quot;http://store.steampowered.com/app/108600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Project Zomboid&lt;/a&gt; 中时，我总是遇到同样的问题。许多教程把重点放在行为树的代码实现上，或者仅仅专注在无上下文的流程图上，而没有任何真正适用的示例，其图表就像这样：&lt;br&gt;
&lt;img src=&quot;/images/bt_for_ai_image_01.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;虽然在帮助我理解行为树的核心原则方面，这些教程是非常有价值的。但我发现自己处于一种情况：即使知道行为树的运作机制，我也不知道我应该为游戏创建什么样的节点，或者一个真正的完全成型的行为树是什么样子。&lt;/p&gt;
&lt;p&gt;我花了大量的时间进行实验（由于Zomboid项目是用Java写的，我一直在用很棒的JBT —— Java行为树（ &lt;a href=&quot;http://sourceforge.net/projects/jbt/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://sourceforge.net/projects/jbt/&lt;/a&gt; ），所以我没有必要关心自己的实际代码实现。尽管有很多教程的重点在这方面，还有许多常用的游戏引擎中的实现。&lt;/p&gt;
&lt;p&gt;我在这篇文章提到的某些特定装饰器的节点类型，可能来自于 JBT 而不是一般的行为树概念，但是我发现它们是行为树系统中不可或缺的一部分。如果你的行为树不支持的话，你可以考虑实现一下。&lt;/p&gt;
&lt;p&gt;我不会自称是这个方面的专家，但是经过 Project Zomboid 游戏中NPC的开发工作，我觉得我还是有点本事的，所以我想我要爆料一些东西。如果我早点知道会让我的第一次尝试更顺利，或者至少打开了我的眼界，让我了解通过行为树可以做到什么。我不打算深入进行实现，但会给出一些在 Zomboid 项目中使用的抽象示例。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game dev" scheme="http://www.limbonova.com/tags/game-dev/"/>
    
      <category term="behavior tree" scheme="http://www.limbonova.com/tags/behavior-tree/"/>
    
  </entry>
  
  <entry>
    <title>建筑师谈《监狱建筑师》</title>
    <link href="http://www.limbonova.com/2017/08/asked-an-architect-about-the-game-prison-architect/"/>
    <id>http://www.limbonova.com/2017/08/asked-an-architect-about-the-game-prison-architect/</id>
    <published>2017-08-08T08:28:00.000Z</published>
    <updated>2018-10-29T08:01:26.764Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原文：</strong> <a href="https://motherboard.vice.com/en_us/article/gvyzm4/we-asked-an-architect-about-the-game-prison-architect" target="_blank" rel="noopener">We Asked an Architect About the Game 'Prison Architect’</a><br><strong>作者：</strong> EMANUEL MAIBERG<br><strong>译者：</strong> Anthony Han</p><blockquote><p>这是一篇我自己翻译的文章，主要动力源于几个月前玩的《监狱建筑师》这款游戏。因琐事所累，当时没有写下自己的体验感受。只留下书签栏中的这篇文章，或许可以从另一个角度来看这款游戏并审视其独特题材的社会意义。</p></blockquote><p><img src="https://www.introversion.co.uk/prisonarchitect/images/screenshots/large/prison-architect-12.jpg" alt="prison architect"></p><p>《监狱建筑师》，一款类似模拟城市的监狱模拟经营游戏，恰到好处地探究到了其主题的骇人之处。</p><p>玩家作为《监狱建筑师》的首要任务是用电椅处死一个囚犯，但在你按那个死亡开关前，你还得弄清楚很多细节。你需要建一个单独的建筑，带有一个执行室和拘留室。如果你心肠好的话，可以加一个窗和书架。每个房间需要一定的大小，并使用不同类型的地板。每个房间还需要连接到监狱的电网，电椅会消耗很多电力，所以你要为你的发电机增加一些电容器。</p><p>当你处死囚犯的时候，这个事只是众多的待办事项中的一项：建更多的牢房，扩大食堂，建一个实施戒毒方案的公共房间，修复淋浴管道。还有，哦，处死这个囚犯。</p><p>游戏开发商 Introversion Software 的创意总监克里斯·迪莱（Chris Delay）说，他们特意挑选了监狱生活中最黑暗的部分作为游戏的第一章节。他说：“如果把它当成建造酒店或者其它东西的游戏就会非常轻松。”“但从一开始，我们就认识到，必须让玩家知道这是不一样的体验，他必须要有不一样的思路。”</p><p>游戏的最基本的建筑单元就是那些构成地图的方块。如何解决问题就看你如何有效使用分配给你的空间，经过足够长的时间后，你就会得到自己看待世界的方式（以自己的想法来构建世界），这就是模拟经营游戏的乐趣。这是一个关于最优化的练习。如果你像我一样，看到整齐有序的书架或者清洁干净的桌面感到莫名的享受时，玩模拟经营游戏尤其满足。</p><p>但是，我依然会记得这个游戏的主题，尤其知道现实生活中这一切都是真实存在的之后，我意识到，原来我在游戏里干得很棒的工作竟然如此可怕。</p><a id="more"></a><p>拉斐尔·斯佩里（Raphael Sperry）是一名建筑师，索罗斯司法奖金获得者(Soros Justice fellow)，建筑设计规划师社会责任协会（ADPSR）主席。他还<a href="http://www.vice.cn/read/meet-the-architect-who-wants-to-build-a-more-humane-prison" target="_blank" rel="noopener">推动美国建筑师学会禁止监狱违反人权的空间设计</a> 。</p><p>他在一封电子邮件中告诉我，真正监狱的空间和建筑成本与设计就像《监狱建筑师》里一样。</p><p>“如果你正在为建造监狱牢房倾注混凝土，那么每多一尺的空间就会产生更多墙壁，天花板和地板的开销。”Sperry说，“建筑费用通常以每平方英尺计算，所以监狱牢房的大小与监狱的预算之间有直接的关系。如果牢房较小，其它设施可以更大，比如监狱长的办公室，厨房，防护栅栏。“</p><p>最后一点在《监狱建筑师》里也有体现。 就像现实生活一样，监狱根据有多少囚犯得到多少预算，所以在建立一个心理学家办公室的时候，这个办公室就可以让你开放一些可以改善囚犯生活的方案，减少他们被释放后再犯罪的机会。而这个办公室是以牢房为代价换来的，你本可用这些牢房来赚钱。</p><p>斯佩里说：“监狱施工的预算会分配到不同优先级别的项目中，但囚犯们一般并不包括在内，所以他们的需求会排在最后，牢房的大小一般也会设定在法定的最小尺寸。“法律标准只是禁止残酷或不寻常的惩罚 —— 一个牢房只要没有超过这个限制就可以相当地小。”</p><p>斯佩里在现实生活中反对的一些节省成本的设计完全可以当作《监狱建筑师》的攻略指南。</p><p>他解释说，那种许多牢房围着中间一个大休息室的“豆荚式”监狱设计，通过允许较少的守卫监视更多的囚犯，尽可能地减少人员费用。如果把休息室扩大两倍作为一个食堂，那么这个成本就会进一步下降，在以往的监狱中这两者往往是不同的房间。</p><p>斯佩里说：“监视大量囚犯需要不少的守卫，所以让犯人们呆在牢房里是个好点子，尽管这样会让他们每天的生活很无聊。”“在这个例子中，可以清除出地看到在设计过程中，为了最大程度地降低运营成本，如何牺牲人性化的拘留条件的。”</p><p>虽然这个游戏的灵感来源于迪莱的旧金山恶魔岛之旅，但 Introversion 的总经理马克·莫里斯（Mark Morris）告诉我，他和迪莱在开发游戏时并没有对真正的监狱进行过大量的研究。</p><p>莫里斯说：“我们从来不想做一款超级真实的,可以模拟未来监狱的模拟游戏。”“从来没有，这只是一款游戏。”</p><p>正如莫里斯解释的那样，与真正监狱的相似是因为游戏中的深层系统。包括从电网，守卫工资，到囚犯的基本需求，这很像“模拟人生”基于<a href="https://zh.wikipedia.org/wiki/%E9%9C%80%E6%B1%82%E5%B1%82%E6%AC%A1%E7%90%86%E8%AE%BA" target="_blank" rel="noopener">马斯洛需求层次金字塔 </a> 。囚犯在最基本的层面上有心理需求，但也需要安全，爱和自我实现。如果您用足够的深度模拟了足够多的系统，再加上点利润激励，你就会得到一个真正的栩栩如生的系统。</p><p><img src="https://steamuserimages-a.akamaihd.net/ugc/39748012114349992/036755E738A9C6DE178939C0A01DE3FA7859FD59/" alt="Alt text" title="《监狱建筑师》中可怕又赚钱的监狱，可以单独监禁1200名囚犯。图片来源：Introversion/Steam 用户Jesus Quintana"></p><p>这就是说你并不能创造一个完美的监狱。《监狱建筑师》发布抢先体验版（Early Access）的三年间，Introversion 仔细地将更多的系统和复杂性引入游戏，并关注着玩家们的反应。</p><p>在过去三年中，玩家们已经上传了数千个监狱，供其他玩家下载。其中有些惨无人道却又日进斗金。当给发行商演示的时候，莫里斯和迪莱经常会展示一个玩家制作的有<a href="https://steamcommunity.com/sharedfiles/filedetails/?id=424763027" target="_blank" rel="noopener">1200个单独监禁牢房</a> 的监狱。这有点疯狂，但它只是一个营利性监狱的一种实现形式而已。</p><p>另一方面，即使你设法建造一个非常革新的监狱，对囚犯进行康复方案，增加更多的锻炼空间等等，你还是无法创造一个理想的监狱。游戏里不会出现这样的情况。一小撮极端暴力的囚犯会利用监狱宽松的安保情况，导致一系列的后果。其他囚犯和警卫可能会死掉。</p><p>“你可能会因此决定你只接收轻刑犯，没有暴力背景的人，但实际上你人为地选择了你愿意改造的犯人，然后你完全放弃了真正暴力的囚犯，”迪莱说。</p><p>你可以尽量宽容，但这样不会很管用。当我问斯佩里如何建设最人道的监狱时，他说首先我必须改变整个刑事司法系统。</p><p>“我要提醒人们，正如<a href="https://blacklivesmatter.com/" target="_blank" rel="noopener">黑命贵</a> 运动所表明的，在执法机关对待人民和囚犯的问题上，种族主义是一个重要因素。”斯佩里说。“坦白说，如果是在种族恐惧和仇恨的基础上，不可能建立一个非常人道的监狱的，这个监狱最终会塞满完全不该在监狱的人。”</p><p>这是一个超越游戏的难题。《监狱建筑师》有过度监禁的表现，只要有这样的情况，那么你永远无法建立一个人道的监狱，无论在游戏中还是现实生活中。</p><hr><p><strong>阅读延伸</strong></p><ol><li><a href="https://motherboard.vice.com/en_us/article/gvyzm4/we-asked-an-architect-about-the-game-prison-architect" target="_blank" rel="noopener">https://motherboard.vice.com/en_us/article/gvyzm4/we-asked-an-architect-about-the-game-prison-architect</a></li><li><a href="http://www.vice.cn/read/meet-the-architect-who-wants-to-build-a-more-humane-prison" target="_blank" rel="noopener">http://www.vice.cn/read/meet-the-architect-who-wants-to-build-a-more-humane-prison</a></li><li><a href="http://shen.si/1965/welcome-hotel-california/" target="_blank" rel="noopener">http://shen.si/1965/welcome-hotel-california/</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&quot;https://motherboard.vice.com/en_us/article/gvyzm4/we-asked-an-architect-about-the-game-prison-architect&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;We Asked an Architect About the Game &#39;Prison Architect’&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;作者：&lt;/strong&gt; EMANUEL MAIBERG&lt;br&gt;
&lt;strong&gt;译者：&lt;/strong&gt; Anthony Han&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一篇我自己翻译的文章，主要动力源于几个月前玩的《监狱建筑师》这款游戏。因琐事所累，当时没有写下自己的体验感受。只留下书签栏中的这篇文章，或许可以从另一个角度来看这款游戏并审视其独特题材的社会意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://www.introversion.co.uk/prisonarchitect/images/screenshots/large/prison-architect-12.jpg&quot; alt=&quot;prison architect&quot;&gt;&lt;/p&gt;
&lt;p&gt;《监狱建筑师》，一款类似模拟城市的监狱模拟经营游戏，恰到好处地探究到了其主题的骇人之处。&lt;/p&gt;
&lt;p&gt;玩家作为《监狱建筑师》的首要任务是用电椅处死一个囚犯，但在你按那个死亡开关前，你还得弄清楚很多细节。你需要建一个单独的建筑，带有一个执行室和拘留室。如果你心肠好的话，可以加一个窗和书架。每个房间需要一定的大小，并使用不同类型的地板。每个房间还需要连接到监狱的电网，电椅会消耗很多电力，所以你要为你的发电机增加一些电容器。&lt;/p&gt;
&lt;p&gt;当你处死囚犯的时候，这个事只是众多的待办事项中的一项：建更多的牢房，扩大食堂，建一个实施戒毒方案的公共房间，修复淋浴管道。还有，哦，处死这个囚犯。&lt;/p&gt;
&lt;p&gt;游戏开发商 Introversion Software 的创意总监克里斯·迪莱（Chris Delay）说，他们特意挑选了监狱生活中最黑暗的部分作为游戏的第一章节。他说：“如果把它当成建造酒店或者其它东西的游戏就会非常轻松。”“但从一开始，我们就认识到，必须让玩家知道这是不一样的体验，他必须要有不一样的思路。”&lt;/p&gt;
&lt;p&gt;游戏的最基本的建筑单元就是那些构成地图的方块。如何解决问题就看你如何有效使用分配给你的空间，经过足够长的时间后，你就会得到自己看待世界的方式（以自己的想法来构建世界），这就是模拟经营游戏的乐趣。这是一个关于最优化的练习。如果你像我一样，看到整齐有序的书架或者清洁干净的桌面感到莫名的享受时，玩模拟经营游戏尤其满足。&lt;/p&gt;
&lt;p&gt;但是，我依然会记得这个游戏的主题，尤其知道现实生活中这一切都是真实存在的之后，我意识到，原来我在游戏里干得很棒的工作竟然如此可怕。&lt;/p&gt;
    
    </summary>
    
    
      <category term="game" scheme="http://www.limbonova.com/tags/game/"/>
    
      <category term="game review" scheme="http://www.limbonova.com/tags/game-review/"/>
    
  </entry>
  
  <entry>
    <title>Anders Hejlsberg谈C#、Java和C++中的泛型</title>
    <link href="http://www.limbonova.com/2016/12/a-conversation-with-anders-hejlsberg/"/>
    <id>http://www.limbonova.com/2016/12/a-conversation-with-anders-hejlsberg/</id>
    <published>2016-12-02T10:12:31.000Z</published>
    <updated>2018-10-29T08:01:26.754Z</updated>
    
    <content type="html"><![CDATA[<p><strong>标题：</strong> <a href="http://www.cstc.net.cn/docs/docs.php?id=258" target="_blank" rel="noopener">Anders Hejlsberg谈C#、Java和C++中的泛型</a><br><strong>译者：</strong> lover_P</p><p><strong>原文：</strong> <a href="http://www.artima.com/intv/generics.html" target="_blank" rel="noopener">Generics in C#, Java, and C++: A Conversation with Anders Hejlsberg, Part VII</a><br><strong>作者：</strong> Bill Venners、Bruce Eckel</p><p><strong>人物介绍</strong><br>Anders Hejlsberg，微软著名工程师，带领他的小组设计了C#（读作：C-Sharp）程序设计语言。Hejlsberg第一次登上软件界历史舞台是在80年代早期，因为他为MS-DOS和CP/M设计了Pascal编译器。当时，还是一个小公司的Borland很快雇用了他，并买下了他的编译器，改称Turbo Pascal。在Borland，Hejlsberg继续开发Turbo Pascal，并最终带领他的小组设计了Turbo Pascal的替代品：Delphi。1996年，在进入Borland 13年后，Hejlsberg加入了微软。最初，他做Visual J++和Windows Fundatioin Classes（WFC）的架构师。随后，Hejlsberg成为C#<a href="http://xn--0trp4tfdo79hgnx7ea276g.NET" target="_blank" rel="noopener">的首席设计师和.NET</a> Framework的关键参与者。目前，Anders Hejlsberg还在领导着C#程序设计语言的继续开发。</p><p>Bruce Eckel，Think in C++（C++编程思想）和Think in Java（Java编程思想）的作者。</p><p>Bill Venners，Artima.com的主编。</p><p><strong>内容</strong></p><ul><li>泛型概述</li><li>C#中的泛型</li><li>C#泛型和java泛型的比较</li><li>C#泛型和C++模板的比较</li><li>C#泛型中的约束</li></ul><a id="more"></a><h2>泛型概述</h2><p>Bruce Eckel：您能对泛型做一个快速的介绍么？</p><p>Anders Hejlsberg：泛型其实就是能够向你的类型中加入类型参数的一种能力，也称作参数化的类型或参数多态性。最著名的例子就是List集合类。一个List是一个易于增长的数组。它有一个排序方法，你可以为 它做索引，等等。现在，如果没有参数化的类型，那么不论使用数组还是使用List都不是很好。如果你使用数组，你能获得强类型，因为你可以声明一个Customer类型的数组，但你失去了可增长性和那些方便的方法；如果你使用一个List，你能够得到所有的便利，但你失去了强类型。你难以说出一个List是什么（类型的）List，它只是一个Object的List【译注：“什么类型的List”指的是List存放的元素是什么类型的】。这会给你带来麻烦 ，因为类型只能在运行形时进行检查，也就是说在编译时不会进行类型检查。就算你硬要把一个Customer放进一个List并试图从中得到一个String，编译器也不会不高兴。在运行之前你根本无法发现它不能工作。同时，当你将简单类型【译注：指值类型】放入List时，还必须对它们进行装箱。正是由于这些问题，你不得不在List和数组之间徘徊，你经常要很痛苦地决定应该使用哪一个。</p><p>泛型的伟大之处在于你现在可以尽情地享受你的蛋糕了，因为你能够定义一个List<t>（读作：List of T）【译注：中文可以说成“T类型的List”】。当你使用List时，你居然能够说出它是什么类型的List，并且你将获得强类型，编译器会为你检查它的类型。这些只是直觉上的好处，它还有其它许多优点。当然，你并不是只能将它用于List，Hastable、Dictionary（将键影射到值上的数据结构）——所有你想调用的都行。你可能想将String影射到Customer、将int影射到Order，在这些情况下你都能获得强类型。</t></p><h2>C#中的泛型</h2><p>Bill Venners：泛型在C#中是如何工作的呢？</p><p>Anders Hejlsberg：在没有泛型的C#中，你只能写class List {…}；而在带有泛型的C#中，你可以写class List<t> {…}，这里的T是一个类型参数。在List<t>中，你可以把T就当作一个类型来用。当它实际用来建立一个List对象时，你要写List<int>或List<customer>。这样你就从List<t>构造了一个新的类型，看起来就好像你用你的类型变量替换了所有的类型参数。所有的T都变成了int或Customer，你无须进行向下转换，它们是强类型的，任何时候都会被检查。</t></customer></int></t></t></p><p>在CLR（Common Language Runtime，公共语言运行时）中，当你编译List<t>或其它泛型类型时，它们和普通类型一样被转换为IL（Intermediate Language，中间语言）和元数据。IL和元数据带有附加信息，可以知道这是一个类型参数，当然，原则上泛型类型的编译和其它类型一样。在运行时，当你的应用程序第一次引用List<t>时，系统会看看你是否已经使用过List<int>。如果没有，它会调用JIT将带有int类型变量的List<t>编译为IL和元数据。当JIT即时编译IL时，同样会替换类型参数。</t></int></t></t></p><p>Bruce Eckel：所以它是在运行时被实例化的。</p><p>Anders Hejlsberg：它确实是在运行时实例化。它在需要的时候才产生特定的原生代码（native code）。字面上，当你说List<t>时，你会得到一个int类型的List。如果泛型类型中使用的是T类型的数组，它会变成int类型的数组。</t></p><p>Bruce Eckel：这个类会在某一时刻被垃圾收集器收集么？</p><p>Anders Hejlsberg：是也不是，这是一个正交的问题。它会在该程序集中建立一个类，这个类在程序集中会一直存在。如果你终止了程序集，这个类会消失，和其它类一样。</p><p>Bruce Eckel：但如果我的程序中声明了一个List<int>和一个List<cat>，但我从未使用过List<cat>……</cat></cat></int></p><p>Anders Hejlsberg：……那么系统不会实例化List<cat>。当然，下面的情况除外。如果你使用NGEN产生一个镜像，也就是说如果你预先生成了一个原生代码的镜像，会预先实例化。但是如果你在一般的环境下运行，则这个实例化是纯需求驱动（demand driven）的，会尽可能地延迟【译注：正如上面所说，直到使用时才进行实例化】。</cat></p><p>实际上，我们所要进行实例化的所有类型都是值类型——如List<int>、List<long>、List<double>、List<float>——我们为每一个都建立一份唯一的可执行原生代码的拷贝。因此，List<int>有它自己的代码，List<long>有它自己的代码，List<float>有它自己的代码。对于所有的引用类型我们共享它们的代码，因为它们在表现上是一样的，它们只是一些指针。</float></long></int></float></double></long></int></p><p>Bruce Eckel：因此你只需要转换。</p><p>Anders Hejlsberg：不，实际上是不需要的。我们可以共享原生镜像，但他们实际上具有独立的VTable。我要指出的是，我们只是尽量对代码进行有意义的共享，但我们很清楚，为了效率，有很多代码是不能共享的。典型的就是值类型，你会很关心List<int>中到底是不是int。你肯定不希望将它们被装箱为Object。对值类型进行装箱是一种共享的方法，但对它们进行装箱开销会很大。</int></p><p>Bill Venners：对于引用类型，所不同的只是类。List<elephant>不同于List<orangutan>，但他们实际上共享了所有方法的代码。</orangutan></elephant></p><p>Anders Hejlsberg：是的。作为实现的细节，它们实际上共享了相同的原生代码。</p><h2>C#泛型和java泛型的比较</h2><p>Bruce Eckel：如何比较C#中的泛型和java中的泛型呢？</p><p>Adners hejlsberg：Java的泛型最初是基于Martin Odersky和其它人一起做的称作Pizza的一个项目的。Pizza后改名为GJ，然后成为JSR，最后以被Java语言收容而告终。这种泛型以能够在原有的VM（Virtual Machine，虚拟机）上运行为关键设计目标。也就是说，你不必修改你的VM，但它会带来很多限制。这些限制并不会很快出现，但很快你就会说：“嗯，这有点陌生。”</p><p>例如，使用Java泛型，我觉得你实际上不会获得任何的执行效率，因为当你编译一个Java泛型类时，编译器会将所有的类型参数替换为Object。当然，如果你尝试建立一个List<int>，你就需要对所有的int进行装箱。因此，这会有很大的开销。另外，为了让VM高兴，编译器必须为所有的类型插入类型转换。如果一个List是Object的，而你想将这些Object视为Customer，就必须将Object转换为Customer，以让类型检查器满意。而它在实现这些的时候，真的只是为你插入所有这些类型转换。因此，你只是尝到了语法上的甜头，却没有获得任何执行效率。所以我觉得这是（泛型的）Java实现的头号问题。</int></p><p>第二号问题，我觉得也是一个很严重的问题，这就是由于Java泛型是依靠消除所有的类型参数来实现的，你就无法在运行时获得一个和编译时同样可靠的表现。当你在Java中反射一个泛型的List的时候，你无法得知这是个List什么类型的List。它只是一个List。因为你失去了类型信息，任何由代码生成方案或基于反射的方案所产生的动态类型都将无法工作。唯一让我认为清晰的趋势就是，越来越多的东西将不能运行，就是因为你丢掉了类型信息。但在我们的实现中，所有这些信息都是可用的。你可以使用反射来获得List<t>对象的System.Type。但你还不能建立它的一个实例，因为你并不知道T是什么。但是接下来你可以使用反射来获得int的Sytem.Type。然后你就可以请求反射将这两个System.Type结合起来并建立一个List<int>，然后你还能获得List<int>的另一个System.Type。因此，所有你在编译期间能做的在运行时同样可以。</int></int></t></p><h2>C#泛型和C++模板的比较</h2><p>Bruce Eckel：如何比较C#泛型和C++模板呢？</p><p>Anders Hejlsberg：我认为对C#泛型和C++模板之间的区别最好的理解是：C#泛型更像类，只不过它带有类型参数；C++模板接近宏，只不过它看起来像类。</p><p>C#泛型和C++模板之间最大的区别在于类型检查发生的时机和如何进行实例化。首先，C#在运行时进行实例化。而C++在编译时，或者可能是连接时进行实例化。不管怎么说，C++是在程序运行前进行实例化。这是第一点不同。第二点不同是当你编译泛型类型时，C#会进行强类型检查。对于一个非约束的类型参数，如List<t>，能够在类型为T的值上执行的方法仅仅是那些能够在Object类型中找到的方法，因为只有这些方法是我们能够保证存在的。在C#中，我们要保证在一个类型参数上执行的所有操作都能成功。</t></p><p>C++正相反。在C++中，你可以在类型参数所指定的类型的变量上执行你想做的任何操作。但是一旦你对它进行了实例化，它就有可能无法工作，你将会得到一些含义模糊的错误信息。例如，如果你有一个类型参数T，而x和y是T类型的变量，然后你执行x+y，如果你对两个T定义了一个operator+还好说，否则你就只能得到一些没意义的错误消息。因此，从某种意义上说，C++模板实际上是无类型的，或者说是弱类型的。而C#泛型是强类型的。</p><h2>C#泛型中的约束</h2><p>Bruce Eckel：约束是如何在C#泛型中工作的呢？</p><p>Anders Hejlsberg：在C#泛型中，我们能够为类型参数施加约束。以我们的List<t>为例，你可以说class List<t> where T : IComparable。这意味着T必须实现IComparable接口。</t></t></p><p>Bruce Eckel：有意思。在C++中，约束是隐式的。</p><p>Anders Hejlsberg：是的。在C#中我们也可以这样做。譬如我们有一个Dictionary&lt;K, V&gt;，它有一个Add()方法，这个方法带有K key和V value参数。Add()方法的实现将希望能够将传递进来的key和Dictionary中已经存在的key进行比较，而且它希望使用一个称作IComparable的接口。唯一的途径就是将key参数转换为IComparable接口，然后调用CompareTo方法。当然，当你这么做的时候，你就为K类型和key参数建立了一个隐式的约束。如果传递进来的key没有实现IComparable接口，你会得到一个运行时错误。这在你的所有方法中都有可能出现，因为你的约定没有要求key必须实现IComparable接口。当然，你还得为运行时类型检查付出代价，因为你实际上进行了动态类型转换。</p><p>使用约束，你可以消除代码中的动态检查，而在编译时或装载时进行。当你要求K必须实现IComparable接口时，会发生很多事情。对于K类型的值，你现在可以直接访问接口方法而无需类型转换。因为程序在语义上可以保证它实现了这个接口。无论什么时候你尝试建立这个类型的一个实例时，编译器都会检查这些类型是否实现了这个接口，如果没有实现，会给你一个编译错误。如果你使用的是反射，你会得到一个异常。</p><p>Bruce Eckel：你是说编译器和运行时（都会进行检查）？</p><p>Anders Hejlsberg：编译器会检查它，但你仍有可能在运行时通过反射来做这些，因此系统还会检查它。正像我前面说的，编译时可以做的任何事都可以在运行是通过反射来做。</p><p>Bruce Eckel：我可以做一个函数模板，换句话说，一个带有不知道类型的参数的函数？你为约束添加了强类型检查，但我是不是能像C++模板那样得到一个弱类型模板？ 例如，我能否写一个函数，它带有两个参数A a和B b，并在代码中写a+b？我能不能说我不在乎对于A和B是否有operator+，因为它们是弱类型的？</p><p>Anders Hejlsberg：你真正要问的问题应该是这在约束中如何说吧？约束，和其他特性一样，最终将可以是任意复杂的。当你考虑它的时候，约束只是一个模式匹配机制。你可能希望能够说“这个类型参数必须有一个带有两个参数的构造器、实现了operator+、有这个静态方法、有那两个实例方法、等等”。问题是，你希望这种模式匹配机制有多复杂？</p><p>从没有任何东西到完全模式匹配是一个整个的连续体。没有任何东西（的模式匹配）太小了，不能说明问题；而完全模式匹配又太复杂了，因此我们需要在中间找一个平衡点。我们允许你将约束指定为一个类、一个或多个接口，以及一些构造器约束。譬如，你可以说：“这个类型必须实现IFoo和IBar”或“这个类型必须继承基类X”。一旦你这么做了，在编译时和运行时都会检查这个约束是否为真。这个约束所隐含的任何方法对于类型参数所指定的类型的值都是直接有效的。</p><p>现在，在C#中，运算符是静态成员。因此，运算符不能是接口的成员，因此接口约束不能带给你operator+。你只能通过类约束获得operator+，你可以说这个类型参数必须继承自比如说Number类，并且Number类对于两个Nubmer有operator+。但你不能抽象地说“必须有一个operator+”，我们无法知道这句话的具体含义。</p><p>Bill Venners：你通过类型进行约束，而不是签名。</p><p>Anders Hejlsberg：是的。</p><p>Bill Venners：因此这个类型必须扩展一个类或实现一个接口。</p><p>Anders Hejlsberg：是的。而且我们还能够走得更远。实际上我们也想过再走远一些，但这会变得相当复杂。而且增加的复杂性与所得到的相比很不值得。如果你想做的事情在约束系统中不直接支持，你可以使用一个工厂模式。例如你有一个Martix<t>，而在这个Martix（矩阵）中，你可能想定义一个“点乘”【译注：矩阵上的一种乘法运算，另一种称为“叉乘”】方法。这意味着你最终将要考虑如何将两个T相乘，但你不能将这说成是一个约束，至少当T不是int、double或float时你不能这么说。但你可以让你的Martix带有一个Calculator<t>作为参数，而在Calculator<t>中，有一个称为Multiply的方法。你可以在其中进行实现，并将结果传递给Martix。</t></t></t></p><p>Bruce Eckel：而且Calculator也是一个参数化的类型。</p><p>Anders Hejlsberg：是的。这有些像工厂模式，还有很多方法可以做到，这也许不是你最喜欢的方法，但做任何事情都要付出代价。</p><p>Bruce Eckel： 是呀，我开始认为C++模板是一种弱类型机制。而当你想其中添加了约束后，你从弱类型走向了强类型。但这一定会带来更多的复杂性。这就是代价吧。</p><p>Anders Hejlsberg： 关于类型你可以认为它是一个标尺。这个标尺定得越高，程序员的日子就会越不好过，但更高的安全性随之而来。但你可以把这个标尺向任何一个方向调节。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;标题：&lt;/strong&gt; &lt;a href=&quot;http://www.cstc.net.cn/docs/docs.php?id=258&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Anders Hejlsberg谈C#、Java和C++中的泛型&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;译者：&lt;/strong&gt; lover_P&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&quot;http://www.artima.com/intv/generics.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Generics in C#, Java, and C++: A Conversation with Anders Hejlsberg, Part VII&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;作者：&lt;/strong&gt; Bill Venners、Bruce Eckel&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人物介绍&lt;/strong&gt;&lt;br&gt;
Anders Hejlsberg，微软著名工程师，带领他的小组设计了C#（读作：C-Sharp）程序设计语言。Hejlsberg第一次登上软件界历史舞台是在80年代早期，因为他为MS-DOS和CP/M设计了Pascal编译器。当时，还是一个小公司的Borland很快雇用了他，并买下了他的编译器，改称Turbo Pascal。在Borland，Hejlsberg继续开发Turbo Pascal，并最终带领他的小组设计了Turbo Pascal的替代品：Delphi。1996年，在进入Borland 13年后，Hejlsberg加入了微软。最初，他做Visual J++和Windows Fundatioin Classes（WFC）的架构师。随后，Hejlsberg成为C#&lt;a href=&quot;http://xn--0trp4tfdo79hgnx7ea276g.NET&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;的首席设计师和.NET&lt;/a&gt; Framework的关键参与者。目前，Anders Hejlsberg还在领导着C#程序设计语言的继续开发。&lt;/p&gt;
&lt;p&gt;Bruce Eckel，Think in C++（C++编程思想）和Think in Java（Java编程思想）的作者。&lt;/p&gt;
&lt;p&gt;Bill Venners，Artima.com的主编。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型概述&lt;/li&gt;
&lt;li&gt;C#中的泛型&lt;/li&gt;
&lt;li&gt;C#泛型和java泛型的比较&lt;/li&gt;
&lt;li&gt;C#泛型和C++模板的比较&lt;/li&gt;
&lt;li&gt;C#泛型中的约束&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="programming" scheme="http://www.limbonova.com/tags/programming/"/>
    
      <category term="generics" scheme="http://www.limbonova.com/tags/generics/"/>
    
      <category term="c#" scheme="http://www.limbonova.com/tags/c/"/>
    
      <category term="java" scheme="http://www.limbonova.com/tags/java/"/>
    
      <category term="c++" scheme="http://www.limbonova.com/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>Bitnami Redmine 升级简易指南</title>
    <link href="http://www.limbonova.com/2016/09/bitnami-redmine-upgrade-guide/"/>
    <id>http://www.limbonova.com/2016/09/bitnami-redmine-upgrade-guide/</id>
    <published>2016-09-27T03:00:54.000Z</published>
    <updated>2018-10-29T08:01:26.768Z</updated>
    
    <content type="html"><![CDATA[<p>顺利地将项目组的 Redmine 从3.1.0 升到3.3.0，没遇到什么问题。因为用的是 Bitnami 集成包，结合 Bitnami 和 Redmine 的文档，很快就完成了升级。</p><h2>系统需求</h2><p>适用于Windows平台的 Bitnami Redmine 2.x+ 升级到 3.3，Redmine 的 Ruby， Rails 系统需求见下表</p><table><thead><tr><th>Redmine version</th><th>Supported Ruby versions</th><th>Rails version used</th></tr></thead><tbody><tr><td>3.3, current trunk</td><td>ruby 1.9.3, 2.0.0, 2.1, 2.21, 2.3</td><td>Rails 4.2</td></tr><tr><td>3.2, 3.1</td><td>ruby 1.9.3, 2.0.0, 2.1, 2.21</td><td>Rails 4.2</td></tr></tbody></table><p>Redmine 3.2 or lower does not support Ruby 2.3. Redmine 3.3 supports Ruby 2.3.<br>Redmine does not support JRuby because some gems do not support Rails 4.2.<br>细节参看 <a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall#Requirements" target="_blank" rel="noopener">Requirements</a></p><h2>备份数据</h2><h3>Bitnami Stack</h3><p>若使用 Bitnami 集成包，可以直接备份整个目录即可。</p><h3>Redmine</h3><p>若只升级 Redmine 则先确认系统需求然后执行备份。</p><h4>备份文件</h4><p>最好备份整个 redmine 目录，主要包括</p><ul><li>上传文件(apps\redmine\htdocs\files)</li><li>插件(apps\redmine\htdocs\plugins)</li><li>主题(apps\redmine\htdocs\themes)</li><li>配置文件(apps\redmine\htdocs\config)</li></ul><a id="more"></a><h4>备份数据库</h4><p><code>mysql -u root -p bitnami_redmine &gt; redmine_backup.sql</code></p><h2>开始升级</h2><p>完成了数据备份，那么就可以开始着手升级 Redmine 了。</p><h3>卸载旧版本</h3><p>如果使用的 Bitnami 集成包，需要先停止并删除服务。<br>以管理员身份运行 cmd；</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bitnami_dir</span><br><span class="line">servicerun.bat STOP</span><br><span class="line">serviceinstall.bat REMOVE</span><br></pre></td></tr></table></figure><p>打开 manager-windows.exe 查看 Manage Servers 服务状态，确认所有服务已经被移除。</p><h3>安装新版本</h3><ol><li>安装 bitnami-redmine-3.3.0-1-windows-installer.exe</li><li>如果记得之前的配置参数，可以在安装时设置好。</li></ol><h3>更新文件</h3><h4>配置文件</h4><p>按照旧版本的配置，设置好新版本的参数。<br><code>apps\redmine\htdocs\config\configuration.yml</code><br><strong>注意：yml文件格式，配置项的冒号后一定要有空格</strong></p><h4>上传文件</h4><p>复制备份文件到新版本的对应目录</p><ul><li>apps\redmine\htdocs\files</li></ul><h4>插件及主题</h4><p>复制备份文件到新版本的对应目录</p><ul><li>apps\redmine\htdocs\plugins</li><li>apps\redmine\htdocs\themes</li></ul><h3>更新数据库</h3><ol><li>运行 manager-windows.exe，停止数据库外的其它所有服务；</li><li>登录数据库，如果数据库不在本地需要加 -h 参数指定主机名；</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p </span><br><span class="line">mysql&gt; drop database bitnami_redmine;</span><br><span class="line">mysql&gt; create database bitnami_redmine;</span><br><span class="line">mysql&gt; grant all privileges on bitnami_redmine.* to &apos;bn_redmine&apos;@&apos;localhost&apos; identified by &apos;DATABASE_PASSWORD&apos;;</span><br><span class="line">mysql&gt; quit</span><br></pre></td></tr></table></figure><ol start="3"><li>导入之前的备份数据</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p bitnami_redmine &lt; redmine_backup.sql</span><br></pre></td></tr></table></figure><ol start="4"><li>更新数据库用户名和密码，配置文件为 <code>apps/redmine/htdocs/config/database.yml</code>，如果安装时设置了，似乎不用再设置</li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">production:</span></span><br><span class="line"><span class="attr">  adapter:</span> mysql2</span><br><span class="line"><span class="attr">  database:</span> bitnami_redmine</span><br><span class="line"><span class="attr">  host:</span> localhost</span><br><span class="line"><span class="attr">  username:</span> bn_redmine</span><br><span class="line"><span class="attr">  password:</span> <span class="string">"DATABASE_PASSWORD"</span></span><br><span class="line"><span class="attr">  encoding:</span> utf8</span><br></pre></td></tr></table></figure><ol start="5"><li>迁移数据库到最新版</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd apps/redmine/htdocs </span><br><span class="line">bundle exec rake redmine:plugins:migrate RAILS_ENV=production</span><br></pre></td></tr></table></figure><p>如果安装过插件，执行 <code>bundle exec rake redmine:plugins:migrate RAILS_ENV=production</code></p><h3>清理</h3><ol><li>清理缓存<br><code>bundle exec rake tmp:cache:clear tmp:sessions:clear RAILS_ENV=production</code></li><li>manager-windows.exe 重启所有服务；</li><li>如果有新功能的话，登录Redmine到“角色和权限”里设置新功能的权限；</li></ol><h2>总结</h2><p>升级很简单，几乎没遇到问题。之前在将Redmine 2.5升级到3.1时，没有仔细看文档，结果没有升级成功，后来只好用了3.1版本，数据也没有迁移过来。这一次升级后考虑迁移2.5版本的数据，却已经发现用户表数据不一致，迁移复杂度大大增加，只好作罢，不过数据一直保留着。对于常规系统的运维，最重要的还是数据备份。使用rm，drop database 等命令之前要谨慎，否则真是要欲哭无泪。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="https://docs.bitnami.com/installer/apps/redmine/#how-to-upgrade-redmine" target="_blank" rel="noopener">https://docs.bitnami.com/installer/apps/redmine/#how-to-upgrade-redmine</a></li><li><a href="http://www.redmine.org/projects/redmine/wiki/RedmineUpgrade" target="_blank" rel="noopener">http://www.redmine.org/projects/redmine/wiki/RedmineUpgrade</a></li><li><a href="https://docs.bitnami.com/installer/windows-faq/#how-to-upgrade-a-bitnami-stack" target="_blank" rel="noopener">https://docs.bitnami.com/installer/windows-faq/#how-to-upgrade-a-bitnami-stack</a></li><li><a href="http://www.redmine.org/projects/redmine/wiki/RedmineInstall#Requirements" target="_blank" rel="noopener">http://www.redmine.org/projects/redmine/wiki/RedmineInstall#Requirements</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;顺利地将项目组的 Redmine 从3.1.0 升到3.3.0，没遇到什么问题。因为用的是 Bitnami 集成包，结合 Bitnami 和 Redmine 的文档，很快就完成了升级。&lt;/p&gt;
&lt;h2&gt;系统需求&lt;/h2&gt;
&lt;p&gt;适用于Windows平台的 Bitnami Redmine 2.x+ 升级到 3.3，Redmine 的 Ruby， Rails 系统需求见下表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Redmine version&lt;/th&gt;
&lt;th&gt;Supported Ruby versions&lt;/th&gt;
&lt;th&gt;Rails version used&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3.3, current trunk&lt;/td&gt;
&lt;td&gt;ruby 1.9.3, 2.0.0, 2.1, 2.21, 2.3&lt;/td&gt;
&lt;td&gt;Rails 4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.2, 3.1&lt;/td&gt;
&lt;td&gt;ruby 1.9.3, 2.0.0, 2.1, 2.21&lt;/td&gt;
&lt;td&gt;Rails 4.2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Redmine 3.2 or lower does not support Ruby 2.3. Redmine 3.3 supports Ruby 2.3.&lt;br&gt;
Redmine does not support JRuby because some gems do not support Rails 4.2.&lt;br&gt;
细节参看 &lt;a href=&quot;http://www.redmine.org/projects/redmine/wiki/RedmineInstall#Requirements&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Requirements&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;备份数据&lt;/h2&gt;
&lt;h3&gt;Bitnami Stack&lt;/h3&gt;
&lt;p&gt;若使用 Bitnami 集成包，可以直接备份整个目录即可。&lt;/p&gt;
&lt;h3&gt;Redmine&lt;/h3&gt;
&lt;p&gt;若只升级 Redmine 则先确认系统需求然后执行备份。&lt;/p&gt;
&lt;h4&gt;备份文件&lt;/h4&gt;
&lt;p&gt;最好备份整个 redmine 目录，主要包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上传文件(apps\redmine\htdocs\files)&lt;/li&gt;
&lt;li&gt;插件(apps\redmine\htdocs\plugins)&lt;/li&gt;
&lt;li&gt;主题(apps\redmine\htdocs\themes)&lt;/li&gt;
&lt;li&gt;配置文件(apps\redmine\htdocs\config)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="redmine" scheme="http://www.limbonova.com/tags/redmine/"/>
    
  </entry>
  
  <entry>
    <title>Markdown Syntax zhTW</title>
    <link href="http://www.limbonova.com/2016/08/markdown-syntax-zhtw/"/>
    <id>http://www.limbonova.com/2016/08/markdown-syntax-zhtw/</id>
    <published>2016-08-18T06:12:40.000Z</published>
    <updated>2018-10-29T08:01:26.800Z</updated>
    
    <content type="html"><![CDATA[<p><strong>NOTE:</strong> This is Traditional Chinese Edition Document of<br>Markdown Syntax. If you are seeking for English Edition<br>Document. Please refer to <a href="http://daringfireball.net/projects/markdown/syntax" target="_blank" rel="noopener">Markdown: Syntax</a>.</p><h1>Markdown: Syntax</h1><ul><li><a href="#overview">概述</a><ul><li><a href="#philosophy">哲學</a></li><li><a href="#html">行內 HTML</a></li><li><a href="#autoescape">特殊字元自動轉換</a></li></ul></li><li><a href="#block">區塊元素</a><ul><li><a href="#p">段落和換行</a></li><li><a href="#header">標題</a></li><li><a href="#blockquote">區塊引言</a></li><li><a href="#list">清單</a></li><li><a href="#precode">程式碼區塊</a></li><li><a href="#hr">分隔線</a></li></ul></li><li><a href="#span">區段元素</a><ul><li><a href="#link">連結</a></li><li><a href="#em">強調</a></li><li><a href="#code">程式碼</a></li><li><a href="#img">圖片</a></li></ul></li><li><a href="#misc">其它</a><ul><li><a href="#backslash">跳脫字元</a></li><li><a href="#autolink">自動連結</a></li></ul></li><li><a href="#acknowledgement">感謝</a></li></ul><p>**注意：**這份文件是用 Markdown 寫的，你可以<a href="https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md" target="_blank" rel="noopener">看看它的原始檔</a> 。</p><a id="more"></a><hr><p></p><h2 id="overview">概述</h2><p></p><p></p><h3 id="philosophy">哲學</h3><p></p><p>Markdown 的目標是實現「易讀易寫」。</p><p>不過最需要強調的便是它的可讀性。一份使用 Markdown 格式撰寫的文件應該可以直接以純文字發佈，並且看起來不會像是由許多標籤或是格式指令所構成。Markdown 語法受到一些既有 text-to-HTML 格式的影響，包括 <a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a>、<a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a>、<a href="http://textism.com/tools/textile/" target="_blank" rel="noopener">Textile</a>、<a href="http://docutils.sourceforge.net/rst.html" target="_blank" rel="noopener">reStructuredText</a>、<a href="http://www.triptico.com/software/grutatxt.html" target="_blank" rel="noopener">Grutatext</a> 和 <a href="http://ettext.taint.org/doc/" target="_blank" rel="noopener">EtText</a>，然而最大靈感來源其實是純文字的電子郵件格式。</p><p>因此 Markdown 的語法全由標點符號所組成，並經過嚴謹慎選，是為了讓它們看起來就像所要表達的意思。像是在文字兩旁加上星號，看起來就像*強調*。Markdown 的清單看起來，嗯，就是清單。假如你有使用過電子郵件，區塊引言看起來就真的像是引用一段文字。</p><p></p><h3 id="html">行內 HTML</h3><p></p><p>Markdown 的語法有個主要的目的：用來作為一種網路內容的<em>寫作</em>用語言。</p><p>Markdown 不是要來取代 HTML，甚至也沒有要和它相似，它的語法種類不多，只和 HTML 的一部分有關係，重點<em>不是</em>要創造一種更容易寫作 HTML 文件的語法，我認為 HTML 已經很容易寫了，Markdown 的重點在於，它能讓文件更容易閱讀、編寫。HTML 是一種<em>發佈</em>的格式，Markdown 是一種<em>編寫</em>的格式，因此，Markdown 的格式語法只涵蓋純文字可以涵蓋的範圍。</p><p>不在 Markdown 涵蓋範圍之外的標籤，都可以直接在文件裡面用 HTML 撰寫。不需要額外標註這是 HTML 或是 Markdown；只要直接加標籤就可以了。</p><p>只有區塊元素──比如 <code>&lt;div&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code> 等標籤，必須在前後加上空行，以利與內容區隔。而且這些（元素）的開始與結尾標籤，不可以用 tab 或是空白來縮排。Markdown 的產生器有智慧型判斷，可以避免在區塊標籤前後加上沒有必要的 <code>&lt;p&gt;</code> 標籤。</p><p>舉例來說，在 Markdown 文件裡加上一段 HTML 表格：</p><pre><code>This is a regular paragraph.&lt;table&gt;    &lt;tr&gt;        &lt;td&gt;Foo&lt;/td&gt;    &lt;/tr&gt;&lt;/table&gt;This is another regular paragraph.</code></pre><p>請注意，Markdown 語法在 HTML 區塊標籤中將不會被進行處理。例如，你無法在 HTML 區塊內使用 Markdown 形式的<code>*強調*</code>。</p><p>HTML 的區段標籤如 <code>&lt;span&gt;</code>、<code>&lt;cite&gt;</code>、<code>&lt;del&gt;</code> 則不受限制，可以在 Markdown 的段落、清單或是標題裡任意使用。依照個人習慣，甚至可以不用Markdown 格式，而採用 HTML 標籤來格式化。舉例說明：如果比較喜歡 HTML 的  <code>&lt;a&gt;</code> 或 <code>&lt;img&gt;</code> 標籤，可以直接使用這些標籤，而不用 Markdown 提供的連結或是影像標示語法。</p><p>HTML 區段標籤和區塊標籤不同，在區段標籤的範圍內， Markdown 的語法是有效的。</p><p></p><h3 id="autoescape">特殊字元自動轉換</h3><p></p><p>在 HTML 文件中，有兩個字元需要特殊處理： <code>&lt;</code> 和 <code>&amp;</code> 。 <code>&lt;</code> 符號用於起始標籤，<code>&amp;</code> 符號則用於標記 HTML 實體，如果你只是想要使用這些符號，你必須要使用實體的形式，像是 <code>&amp;lt;</code> 和 <code>&amp;amp;</code>。</p><p><code>&amp;</code> 符號其實很容易讓寫作網路文件的人感到困擾，如果你要打「AT&amp;T」 ，你必須要寫成「<code>AT&amp;amp;T</code>」 ，還得轉換網址內的 <code>&amp;</code> 符號，如果你要連結到：</p><pre><code>http://images.google.com/images?num=30&amp;q=larry+bird</code></pre><p>你必須要把網址轉成：</p><pre><code>http://images.google.com/images?num=30&amp;amp;q=larry+bird</code></pre><p>才能放到連結標籤的 <code>href</code> 屬性裡。不用說也知道這很容易忘記，這也可能是 HTML 標準檢查所檢查到的錯誤中，數量最多的。</p><p>Markdown 允許你直接使用這些符號，但是你要小心跳脫字元的使用，如果你是在HTML 實體中使用 <code>&amp;</code> 符號的話，它不會被轉換，而在其它情形下，它則會被轉換成 <code>&amp;amp;</code>。所以你如果要在文件中插入一個著作權的符號，你可以這樣寫：</p><pre><code>&amp;copy;</code></pre><p>Markdown 將不會對這段文字做修改，但是如果你這樣寫：</p><pre><code>AT&amp;T</code></pre><p>Markdown 就會將它轉為：</p><pre><code>AT&amp;amp;T</code></pre><p>類似的狀況也會發生在 <code>&lt;</code> 符號上，因為 Markdown 支援 <a href="#html">行內 HTML</a> ，如果你是使用 <code>&lt;</code> 符號作為 HTML 標籤使用，那 Markdown 也不會對它做任何轉換，但是如果你是寫：</p><pre><code>4 &lt; 5</code></pre><p>Markdown 將會把它轉換為：</p><pre><code>4 &amp;lt; 5</code></pre><p>不過需要注意的是，code 範圍內，不論是行內還是區塊， <code>&lt;</code> 和 <code>&amp;</code> 兩個符號都<em>一定</em>會被轉換成 HTML 實體，這項特性讓你可以很容易地用 Markdown 寫 HTML code （和 HTML 相對而言， HTML 語法中，你要把所有的 <code>&lt;</code> 和 <code>&amp;</code> 都轉換為 HTML 實體，才能在 HTML 文件裡面寫出 HTML code。）</p><hr><p></p><h2 id="block">區塊元素</h2><p></p><p></p><h3 id="p">段落和換行</h3><p></p><p>一個段落是由一個以上相連接的行句組成，而一個以上的空行則會切分出不同的段落（空行的定義是顯示上看起來像是空行，便會被視為空行。比方說，若某一行只包含空白和 tab，則該行也會被視為空行），一般的段落不需要用空白或斷行縮排。</p><p>「一個以上相連接的行句組成」這句話其實暗示了 Markdown 允許段落內的強迫斷行，這個特性和其他大部分的 text-to-HTML 格式不一樣（包括 MovableType 的「Convert Line Breaks」選項），其它的格式會把每個斷行都轉成 <code>&lt;br /&gt;</code> 標籤。</p><p>如果你<em>真的</em>想要插入 <code>&lt;br /&gt;</code> 標籤的話，在行尾加上兩個以上的空白，然後按 enter。</p><p>是的，這確實需要花比較多功夫來插入 <code>&lt;br /&gt;</code> ，但是「每個換行都轉換為 <code>&lt;br /&gt;</code>」的方法在 Markdown 中並不適合， Markdown 中 email 式的 <a href="#blockquote">區塊引言</a> 和多段落的 <a href="#list">清單</a> 在使用換行來排版的時候，不但更好用，還更好閱讀。</p><p></p><h3 id="header">標題</h3><p></p><p>Markdown 支援兩種標題的語法，<a href="http://docutils.sourceforge.net/mirror/setext.html" target="_blank" rel="noopener">Setext</a> 和 <a href="http://www.aaronsw.com/2002/atx/" target="_blank" rel="noopener">atx</a> 形式。</p><p>Setext 形式是用底線的形式，利用 <code>=</code> （最高階標題）和 <code>-</code> （第二階標題），例如：</p><pre><code>This is an H1=============This is an H2-------------</code></pre><p>任何數量的 <code>=</code> 和 <code>-</code> 都可以有效果。</p><p>Atx 形式則是在行首插入 1 到 6 個 <code>#</code> ，對應到標題 1 到 6 階，例如：</p><pre><code># This is an H1## This is an H2###### This is an H6</code></pre><p>你可以選擇性地「關閉」atx 樣式的標題，這純粹只是美觀用的，若是覺得這樣看起來比較舒適，你就可以在行尾加上 <code>#</code>，而行尾的 <code>#</code> 數量也不用和開頭一樣（行首的井字數量決定標題的階數）：</p><pre><code># This is an H1 ### This is an H2 ##### This is an H3 ######</code></pre><p></p><h3 id="blockquote">Blockquotes</h3><p></p><p>Markdown 使用 email 形式的區塊引言，如果你很熟悉如何在 email 信件中引言，你就知道怎麼在 Markdown 文件中建立一個區塊引言，那會看起來像是你強迫斷行，然後在每行的最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,&gt; consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.&gt; Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; &gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse&gt; id sem consectetuer libero luctus adipiscing.</code></pre><p>Markdown 也允許你只在整個段落的第一行最前面加上 <code>&gt;</code> ：</p><pre><code>&gt; This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.&gt; Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisseid sem consectetuer libero luctus adipiscing.</code></pre><p>區塊引言可以有階層（例如：引言內的引言），只要根據層數加上不同數量的 <code>&gt;</code> ：</p><pre><code>&gt; This is the first level of quoting.&gt;&gt; &gt; This is nested blockquote.&gt;&gt; Back to the first level.</code></pre><p>引言的區塊內也可以使用其他的 Markdown 語法，包括標題、清單、程式碼區塊等：</p><pre><code>&gt; ## This is a header.&gt; &gt; 1.   This is the first list item.&gt; 2.   This is the second list item.&gt; &gt; Here's some example code:&gt; &gt;     return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何標準的文字編輯器都能簡單地建立 email 樣式的引言，例如 BBEdit ，你可以選取文字後然後從選單中選擇<em>增加引言階層</em>。</p><p></p><h3 id="list">清單</h3><p></p><p>Markdown 支援有序清單和無序清單。</p><p>無序清單使用星號、加號或是減號作為清單標記：</p><pre><code>*   Red*   Green*   Blue</code></pre><p>等同於：</p><pre><code>+   Red+   Green+   Blue</code></pre><p>也等同於：</p><pre><code>-   Red-   Green-   Blue</code></pre><p>有序清單則使用數字接著一個英文句點：</p><pre><code>1.  Bird2.  McHale3.  Parish</code></pre><p>很重要的一點是，你在清單標記上使用的數字並不會影響輸出的 HTML 結果，上面的清單所產生的 HTML 標記為：</p><pre><code>&lt;ol&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;McHale&lt;/li&gt;&lt;li&gt;Parish&lt;/li&gt;&lt;/ol&gt;</code></pre><p>如果你的清單標記寫成：</p><pre><code>1.  Bird1.  McHale1.  Parish</code></pre><p>或甚至是：</p><pre><code>3. Bird1. McHale8. Parish</code></pre><p>你都會得到完全相同的 HTML 輸出。重點在於，你可以讓 Markdown 文件的清單數字和輸出的結果相同，或是你懶一點，你可以完全不用在意數字的正確性。</p><p>如果你使用懶惰的寫法，建議第一個項目最好還是從 1. 開始，因為 Markdown 未來可能會支援有序清單的 start 屬性。</p><p>清單項目標記通常是放在最左邊，但是其實也可以縮排，最多三個空白，項目標記後面則一定要接著至少一個空白或 tab。</p><p>要讓清單看起來更漂亮，你可以把內容用固定的縮排整理好：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.    Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,    viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.    Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>但是如果你很懶，那也不一定需要：</p><pre><code>*   Lorem ipsum dolor sit amet, consectetuer adipiscing elit.Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,viverra nec, fringilla in, laoreet vitae, risus.*   Donec sit amet nisl. Aliquam semper ipsum sit amet velit.Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果清單項目間用空行分開， Markdown 會把項目的內容在輸出時用 <code>&lt;p&gt;</code><br>標籤包起來，舉例來說：</p><pre><code>*   Bird*   Magic</code></pre><p>會被轉換為：</p><pre><code>&lt;ul&gt;&lt;li&gt;Bird&lt;/li&gt;&lt;li&gt;Magic&lt;/li&gt;&lt;/ul&gt;</code></pre><p>但是這個：</p><pre><code>*   Bird*   Magic</code></pre><p>會被轉換為：</p><pre><code>&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bird&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Magic&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</code></pre><p>清單項目可以包含多個段落，每個項目下的段落都必須縮排 4 個空白或是一個 tab ：</p><pre><code>1.  This is a list item with two paragraphs. Lorem ipsum dolor    sit amet, consectetuer adipiscing elit. Aliquam hendrerit    mi posuere lectus.    Vestibulum enim wisi, viverra nec, fringilla in, laoreet    vitae, risus. Donec sit amet nisl. Aliquam semper ipsum    sit amet velit.2.  Suspendisse id sem consectetuer libero luctus adipiscing.</code></pre><p>如果你每行都有縮排，看起來會看好很多，當然，再次地，如果你很懶惰，Markdown 也允許：</p><pre><code>*   This is a list item with two paragraphs.    This is the second paragraph in the list item. You'reonly required to indent the first line. Lorem ipsum dolorsit amet, consectetuer adipiscing elit.*   Another item in the same list.</code></pre><p>如果要在清單項目內放進引言，那 <code>&gt;</code> 就需要縮排：</p><pre><code>*   A list item with a blockquote:    &gt; This is a blockquote    &gt; inside a list item.</code></pre><p>如果要放程式碼區塊的話，該區塊就需要縮排<em>兩次</em>，也就是 8 個空白或是兩個 tab：</p><pre><code>*   A list item with a code block:        &lt;code goes here&gt;</code></pre><p>當然，項目清單很可能會不小心產生，像是下面這樣的寫法：</p><pre><code>1986. What a great season.</code></pre><p>換句話說，也就是在行首出現<em>數字-句點-空白</em>，要避免這樣的狀況，你可以在句點前面加上反斜線。</p><pre><code>1986\. What a great season.</code></pre><p></p><h3 id="precode">程式碼區塊</h3><p></p><p>和程式相關的寫作或是標籤語言原始碼通常會有已經排版好的程式碼區塊，通常這些區塊我們並不希望它以一般段落文件的方式去排版，而是照原來的樣子顯示，Markdown 會用 <code>&lt;pre&gt;</code> 和 <code>&lt;code&gt;</code> 標籤來把程式碼區塊包起來。</p><p>要在 Markdown 中建立程式碼區塊很簡單，只要簡單地縮排 4 個空白或是 1 個 tab 就可以，例如，下面的輸入：</p><pre><code>This is a normal paragraph:    This is a code block.</code></pre><p>Markdown 會轉換成：</p><pre><code>&lt;p&gt;This is a normal paragraph:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;This is a code block.&lt;/code&gt;&lt;/pre&gt;</code></pre><p>這個每行一階的縮排（4 個空白或是 1 個 tab），都會被移除，例如：</p><pre><code>Here is an example of AppleScript:    tell application &quot;Foo&quot;        beep    end tell</code></pre><p>會被轉換為：</p><pre><code>&lt;p&gt;Here is an example of AppleScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;tell application &quot;Foo&quot;    beepend tell&lt;/code&gt;&lt;/pre&gt;</code></pre><p>一個程式碼區塊會一直持續到沒有縮排的那一行（或是文件結尾）。</p><p>在程式碼區塊裡面， <code>&amp;</code> 、 <code>&lt;</code> 和 <code>&gt;</code> 會自動轉成 HTML 實體，這樣的方式讓你非常容易使用 Markdown 插入範例用的 HTML 原始碼，只需要複製貼上，再加上縮排就可以了，剩下的 Markdown 都會幫你處理，例如：</p><pre><code>    &lt;div class=&quot;footer&quot;&gt;        &amp;copy; 2004 Foo Corporation    &lt;/div&gt;</code></pre><p>會被轉換為：</p><pre><code>&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;footer&quot;&amp;gt;    &amp;amp;copy; 2004 Foo Corporation&amp;lt;/div&amp;gt;&lt;/code&gt;&lt;/pre&gt;</code></pre><p>程式碼區塊中，一般的 Markdown 語法不會被轉換，像是星號便只是星號，這表示你可以很容易地以 Markdown 語法撰寫 Markdown 語法相關的文件。</p><p></p><h3 id="hr">分隔線</h3><p></p><p>你可以在一行中用三個或以上的星號、減號、底線來建立一個分隔線，行內不能有其他東西。你也可以在星號中間插入空白。下面每種寫法都可以建立分隔線：</p><pre><code>* * *********- - ----------------------------------------</code></pre><hr><p></p><h2 id="span">區段元素</h2><p></p><p></p><h3 id="link">連結</h3><p></p><p>Markdown 支援兩種形式的連結語法： <em>行內</em>和<em>參考</em>兩種形式。</p><p>不管是哪一種，連結的文字都是用 [方括號] 來標記。</p><p>要建立一個行內形式的連結，只要在方塊括號後面馬上接著括號並插入網址連結即可，如果你還想要加上連結的 title 文字，只要在網址後面，用雙引號把 title 文字包起來即可，例如：</p><pre><code>This is [an example](http://example.com/ &quot;Title&quot;) inline link.[This link](http://example.net/) has no title attribute.</code></pre><p>會產生：</p><pre><code>&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;an example&lt;/a&gt; inline link.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has notitle attribute.&lt;/p&gt;</code></pre><p>如果你是要連結到同樣主機的資源，你可以使用相對路徑：</p><pre><code>See my [About](/about/) page for details.   </code></pre><p>參考形式的連結使用另外一個方括號接在連結文字的括號後面，而在第二個方括號裡面要填入用以辨識連結的標籤：</p><pre><code>This is [an example][id] reference-style link.</code></pre><p>你也可以選擇性地在兩個方括號中間加上空白：</p><pre><code>This is [an example] [id] reference-style link.</code></pre><p>接著，在文件的任意處，你可以把這個標籤的連結內容定義出來：</p><pre><code>[id]: http://example.com/  &quot;Optional Title Here&quot;</code></pre><p>連結定義的形式為：</p><ul><li>方括號，裡面輸入連結的辨識用標籤</li><li>接著一個冒號</li><li>接著一個以上的空白或 tab</li><li>接著連結的網址</li><li>選擇性地接著 title 內容，可以用單引號、雙引號或是括弧包著</li></ul><p>下面這三種連結的定義都是相同：</p><pre><code>[foo]: http://example.com/  &quot;Optional Title Here&quot;[foo]: http://example.com/  'Optional Title Here'[foo]: http://example.com/  (Optional Title Here)</code></pre><p>**請注意：**有一個已知的問題是 <a href="http://Markdown.pl" target="_blank" rel="noopener">Markdown.pl</a> 1.0.1 會忽略單引號包起來的連結 title。</p><p>連結網址也可以用方括號包起來：</p><pre><code>[id]: &lt;http://example.com/&gt;  &quot;Optional Title Here&quot;</code></pre><p>你也可以把 title 屬性放到下一行，也可以加一些縮排，網址太長的話，這樣會比較好看：</p><pre><code>[id]: http://example.com/longish/path/to/resource/here    &quot;Optional Title Here&quot;</code></pre><p>網址定義只有在產生連結的時候用到，並不會直接出現在文件之中。</p><p>連結辨識標籤可以有字母、數字、空白和標點符號，但是並<em>不</em>區分大小寫，因此下面兩個連結是一樣的：</p><pre><code>[link text][a][link text][A]</code></pre><p><em>預設的連結標籤</em>功能讓你可以省略指定連結標籤，這種情形下，連結標籤和連結文字會視為相同，要用預設連結標籤只要在連結文字後面加上一個空的方括號，如果你要讓 “Google” 連結到 <a href="http://google.com" target="_blank" rel="noopener">google.com</a>，你可以簡化成：</p><pre><code>[Google][]</code></pre><p>然後定義連結內容：</p><pre><code>[Google]: http://google.com/</code></pre><p>由於連結文字可能包含空白，所以這種簡化的標籤內也可以包含多個文字：</p><pre><code>Visit [Daring Fireball][] for more information.</code></pre><p>然後接著定義連結：</p><pre><code>[Daring Fireball]: http://daringfireball.net/</code></pre><p>連結的定義可以放在文件中的任何一個地方，我比較偏好直接放在連結出現段落的後面，你也可以把它放在文件最後面，就像是註解一樣。</p><p>下面是一個參考式連結的範例：</p><pre><code>I get 10 times more traffic from [Google] [1] than from[Yahoo] [2] or [MSN] [3].  [1]: http://google.com/        &quot;Google&quot;  [2]: http://search.yahoo.com/  &quot;Yahoo Search&quot;  [3]: http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>如果改成用連結名稱的方式寫：</p><pre><code>I get 10 times more traffic from [Google][] than from[Yahoo][] or [MSN][].  [google]: http://google.com/        &quot;Google&quot;  [yahoo]:  http://search.yahoo.com/  &quot;Yahoo Search&quot;  [msn]:    http://search.msn.com/    &quot;MSN Search&quot;</code></pre><p>上面兩種寫法都會產生下面的 HTML。</p><pre><code>&lt;p&gt;I get 10 times more traffic from &lt;a href=&quot;http://google.com/&quot;title=&quot;Google&quot;&gt;Google&lt;/a&gt; than from&lt;a href=&quot;http://search.yahoo.com/&quot; title=&quot;Yahoo Search&quot;&gt;Yahoo&lt;/a&gt;or &lt;a href=&quot;http://search.msn.com/&quot; title=&quot;MSN Search&quot;&gt;MSN&lt;/a&gt;.&lt;/p&gt;</code></pre><p>下面是用行內形式寫的同樣一段內容的 Markdown 文件，提供作為比較之用：</p><pre><code>I get 10 times more traffic from [Google](http://google.com/ &quot;Google&quot;)than from [Yahoo](http://search.yahoo.com/ &quot;Yahoo Search&quot;) or[MSN](http://search.msn.com/ &quot;MSN Search&quot;).</code></pre><p>參考式的連結其實重點不在於它比較好寫，而是它比較好讀，比較一下上面的範例，使用參考式的文章本身只有 81 個字元，但是用行內形式的連結卻會增加到 176 個字元，如果是用純 HTML 格式來寫，會有 234 個字元，在 HTML 格式中，標籤比文字還要多。</p><p>使用 Markdown 的參考式連結，可以讓文件更像是瀏覽器最後產生的結果，讓你可以把一些標記相關的資訊移到段落文字之外，你就可以增加連結而不讓文章的閱讀感覺被打斷。</p><p></p><h3 id="em">強調</h3><p></p><p>Markdown 使用星號（<code>*</code>）和底線（<code>_</code>）作為標記強調字詞的符號，被 <code>*</code> 或 <code>_</code> 包圍的字詞會被轉成用 <code>&lt;em&gt;</code> 標籤包圍，用兩個 <code>*</code> 或 <code>_</code> 包起來的話，則會被轉成 <code>&lt;strong&gt;</code>，例如：</p><pre><code>*single asterisks*_single underscores_**double asterisks**__double underscores__</code></pre><p>會轉成：</p><pre><code>&lt;em&gt;single asterisks&lt;/em&gt;&lt;em&gt;single underscores&lt;/em&gt;&lt;strong&gt;double asterisks&lt;/strong&gt;&lt;strong&gt;double underscores&lt;/strong&gt;</code></pre><p>你可以隨便用你喜歡的樣式，唯一的限制是，你用什麼符號開啟標籤，就要用什麼符號結束。</p><p>強調也可以直接插在文字中間：</p><pre><code>un*frigging*believable</code></pre><p>但是如果你的 <code>*</code> 和 <code>_</code> 兩邊都有空白的話，它們就只會被當成普通的符號。</p><p>如果要在文字前後直接插入普通的星號或底線，你可以用反斜線：</p><pre><code>\*this text is surrounded by literal asterisks\*</code></pre><p></p><h3 id="code">程式碼</h3><p></p><p>如果要標記一小段行內程式碼，你可以用反引號把它包起來（<code>`</code>），例如：</p><pre><code>Use the `printf()` function.</code></pre><p>會產生：</p><pre><code>&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;</code></pre><p>如果要在程式碼區段內插入反引號，你可以用多個反引號來開啟和結束程式碼區段：</p><pre><code>``There is a literal backtick (`) here.``</code></pre><p>這段語法會產生：</p><pre><code>&lt;p&gt;&lt;code&gt;There is a literal backtick (`) here.&lt;/code&gt;&lt;/p&gt;</code></pre><p>程式碼區段的起始和結束端都可以放入一個空白，起始端後面一個，結束端前面一個，這樣你就可以在區段的一開始就插入反引號：</p><pre><code>A single backtick in a code span: `` ` ``A backtick-delimited string in a code span: `` `foo` ``</code></pre><p>會產生：</p><pre><code>&lt;p&gt;A single backtick in a code span: &lt;code&gt;`&lt;/code&gt;&lt;/p&gt;&lt;p&gt;A backtick-delimited string in a code span: &lt;code&gt;`foo`&lt;/code&gt;&lt;/p&gt;</code></pre><p>在程式碼區段內，<code>&amp;</code> 和方括號都會被轉成 HTML 實體，這樣會比較容易插入 HTML 原始碼，Markdown 會把下面這段：</p><pre><code>Please don't use any `&lt;blink&gt;` tags.</code></pre><p>轉為：</p><pre><code>&lt;p&gt;Please don't use any &lt;code&gt;&amp;lt;blink&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;</code></pre><p>你也可以這樣寫：</p><pre><code>`&amp;#8212;` is the decimal-encoded equivalent of `&amp;mdash;`.</code></pre><p>以產生：</p><pre><code>&lt;p&gt;&lt;code&gt;&amp;amp;#8212;&lt;/code&gt; is the decimal-encodedequivalent of &lt;code&gt;&amp;amp;mdash;&lt;/code&gt;.&lt;/p&gt;</code></pre><p></p><h3 id="img">圖片</h3><p></p><p>很明顯地，要在純文字應用中設計一個 「自然」的語法來插入圖片是有一定難度的。</p><p>Markdown 使用一種和連結很相似的語法來標記圖片，同樣也允許兩種樣式： <em>行內</em>和<em>參考</em>。</p><p>行內圖片的語法看起來像是：</p><pre><code>![Alt text](/path/to/img.jpg)![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</code></pre><p>詳細敘述如下：</p><ul><li>一個驚嘆號 <code>!</code></li><li>接著一對方括號，裡面放上圖片的替代文字</li><li>接著一對普通括號，裡面放上圖片的網址，最後還可以用引號包住並加上<br>選擇性的 ‘title’ 文字。</li></ul><p>參考式的圖片語法則長得像這樣：</p><pre><code>![Alt text][id]</code></pre><p>「id」是圖片參考的名稱，圖片參考的定義方式則和連結參考一樣：</p><pre><code>[id]: url/to/image  &quot;Optional title attribute&quot;</code></pre><p>到目前為止， Markdown 還沒有辦法指定圖片的寬高，如果你需要的話，你可以使用普通的 <code>&lt;img&gt;</code> 標籤。</p><hr><p></p><h2 id="misc">其它</h2><p></p><p></p><h3 id="autolink">自動連結</h3><p></p><p>Markdown 支援比較簡短的自動連結形式來處理網址和電子郵件信箱，只要是用方括號包起來， Markdown 就會自動把它轉成連結，連結的文字就和連結位置一樣，例如：</p><pre><code>&lt;http://example.com/&gt;</code></pre><p>Markdown 會轉為：</p><pre><code>&lt;a href=&quot;http://example.com/&quot;&gt;http://example.com/&lt;/a&gt;</code></pre><p>自動的郵件連結也很類似，只是 Markdown 會先做一個編碼轉換的過程，把文字字元轉成 16 進位碼的 HTML 實體，這樣的格式可以混淆一些不好的信箱地址收集機器人，例如：</p><pre><code>&lt;address@example.com&gt;</code></pre><p>Markdown 會轉成：</p><pre><code>&lt;a href=&quot;&amp;#x6D;&amp;#x61;i&amp;#x6C;&amp;#x74;&amp;#x6F;:&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&quot;&gt;&amp;#x61;&amp;#x64;&amp;#x64;&amp;#x72;&amp;#x65;&amp;#115;&amp;#115;&amp;#64;&amp;#101;&amp;#120;&amp;#x61;&amp;#109;&amp;#x70;&amp;#x6C;e&amp;#x2E;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;</code></pre><p>在瀏覽器裡面，這段字串會變成一個可以點擊的「address@example.com」連結。</p><p>（這種作法雖然可以混淆不少的機器人，但並無法全部擋下來，不過這樣也比什麼都不做好些。無論如何，公開你的信箱終究會引來廣告信件的。）</p><p></p><h3 id="backslash">跳脫字元</h3><p></p><p>Markdown 可以利用反斜線來插入一些在語法中有其它意義的符號，例如：如果你想要用星號加在文字旁邊的方式來做出強調效果（但不用 <code>&lt;em&gt;</code> 標籤），你可以在星號的前面加上反斜線：</p><pre><code>\*literal asterisks\*</code></pre><p>Markdown 支援在下面這些符號前面加上反斜線來幫助插入普通的符號：</p><pre><code>\   反斜線`   反引號*   星號_   底線{}  大括號[]  方括號()  括號#   井字號+加號-減號.   英文句點!   驚嘆號</code></pre><p></p><h2 id="acknowledgement">感謝</h2><p></p><p>感謝 <a href="https://twitter.com/#!/leafy7382" target="_blank" rel="noopener">leafy7382</a> 協助翻譯，<a href="http://iamhlb.com/" target="_blank" rel="noopener">hlb</a>、<a href="http://twitter.com/randylien" target="_blank" rel="noopener">Randylien</a> 幫忙潤稿，<a href="https://twitter.com/#!/ethantw" target="_blank" rel="noopener">ethantw</a> 的<a href="http://ethantw.net/projects/han/" target="_blank" rel="noopener">漢字標準格式・CSS Reset</a>， <a href="http://kidwm.net/" target="_blank" rel="noopener">WM</a> 回報文字錯誤。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This is Traditional Chinese Edition Document of&lt;br&gt;
Markdown Syntax. If you are seeking for English Edition&lt;br&gt;
Document. Please refer to &lt;a href=&quot;http://daringfireball.net/projects/markdown/syntax&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Markdown: Syntax&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;Markdown: Syntax&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#overview&quot;&gt;概述&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#philosophy&quot;&gt;哲學&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#html&quot;&gt;行內 HTML&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autoescape&quot;&gt;特殊字元自動轉換&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#block&quot;&gt;區塊元素&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#p&quot;&gt;段落和換行&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#header&quot;&gt;標題&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blockquote&quot;&gt;區塊引言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#list&quot;&gt;清單&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#precode&quot;&gt;程式碼區塊&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#hr&quot;&gt;分隔線&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#span&quot;&gt;區段元素&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#link&quot;&gt;連結&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#em&quot;&gt;強調&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#code&quot;&gt;程式碼&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#img&quot;&gt;圖片&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#misc&quot;&gt;其它&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#backslash&quot;&gt;跳脫字元&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#autolink&quot;&gt;自動連結&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#acknowledgement&quot;&gt;感謝&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;**注意：**這份文件是用 Markdown 寫的，你可以&lt;a href=&quot;https://github.com/othree/markdown-syntax-zhtw/blob/master/syntax.md&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;看看它的原始檔&lt;/a&gt; 。&lt;/p&gt;
    
    </summary>
    
    
      <category term="blog" scheme="http://www.limbonova.com/tags/blog/"/>
    
      <category term="markdown" scheme="http://www.limbonova.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>XML数据源的级联ComboBox</title>
    <link href="http://www.limbonova.com/2013/07/cascading-combobox-with-xml-dataprovider/"/>
    <id>http://www.limbonova.com/2013/07/cascading-combobox-with-xml-dataprovider/</id>
    <published>2013-07-12T11:48:33.000Z</published>
    <updated>2018-10-29T08:01:26.772Z</updated>
    
    <content type="html"><![CDATA[<h2>Background</h2><p>要做一个表单，其中自然少不了ComboBox，数据源不是从后台动态获取的，竟然是一个Excel表格文件！这个数据量很大，而且还有可能会修改，所以只能采用外部加载的方式。写一个解析Excel数据的库自然是不现实的，所以决定把Excel转换成XML格式，然后再加载。</p><h2>Excel转换成XML</h2><p>一般直接将Excel是不能导出成XML的，因为“不包含任何XML映射”，所以首先需要建立一个XML映射，其实就是设计一个XML结构，然后将Excel数据映射到对应的节点上。这一步其实很简单，但是颇具技巧性。</p><h3>“开发工具”选项卡</h3><p>导出XML需要“开发工具”功能，一般Excel不会显示这个选项卡，需要打开“文件”-“选项”-“自定义功能区”对话框，勾选“开发工具”。</p><a id="more"></a><p><img src="/images/excel_01.png" alt="开发工具"></p><h3>设计XML结构</h3><p>XML结构根据自己要求设计，多个相同子节点表示可以重复。比如这个：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">province</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dealer</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">address</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">province</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">province</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">city</span> <span class="attr">name</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dealer</span> <span class="attr">name</span>=<span class="string">""</span> <span class="attr">address</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">city</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">province</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h3>导入XML文件</h3><p>回到Excel里，新建一个空白Excel文档，点击“开发工具”里的“源”按钮，在右侧弹出的面板里点击“XML映射”，然后添加之前的XML文件。如果成功右侧面板里会显示XML的树形结构。</p><p><img src="/images/excel_02.png" alt="导入XML文件"></p><h3>映射数据</h3><p>这步更简单，把那个树状结构根节点拖到工作表上，工作表上会显示行以XML节点属性为名称的表头。把数据对应地粘贴到这个表里。</p><p><img src="/images/excel_03.png" alt="映射数据"></p><h3>导出文件</h3><p>点击“源”按钮右边的“导出”，就可以导出XML了。导出后检查下数据映射对不对，如果没问题就算完成了。</p><h2>加载XML数据</h2><p>加载直接用URLLoader就可以。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url:String = xmlUrl;</span><br><span class="line"><span class="keyword">var</span> vars:URLVariables = <span class="keyword">new</span> URLVariables();</span><br><span class="line"><span class="keyword">var</span> request:URLRequest = <span class="keyword">new</span> URLRequest(url);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> loader:URLLoader = <span class="keyword">new</span> URLLoader();</span><br><span class="line">loader.addEventListener(Event.COMPLETE, dealerInfoLoadHandler);</span><br><span class="line">loader.addEventListener(IOErrorEvent.IO_ERROR, loadErrorHandler);</span><br><span class="line">loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, loadErrorHandler);</span><br><span class="line"> </span><br><span class="line">loader.load(request);</span><br></pre></td></tr></table></figure><h2>级联ComboBox</h2><p>由于ActionScript E4X 的处理能力很强，所以利用XML作为数据源是完全可行的。经过几个简单的处理步骤就可以作为数据源提供给ComboBox。代码如下：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  加载XML数据 </span></span><br><span class="line"><span class="comment"> * @param event</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">dealerInfoLoadHandler</span><span class="params">(event:Event)</span>:void </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> loader:URLLoader = event.target <span class="keyword">as</span> URLLoader;</span><br><span class="line">  <span class="keyword">var</span> xml:XML = <span class="keyword">new</span> XML(loader.data);</span><br><span class="line">  <span class="keyword">if</span>(xml) </span><br><span class="line">  &#123;</span><br><span class="line">dealerXML = xml; </span><br><span class="line"><span class="keyword">var</span> arrProv:Array = [];</span><br><span class="line"><span class="keyword">var</span> seen:Object=&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> prov:XMLList = xml.province.@name.(!seen[valueOf()]&amp;amp;&amp;amp;(seen[valueOf()]=<span class="literal">true</span>));</span><br><span class="line">prov.  (</span><br><span class="line">  arrProv.push(toString())</span><br><span class="line">); </span><br><span class="line"> </span><br><span class="line"><span class="keyword">this</span>.provinces = arrProv;</span><br><span class="line">  &#125;</span><br><span class="line">  cbxProv.dataProvider = <span class="keyword">new</span> DataProvider(<span class="keyword">this</span>.provinces);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  省份ComboBox变化处理函数 </span></span><br><span class="line"><span class="comment"> * @param event</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cbxProvChangeHandler</span><span class="params">(event:Event)</span>:void </span>&#123;</span><br><span class="line">  cbxCity.dataProvider.removeAll();          <span class="comment">//清空City DP</span></span><br><span class="line">  <span class="keyword">var</span> seen:Object=&#123;&#125;;    </span><br><span class="line">  <span class="keyword">var</span> provStr:String = cbxProv.selectedItem.data;  </span><br><span class="line">  <span class="keyword">var</span> prov:XMLList = <span class="keyword">this</span>.dealerXML.province.(@name==provStr);  <span class="comment">//根据省份名称从XML检索所有符合条件的城市子节点</span></span><br><span class="line">  <span class="keyword">var</span> city:XMLList = prov.city.@name.(!seen[valueOf()]&amp;amp;&amp;amp;(seen[valueOf()]=<span class="literal">true</span>));  <span class="comment">//过滤重复的城市节点</span></span><br><span class="line">  <span class="keyword">var</span> arrCity:Array = [];</span><br><span class="line">  city. (</span><br><span class="line">arrCity.push(toString())  <span class="comment">//把City数据灌到Array里</span></span><br><span class="line">  ); </span><br><span class="line"> </span><br><span class="line">  cbxCity.dataProvider = <span class="keyword">new</span> DataProvider(arrCity);</span><br><span class="line">  cbxCity.selectedIndex = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">this</span>.cbxCityChangeHandler(event);  <span class="comment">//联动一次cbxCity</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  城市ComboBox变化处理函数 </span></span><br><span class="line"><span class="comment"> * @param event</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span>    </span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">cbxCityChangeHandler</span><span class="params">(event:Event)</span>:void </span>&#123;</span><br><span class="line">  cbxDealer.dataProvider.removeAll();</span><br><span class="line">  <span class="keyword">var</span> cityStr:String = cbxCity.selectedItem.data;</span><br><span class="line">  <span class="keyword">var</span> city:XMLList = <span class="keyword">this</span>.dealerXML..city.(@name==cityStr);</span><br><span class="line">  <span class="keyword">var</span> dealer:XMLList = city.dealer.@name; <span class="comment">//末节点经销商数据不会重复，不需要过滤重复的</span></span><br><span class="line">  <span class="keyword">var</span> arrDealer:Array = [];</span><br><span class="line">  dealer. (</span><br><span class="line">arrDealer.push(toString())</span><br><span class="line">  ); </span><br><span class="line">  cbxDealer.dataProvider = <span class="keyword">new</span> DataProvider(arrDealer);</span><br><span class="line">  cbxDealer.selectedIndex = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>示例</h2><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="swfobj_0" width="400" height="150" align="center">  <param name="movie" value="/images/XMLComboBoxTest.swf">  <param name="align" value="center">  <!--[if !IE]>-->  <object type="application/x-shockwave-flash" data="/images/XMLComboBoxTest.swf" width="400" height="150" align="center">  <!--<![endif]-->  <!--[if !IE]>-->  </object>  <!--<![endif]--></object><h2>总结</h2><p>单纯验证了XML作为级联ComboBox数据源的可行性。如果考虑重用性和稳定性，还有一些工作要做的。不过作为临时想出来的解决方案，也完全满足要求了，还挺有趣味性的。 ;-)</p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://zzfei.com/excel-to-xml" target="_blank" rel="noopener">http://zzfei.com/excel-to-xml</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;Background&lt;/h2&gt;
&lt;p&gt;要做一个表单，其中自然少不了ComboBox，数据源不是从后台动态获取的，竟然是一个Excel表格文件！这个数据量很大，而且还有可能会修改，所以只能采用外部加载的方式。写一个解析Excel数据的库自然是不现实的，所以决定把Excel转换成XML格式，然后再加载。&lt;/p&gt;
&lt;h2&gt;Excel转换成XML&lt;/h2&gt;
&lt;p&gt;一般直接将Excel是不能导出成XML的，因为“不包含任何XML映射”，所以首先需要建立一个XML映射，其实就是设计一个XML结构，然后将Excel数据映射到对应的节点上。这一步其实很简单，但是颇具技巧性。&lt;/p&gt;
&lt;h3&gt;“开发工具”选项卡&lt;/h3&gt;
&lt;p&gt;导出XML需要“开发工具”功能，一般Excel不会显示这个选项卡，需要打开“文件”-“选项”-“自定义功能区”对话框，勾选“开发工具”。&lt;/p&gt;
    
    </summary>
    
    
      <category term="flash" scheme="http://www.limbonova.com/tags/flash/"/>
    
      <category term="actionscript" scheme="http://www.limbonova.com/tags/actionscript/"/>
    
  </entry>
  
  <entry>
    <title>Tour of Taihu Lake Day 3</title>
    <link href="http://www.limbonova.com/2013/06/tour-of-taihu-lake-day-3/"/>
    <id>http://www.limbonova.com/2013/06/tour-of-taihu-lake-day-3/</id>
    <published>2013-06-01T13:15:19.000Z</published>
    <updated>2018-10-29T08:01:26.819Z</updated>
    
    <content type="html"><![CDATA[<h2>概况</h2><p><strong>目标：</strong> 无锡市区 - 苏州园区<br><strong>日期：</strong> 2013年5月27日<br><strong>天气：</strong> 阴转多云<br><strong>路线：</strong> 清宁大桥 → 运河西路 → S230省道 → 舟山路 → 望湖大道 → X204县道（环太湖大道） → 太湖大桥 → 太湖公园 → X206（胥香路） → X206（孙武路） → X206（中山东路） → 苏福路 → 南环路 → 通园路</p><h2>行程</h2><p>晚上和同学聊到一点多，早上醒来已经九点半，他已经去上班了，我便收拾好行李就离开了。去了他昨天介绍的早点店吃早饭，店家比较谦虚，写着一两4只的小笼包，我要了二两，端上来一看，恐怕一只就有一两了。酸辣汤勾芡稠度正好，味道也不错，喝了满满一大碗。可惜没吃到无锡的开洋馄饨，等下次有机会了。</p><p><img src="https://lh3.googleusercontent.com/-JI2hwC_99oE/UayEPItuwaI/AAAAAAAAAMo/ZAyiRgsU0J0/s800/IMGP0782.jpg" alt="Alt text"></p><a id="more"></a><p>原本打算到鼋头渚，蠡湖附近逛一下，但是上午天气也不太好，只好作罢。顺着运河西路一路南下，11：40在S230路口遇到一个从苏州骑车到常州的骑友，小伙子很激动，头盔手套都没戴，手臂上缠着一条快干头巾，临别时我提醒他注意安全，自己遵守交通规则不代表别人也能遵守，只能尽量保护好自己。</p><p><img src="https://lh4.googleusercontent.com/-TM1Vz1j2UKQ/UayEPUE2t-I/AAAAAAAAAMs/q4iS_x8pfzw/s800/IMGP0783.jpg" alt="Alt text"></p><p>11：50 到达G312国道望亭收费站，国道居然还在收费，天朝苛政猛于虎，历经千年不衰。沿S230继续骑行，一路风景乏善可陈，沿舟山路经望湖大道前往太湖边，路过光福风景区，穹窿山，还经过了光福军用机场，这机场就夹在光福风景区和穹窿山中间，噪音震耳欲聋，我开始以为是爆炸声，但声音持续很长，又误以为是采石场。直到看到路边的“军事禁区”的牌子才想起来可能是军用机场，巨大的轰鸣声简直让人精神崩溃，不知道这附近的居民几十年来是怎么生活的。</p><p><img src="https://lh6.googleusercontent.com/-AHi3BLmYRxc/UayEP9UW-TI/AAAAAAAAAM4/c40g-0B7J44/s800/IMGP0786.jpg" alt="Alt text"></p><p>14：00 到达太湖高尔夫附近的环太湖大道，去年参加夜骑活动走过这里，经过太湖会议中心时，正准备到湖边拍几张照片，路边的保安像条恶狗一样嚷道不准带自行车进去，理由很荒诞，我无意与他争辩，便径直向市区前行，经过木渎后，拥挤不堪，道路施工，不知道是修路还是修地铁，一路尘土飞扬，城市争相修地铁不知道意义何在。下午烈日再次当空，无暇顾及其它，只想早点回去，15：20 到达住处。</p><p><strong>里程：</strong> 76.5 千米<br><strong>用时：</strong> 3小时58分</p><h2>总结</h2><p>江浙环湖活动最有意思恐怕就是环太湖了，路况良好，沿途补给方便，难度适中，而且经过的城市较多，沿途风光还是不错的。只是我这次大部分时间都在赶路，就像08年去浙西峡谷徒步旅行一样，再次发扬了当年“赶路要紧”的传统；再者也因为单人骑行，缺少了很多旅途中的乐趣，很多时候只想着达到目的地，再前进，到达再前进……</p><p>本次行程总里程328.2公里, 用时17小时。两天半的时间经历了风雨阴晴，实在奇妙。总体感觉还行，不太累，晒伤的小腿已经开始蜕皮，状况良好。环湖骑行的兴奋在归来之后就已经消失，有时候总是想要证明什么，然而实现了之后发觉也没什么。</p><p>So，what’s the next destination? ;-)</p><p><img src="https://lh5.googleusercontent.com/-zplAsA-k1CI/UayEK9rNkwI/AAAAAAAAALg/THvCSEEmfIw/s800/IMGP0762.jpg" alt="Alt text"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;概况&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目标：&lt;/strong&gt; 无锡市区 - 苏州园区&lt;br&gt;
&lt;strong&gt;日期：&lt;/strong&gt; 2013年5月27日&lt;br&gt;
&lt;strong&gt;天气：&lt;/strong&gt; 阴转多云&lt;br&gt;
&lt;strong&gt;路线：&lt;/strong&gt; 清宁大桥 → 运河西路 → S230省道 → 舟山路 → 望湖大道 → X204县道（环太湖大道） → 太湖大桥 → 太湖公园 → X206（胥香路） → X206（孙武路） → X206（中山东路） → 苏福路 → 南环路 → 通园路&lt;/p&gt;
&lt;h2&gt;行程&lt;/h2&gt;
&lt;p&gt;晚上和同学聊到一点多，早上醒来已经九点半，他已经去上班了，我便收拾好行李就离开了。去了他昨天介绍的早点店吃早饭，店家比较谦虚，写着一两4只的小笼包，我要了二两，端上来一看，恐怕一只就有一两了。酸辣汤勾芡稠度正好，味道也不错，喝了满满一大碗。可惜没吃到无锡的开洋馄饨，等下次有机会了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/-JI2hwC_99oE/UayEPItuwaI/AAAAAAAAAMo/ZAyiRgsU0J0/s800/IMGP0782.jpg&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="biking" scheme="http://www.limbonova.com/tags/biking/"/>
    
      <category term="travel" scheme="http://www.limbonova.com/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>Tour of Taihu Lake: Day 2</title>
    <link href="http://www.limbonova.com/2013/05/tour-of-taihu-lake-day-2/"/>
    <id>http://www.limbonova.com/2013/05/tour-of-taihu-lake-day-2/</id>
    <published>2013-05-31T12:26:35.000Z</published>
    <updated>2018-10-29T08:01:26.818Z</updated>
    
    <content type="html"><![CDATA[<h2>概况</h2><p><strong>目标：</strong> 宜兴丁山 - 无锡市区<br><strong>日期：</strong> 2013年5月26日<br><strong>天气：</strong> 阵雨，大风<br><strong>路线：</strong> 公园东路 → 汤蜀路 → 方溪路 → S230省道 → 分百路 → 环湖线 → 雪马路 → 梅梁路 → 连峰路 → 环山西路 → 龙头渚自然公园 → 七里风光堤 → 环山东路 → 十里明珠堤 → 湖山路（神骏桥） → S230省道（环太湖公路） → 梅园 → 运河西路 → 清宁大桥</p><h2>行程</h2><p>因为密切关注天气情况，知道今天要下雨。七点一刻起床时发现还没有下雨，喜出望外，赶紧吃了早饭收拾好行李。结果没骑200米就下起小雨来，好在车包和背包都有防雨罩。但是我没带雨衣，路上也没找到卖的，只好一路冒雨前行。从丁山龙溪公园出发，一路沿着方溪路向东骑行。逆风又淋雨的滋味真是不好受，但是一旦自己决定开始这段旅程，就不能抱怨这路上的苦。相比昨天，至少今天不用担心烈日造成的高温和晒伤了。大约15分钟后上了S230省道，逆风转为侧风，雨也停了，此时窃喜，觉得今天是最佳的骑行时间，真是太幸福了。</p><p><img src="https://lh4.googleusercontent.com/-bcOmjbf5GZo/UayD-be639I/AAAAAAAAAKM/ARmI3AwmKXs/s800/IMGP0746.jpg" alt="补胎大桥"></p><a id="more"></a><p>沿着S230骑了不到10公里，感觉踩踏居然费力起来，软绵绵的跟前叉调软了一样，心想：“shit，不会是爆胎了吧？” 为了验证自己的猜想，我还耸耸肩，抖了抖身上的肉，感觉更加明显。停下一看，后轮都快瘪了。四次补胎经验之后，技艺似乎也娴熟起来，10分钟把车胎补好，继续上路。S230省道是环太湖的主要公路，路面平整，车道也多，交通状况很好，没料到这路边还有钉子铁皮之类的。上路后暗自庆幸：“还好没下雨，要是下雨这不要命么？” 5分钟之后在大浦镇附近奋力爬上一座大桥，再次看到河口的太湖，不过这一路过来看多了，实在算不上什么景致，只拍了两张照片作为路点标记。正准备蹬起脚踏冲下坡，发现后轮又瘪了。担心桥上危险，推车下桥到路边补胎，天空渐渐下起来雨来，这次更加小心翼翼，用手在外胎里面摸了两三遍，拔出一个绿豆大小的三角铁皮，难怪拍两张照片的功夫气就漏光了。这时雨越下越大，我不敢再有任何庆幸的想法，生怕每次窃喜都成为悲剧的现实。匆忙补完继续上路的时候，已经10：20了，而出发到现在才走了不到20公里。由于这段路邻近太湖但是不在湖边，两边都是田野或者工厂什么的，太湖风光给我的印象只剩下太湖风了，一路风雨兼程，麻木地骑行。</p><p><img src="https://lh6.googleusercontent.com/-WIdOUGUrMyo/UayD-zq2UMI/AAAAAAAAAKY/D85Frm_s5OQ/s800/IMGP0748.jpg" alt="武进太湖度假区"></p><p>11：20左右到分水镇附近时，雨渐渐停了，看到远处山上有个大型雕塑似的东西，当时以为到看到了灵山大巨人。转到分百路准备向马山前进，到最南端龙头渚。11：30路边休息，发现马山这里也有卖杨梅的，不知道甜不甜，昨天在父子岭买的杨梅只吃了一半，剩下的扔了，牙齿都吃酸了，其实我最想喝水啊。沿着路走，不知不觉看到个牌子：“武进太湖湾度假区”，我才知道原来常州也分到了太湖的一杯羹。进入度假区之后，开始了今天真正的沿太湖骑行，只是风实在是太大了，迎面吹来，我完全丧失战斗力，25+的速度立刻降到10左右，像只蜗牛在桥上爬行。上坡虽然累，但至少可以期望下坡时的爽快，逆风不一样，你没什么好期望的。懊恼没用，郁闷也没用，撂挑子更没用，只能埋头继续前行。下午1点到达灵山大佛，补给了2瓶水，抬头瞄了眼大佛，游人还不少，不知道什么时候旅游业勾搭上佛教的，或许是各取所需，所谓的双赢吧。<br><img src="https://lh5.googleusercontent.com/-tBl5Qozrcpc/UayEGDfAuHI/AAAAAAAAAKs/FUcUdnxUL00/s800/IMGP0754.jpg" alt="灵湖码头"><br><img src="https://lh6.googleusercontent.com/-TqVukUWez7s/UayEHJnd9JI/AAAAAAAAAK4/39M8IaXAh9Y/s800/IMGP0757.jpg" alt="七里风光堤" title="七里风光堤"></p><p>万能的Google Maps导航了一条没人走的羊肠小道，直接通向灵湖码头，通往龙头渚的七里风光堤名副其实，这一带算是这次环太湖旅程中最赏心悦目的路段了，丝毫不逊色于苏州的环太湖大道。无奈风大，过一个上坡到达龙头渚时已是13：50了。毫无特色的大院中央是一座用榕树枝干和藤条修剪成的大乌龟，路边立着几栋即将拆除的民宅，多数房子已被夷为平地，散落的砖块堆砌在废墟上，到公园入口，售票员提醒我要买票，门票25块，我问里面大不大,她说还行。我心想你都说还行，那肯定就不大了。但既然大老远来了总不能就这样回去，果断买了票，沿着坑坑洼洼的破柏油路爬过山去。这个公园在半岛的最南端，依太湖堤岸而建，依山傍水，位置极佳，可惜开发较早但又缺乏维护，园子里主要是供儿童玩耍的运动拓展设施，一个茶社，还有一片很大的庭院，树荫下摆满了烧烤架。后来听同学介绍说，这里一般是公司组织烧烤活动的首选地，要是单纯观光就没什么意思了。而且当天风浪很大，沿湖的水上通道被关闭了。没有商店营业，没有工作人员，只有寥寥几个游人，想到还有半天的路要走，索性就在这里吃了点自带的干粮，一块压缩饼干和化成软泥的士力架。</p><p><img src="https://lh3.googleusercontent.com/-5O1vuszfX4Q/UayEIyAjcAI/AAAAAAAAALQ/4ZvzkCmC91k/s800/IMGP0760.jpg" alt="回头是佛"><br><img src="https://lh6.googleusercontent.com/-LW6QUP_oB7c/UayEJ82ezhI/AAAAAAAAALY/M6MtAw_ltFg/s800/IMGP0761.jpg" alt="&amp;quot;龙头渚"><br><img src="https://lh4.googleusercontent.com/--sdMy_8VXio/UayENLZjCPI/AAAAAAAAAME/zw14kUZcCZ4/s800/IMGP0775.jpg" alt="龙头渚一隅"><br><img src="https://lh4.googleusercontent.com/-m10LCRbxERU/UayENqsptlI/AAAAAAAAAMQ/yibLq0pRr9g/s800/IMGP0779.jpg" alt="龙头渚风光"></p><p>原计划从七里风光堤骑到十里明珠堤，但因天气只好选了条近路，迅速切到S230继续赶路。就在湖边的这段路，遭遇了这次行程中最长也是最痛苦的一次逆风上坡，这段S230路线环山沿湖而建，逐渐上坡，湖风迎面吹来，雨水顺势而下，空气里时而夹杂着浑浊腥臭味，时而伴着路边青草味道。我努力不去想前面还有多远，只想尽力踩下每一。到达坡顶时，歇了5分钟，回头看看那坡，有点惊讶。</p><p>过渔港立交，沿S230顺利到达梅园，为和惠山北的同学碰头，沿梁溪路到达运河西路，第一次到无锡市区，没想到京杭运河从南北贯穿无锡市区，而且相当繁忙，运河之上桥的数量让我印象深刻，不到十公里能经过八九座。运河边的道路也非常适合骑行。此时17：19，晚上又走了这段路到清宁大桥附近。</p><p><img src="https://lh6.googleusercontent.com/-RbMsF3jDRd0/UayEN1piORI/AAAAAAAAAMY/YCH3MGu7pY0/s800/IMGP0780.jpg" alt="无锡" title="运河之都，无锡"></p><p>晚上和大学同学去吃饭，互相聊了很多，此君工作甚好，不久前喜得贵子，最近忙装修，幸得老同学帮忙安排食宿，不虚无锡此行，在此感谢二亮同学。值得一提的是，吃好晚饭后各自又吃了半个大西瓜，真佩服我们的胃口，哈哈哈。</p><p>里程：114.86 千米<br>用时：6小时49分</p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;概况&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目标：&lt;/strong&gt; 宜兴丁山 - 无锡市区&lt;br&gt;
&lt;strong&gt;日期：&lt;/strong&gt; 2013年5月26日&lt;br&gt;
&lt;strong&gt;天气：&lt;/strong&gt; 阵雨，大风&lt;br&gt;
&lt;strong&gt;路线：&lt;/strong&gt; 公园东路 → 汤蜀路 → 方溪路 → S230省道 → 分百路 → 环湖线 → 雪马路 → 梅梁路 → 连峰路 → 环山西路 → 龙头渚自然公园 → 七里风光堤 → 环山东路 → 十里明珠堤 → 湖山路（神骏桥） → S230省道（环太湖公路） → 梅园 → 运河西路 → 清宁大桥&lt;/p&gt;
&lt;h2&gt;行程&lt;/h2&gt;
&lt;p&gt;因为密切关注天气情况，知道今天要下雨。七点一刻起床时发现还没有下雨，喜出望外，赶紧吃了早饭收拾好行李。结果没骑200米就下起小雨来，好在车包和背包都有防雨罩。但是我没带雨衣，路上也没找到卖的，只好一路冒雨前行。从丁山龙溪公园出发，一路沿着方溪路向东骑行。逆风又淋雨的滋味真是不好受，但是一旦自己决定开始这段旅程，就不能抱怨这路上的苦。相比昨天，至少今天不用担心烈日造成的高温和晒伤了。大约15分钟后上了S230省道，逆风转为侧风，雨也停了，此时窃喜，觉得今天是最佳的骑行时间，真是太幸福了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://lh4.googleusercontent.com/-bcOmjbf5GZo/UayD-be639I/AAAAAAAAAKM/ARmI3AwmKXs/s800/IMGP0746.jpg&quot; alt=&quot;补胎大桥&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="biking" scheme="http://www.limbonova.com/tags/biking/"/>
    
      <category term="travel" scheme="http://www.limbonova.com/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>Tour of Taihu Lake: Day 1</title>
    <link href="http://www.limbonova.com/2013/05/tour-of-taihu-lake-day-1/"/>
    <id>http://www.limbonova.com/2013/05/tour-of-taihu-lake-day-1/</id>
    <published>2013-05-30T11:53:44.000Z</published>
    <updated>2018-10-29T08:01:26.817Z</updated>
    
    <content type="html"><![CDATA[<h2>概况</h2><p><strong>目标：</strong> 苏州园区 - 宜兴丁山<br><strong>日期：</strong> 2013年5月25日<br><strong>天气：</strong> 晴<br><strong>路线：</strong> 通园路 → 南环高架 → 友新路 → 吴江太湖大桥 → S230省道 → 庙港大桥 →莘七线（沿湖东路） → 莘七线（沿湖西路）→ 莘七线（国富大道）→ 环太湖路 → 滨湖大桥 → 小梅大桥 → 太湖路 → 湖州太湖度假区（太湖乐园） → 滨湖大道 → 夹浦镇（夹浦派出所） → G104国道（发展大道） → 龙溪公园</p><p><strong>装备</strong></p><ul><li>衣：骑行衣裤×2（身上穿1套），头盔×1（装上帽檐），手套×2，袜子×3，骑行雨衣（忘带了，夏天问题不大）；</li><li>食：士力架×2，压缩饼干×2，饮用水×2；</li><li>住：旅馆投宿，只需带基本洗漱用品即可，防晒霜；</li><li>行：单车一辆（这不是废话么），备胎2条，补胎工具，撬胎棒，六角扳手，打气筒，瑞士军刀，骑行背包/驮包，车前包，车管包，码表；</li><li>用：钱包，钥匙，手机，相机，Kindle，备用电池，各种充电器，笔记本，笔，打印好的路书；</li><li>药：创可贴，消炎药，感冒药，清凉油，龙虎人丹。</li></ul><p>** 默念三遍：遵守交通，出入平安 **</p><a id="more"></a><h2>行程</h2><p>由于提前计划好行程，所以今天的旅途还算顺利，早上7：40出发，经南环高架到友新路，前往吴江太湖大桥，沿途遇到两位骑友，幸好随行了一段才走对了路。太湖大桥要从一个岔路口左边的路走，如果不小心就会走错绕弯。经过大桥后的路线变得相当简单，沿着S230省道一路前行就可。为了沿湖骑行，我在到达太浦河大桥之前，从小咸港路，经环河路到莘七线。从庙港大桥一路沿莘七线，这里的湖边多为滩涂，因此2008年设为太湖湿地加以保护。</p><p><img src="https://lh3.googleusercontent.com/-Bes8FJCKZkk/Uax6vuwIsaI/AAAAAAAAAGc/6NUHluxJ2Jc/s800/IMGP0715.jpg" alt="东太湖湿地" title="东太湖湿地"></p><p>骑了不知多久，终于到达江苏浙江地界，可以看到设在路边的里程碑：“太湖环湖大堤（浙江）0+00”。由此进入湖州后，一路沿大堤骑行，今天非常炎热，码表上显示的温度已经超过40度，带着的两根士力架已经融化成牙膏状了。虽然路况很好，但沿途没有店铺人家，补给水是个问题，原计划12点到达滨湖大桥，顺便吃个午饭，但连个滨湖大桥的影子也看不到。</p><p><img src="https://lh4.googleusercontent.com/-TJWvobEPWLI/Uax6weWC3qI/AAAAAAAAAGo/A8jR0s85lw8/s800/IMGP0718.jpg" alt="江苏浙江地界" title="江苏浙江地界"></p><p>正当苦恼无处买水时，发现前方的道路被堵住了，周围也没有别的路，回头更不可能。只好扛着自行车越过把路堵得死死的的土堆。翻过土堆之后，我仿佛回到了艾泽拉斯的贫瘠之地，看到远处有座大桥，喜出望外，以为那就是滨湖大桥，沿着崎岖的土路上桥，发现桥还没建好，桥面的水泥板还没铺，只好从桥下的小路绕行。问路之后终于回到桥那边的路上，此处路况非常之好，一路小幅度下坡，随意蹬踏轻松过30。这里遇到一队逆时针环湖的骑友，一群人有说有笑，相当欢乐，比我单人环湖有意思多了。此时已经12：15，依然不见滨湖大桥。</p><p><img src="https://lh6.googleusercontent.com/-NK84nIjHVc8/Uax60_qa59I/AAAAAAAAAG4/gqzw49Pg39M/s800/IMGP0722.jpg" alt="贫瘠之地"></p><p>强忍着小腿抽筋，继续沿着环太湖路骑行，终于在12：28到达滨湖大桥，约摸过了四十分钟，在路边的小饭店吃午饭，一荤一素：银鱼炒蛋，蚝油生菜，一瓶可乐。银鱼炒蛋味道极其难闻，不知道是银鱼臭还是鸡蛋臭，或者两者都是臭的。吃饭时先后遇到两个老伯，都对单车旅行感兴趣，其中一个说等他退休了也买辆单车到处逛逛，另外一个说跟他一块走，他开车在前面，让我在后面跟着，呵呵，这什么心态？</p><p>13：45，搞定午饭后，补给2瓶水，经过湖州太湖度假区之后，在滨湖大道旁的大堤上骑行，一路沿湖而且路的另一侧是高大的白杨树，完全遮住了阳光，凉爽开阔，算是今天最舒适的路段。湖边的风很大，还好是东风，很庆幸选择了顺时针骑行，一路顺风的感觉真是太好了！然而再后面的路就没那么让人满意了，湖边的骑行道还在建设，经常在有河道的地方戛然而止，这时只好转到旁边的大路上骑行，这还不算大问题，大路上的非机动车道被长兴县的村民用来晒稻子，满满占据整个车道，从划线的位置直到路边全都铺着一层稻谷，相当恼火。</p><p><img src="https://lh6.googleusercontent.com/-qf2XZFo_oNs/Uax62wDK2KI/AAAAAAAAAHE/gjasBYFmsHY/s800/IMGP0728.jpg" alt="月亮酒店" title="湖州月亮酒店"></p><p><img src="https://lh6.googleusercontent.com/-zRy0gI35ScU/Uax63IWJ-kI/AAAAAAAAAHI/4QWFWsp3qBI/s800/IMGP0729.jpg" alt="大堤骑行" title="太湖大堤"></p><p>再次不知不觉，滨湖大道骑到尽头，左转进入夹浦镇，途经路点夹浦派出所，但没见到传说中的“二星宾馆”。在夹浦镇里踏上通往宜兴的G104国道。经过的城镇较多，路况也不尽相同，有些是很老的水泥路，有些是平整的新柏油路，还有些路段散发着诡异的怪味，最让人郁闷的莫过于爬坡的路段了。美丽的风景之后往往要经历几段上坡，好在上坡艰难下坡爽，真是“苦尽甘来”恰到好处的诠释。</p><p><img src="https://lh5.googleusercontent.com/-z4upKpMuVfQ/Uax66Rg_niI/AAAAAAAAAIg/GghAr-wg0BQ/s800/IMGP0738.jpg" alt="G104国道" title="G104国道"></p><p>15：39 达到父子岭附近的浙江-江苏界，终于忍不住路边杨梅的诱惑，翻了几个坡之后，花了10块钱买了一小篮，坐在路边一边吃一边和卖杨梅的大姐聊天。她说这个时段的杨梅还有些酸，因为真正成熟的时间还没到，我倒是觉得还好，酸但比较新鲜爽口，而且酸一点也比较解渴嘛。吃了一半，牙齿受不了了，收起来继续赶路。印象中，以为从父子岭到宜兴丁山不过20公里，但这段路走起来却是比较艰难，阳光比上午更加强烈，体力也明显不如上午，屁股也越来越痛，小腿抽筋的状况还是会出现，所以总体状况差很多，好在路很好认，很快到达龙溪公园附近。</p><p><img src="https://lh6.googleusercontent.com/-UA344yalFnM/Uax67ixL8XI/AAAAAAAAAHw/a-IhMnO2I_E/s800/IMGP0739.jpg" alt="浙江-江苏界" title="浙江-江苏界"></p><p><img src="https://lh3.googleusercontent.com/-dRXpcv-_D-4/Uax68hTQ20I/AAAAAAAAAH4/8JOg5NO8QtI/s800/IMGP0740.jpg" alt="里程碑" title="界边的里程碑总有很多故事"></p><p>17：00，逛了半条街，找了家旅馆住下。旅馆老板经营旅馆的同时，还兼顾丁山人的特色老本行，自家烧制紫砂陶，一楼顺带卖紫砂茶具等陶器。洗完澡小睡片刻，19：30上街吃晚饭，沿街逛了逛，不少人在龙溪公园跳舞，大妈健身舞，交谊舞等各种舞姿，陶都人民的生活真是丰富多彩啊。回来时买了西瓜，非常甜，一口气吃了半个……</p><p>总的来说，勇气可嘉，破了单日骑行记录，今日全程136公里，用时6小时13分，均速22km/h，在随身携带车包，背包等行李情况下，我觉得还算满意的。但洗完澡之后，发现双腿晒伤严重，才想起来今早抹防晒霜只顾着保护胳膊和头部，两腿晒的黑里透红，对比非常明显，像是穿了双丝袜一样，不忍直视……</p><p><img src="https://lh6.googleusercontent.com/-vWlkyaVswc0/UayD-fTYBNI/AAAAAAAAAKI/li8lavlp-k4/s800/IMGP0744.jpg" alt="旅馆的墙" title="旅馆墙上的诗，google之后才知道是特蕾莎修女的名言"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2&gt;概况&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;目标：&lt;/strong&gt; 苏州园区 - 宜兴丁山&lt;br&gt;
&lt;strong&gt;日期：&lt;/strong&gt; 2013年5月25日&lt;br&gt;
&lt;strong&gt;天气：&lt;/strong&gt; 晴&lt;br&gt;
&lt;strong&gt;路线：&lt;/strong&gt; 通园路 → 南环高架 → 友新路 → 吴江太湖大桥 → S230省道 → 庙港大桥 →莘七线（沿湖东路） → 莘七线（沿湖西路）→ 莘七线（国富大道）→ 环太湖路 → 滨湖大桥 → 小梅大桥 → 太湖路 → 湖州太湖度假区（太湖乐园） → 滨湖大道 → 夹浦镇（夹浦派出所） → G104国道（发展大道） → 龙溪公园&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;装备&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;衣：骑行衣裤×2（身上穿1套），头盔×1（装上帽檐），手套×2，袜子×3，骑行雨衣（忘带了，夏天问题不大）；&lt;/li&gt;
&lt;li&gt;食：士力架×2，压缩饼干×2，饮用水×2；&lt;/li&gt;
&lt;li&gt;住：旅馆投宿，只需带基本洗漱用品即可，防晒霜；&lt;/li&gt;
&lt;li&gt;行：单车一辆（这不是废话么），备胎2条，补胎工具，撬胎棒，六角扳手，打气筒，瑞士军刀，骑行背包/驮包，车前包，车管包，码表；&lt;/li&gt;
&lt;li&gt;用：钱包，钥匙，手机，相机，Kindle，备用电池，各种充电器，笔记本，笔，打印好的路书；&lt;/li&gt;
&lt;li&gt;药：创可贴，消炎药，感冒药，清凉油，龙虎人丹。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;** 默念三遍：遵守交通，出入平安 **&lt;/p&gt;
    
    </summary>
    
    
      <category term="biking" scheme="http://www.limbonova.com/tags/biking/"/>
    
      <category term="travel" scheme="http://www.limbonova.com/tags/travel/"/>
    
  </entry>
  
  <entry>
    <title>Ruby on Rails 入门体验</title>
    <link href="http://www.limbonova.com/2013/04/ror-tutorial-review/"/>
    <id>http://www.limbonova.com/2013/04/ror-tutorial-review/</id>
    <published>2013-04-12T04:16:03.000Z</published>
    <updated>2018-10-29T08:01:26.806Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初时决定学习一下 Web 开发方面的知识，因为对 Ruby 早有耳闻，所以很自然地就选择了 Ruby on Rails 作为目标。在网上看到 Ruby on Rails Tutorial的教程，于是就跟着教程，边学边做地把这本书看完了。对 RoR 有了一个大概的了解，包括框架结构和开发流程，还有一些常用的Gems，确实是一本不错的实践入门书。</p><h2>关于教程</h2><p>一开始时看的是英文原版，阅读速度缓慢，而我对实践充满热情，迫切希望早点学完自己动手做。恰好发现 Andor Chen 已经翻译了大部分章节，遇到有疑问的地方，就对照英文检查语句和代码。顺便修正一些译文里的错误，然后发送 pull request 让作者合并。</p><p>这本书和以前看的 Flex 入门书——《Flex 3 权威指南》类似，都是以构建一个应用为主线，由浅入深地介绍 RoR 开发的基本知识，从最开始的静态页面到模型生成，控制器，路由，数据库，Ajax，还有贯彻整个开发过程的测试。教程里开发的是一个微博站点，而 Twitter 以前就是使用 RoR 开发的，做起来也饶有趣味。</p><p>花了差不多两个月的业余时间看完了这个教程，并最终完成了那个微博网站，包括大部分练习题的功能。总的来说，还是有点挑战的。由于书中大部分都是编写步骤，注重手把手的教学实践。在原理的介绍上篇幅很少，而 RoR 这样“约定优于配置”的理念让我有点不适应，书中并无约定方面的解释，很多方法像变戏法一般地已经实现好了，而我却想一探究竟，搞清楚其幕后的动作。但毕竟这是一本入门书，或许是我要求太高了。</p><a id="more"></a><h2>关于Ruby</h2><p>我本人对 Ruby 的理解还不够深刻，对很多特性不熟悉，Rails 框架的原理结构也没有去探究。虽然知道怎么用 Rails 怎么去做，但不懂原理，知其然而不知其所以然，颇有空中楼阁的感觉；另外之前工作中少有机会接触 PHP，Ruby 这类脚本语言开发的 Web 服务器程序，再加上对 JavaScript，jQuery，CSS 等 Web 基础的这类技术，疏于研究，现在来看实在是很不应该的。所以用脚本语言做 Web 开发对我而言比较陌生，但感觉入门并不难，假以时日，结合实际项目边做边学应该可以顺利掌握，毕竟这是 Internet 时代。正如约翰·卡马克所说，这个时代远远不同于他那个时代，现在很多信息都可以通过互联网找到，很多问题也可以通过互联网解决，而不是他开始时那样通过报章杂志，学术期刊。</p><p>对于 Rails，其性能一直是为人诟病的话题，前几天看到 Robbin 写的一篇提倡 去Rails化 的文章，介绍了 Ruby 各 Web 框架和其它技术框架的并发性能测试，Ruby 的性能并不差，但 Rails 并发性能确实不理想。“ruby on rails作为一个full-stack的web开发框架，并不适合用来开发Linkedin和Iron.io的后台web服务，从某种意义上来说，属于rails的时代已经过去了。” “总之Rails适合开发Website，但不太适合Web Service，而移动时代的发展趋势就是：未来服务器端会更多的使用Web Service而不是Website，这也意味着Rails将越来越不适合时代的发展。” 缺点显而易见，但是优点早已众人皆知。因此理性地做好技术选型，合理用好手中的技术才是比较实际的做法。</p><p>我想，下面该做的就是重新学习 Ruby 语言，然后再研究下 JavaScript，CSS 等 Web 基础，接下来再看看 Web 开发方面的框架，Rails，Sinatra，Padrino 或者 研究 PHP/Python 也说不定。</p><hr><p><strong>相关资料</strong></p><ol><li>Ruby on Rails Tutorial - Michael Hartl 英文原版</li><li>Ruby on Rails 中文教程 - Andor Chen 译</li><li>ruby web 框架简单介绍 - Robbin</li><li>Ruby on Rails Tutorial 项目代码</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今年年初时决定学习一下 Web 开发方面的知识，因为对 Ruby 早有耳闻，所以很自然地就选择了 Ruby on Rails 作为目标。在网上看到 Ruby on Rails Tutorial的教程，于是就跟着教程，边学边做地把这本书看完了。对 RoR 有了一个大概的了解，包括框架结构和开发流程，还有一些常用的Gems，确实是一本不错的实践入门书。&lt;/p&gt;
&lt;h2&gt;关于教程&lt;/h2&gt;
&lt;p&gt;一开始时看的是英文原版，阅读速度缓慢，而我对实践充满热情，迫切希望早点学完自己动手做。恰好发现 Andor Chen 已经翻译了大部分章节，遇到有疑问的地方，就对照英文检查语句和代码。顺便修正一些译文里的错误，然后发送 pull request 让作者合并。&lt;/p&gt;
&lt;p&gt;这本书和以前看的 Flex 入门书——《Flex 3 权威指南》类似，都是以构建一个应用为主线，由浅入深地介绍 RoR 开发的基本知识，从最开始的静态页面到模型生成，控制器，路由，数据库，Ajax，还有贯彻整个开发过程的测试。教程里开发的是一个微博站点，而 Twitter 以前就是使用 RoR 开发的，做起来也饶有趣味。&lt;/p&gt;
&lt;p&gt;花了差不多两个月的业余时间看完了这个教程，并最终完成了那个微博网站，包括大部分练习题的功能。总的来说，还是有点挑战的。由于书中大部分都是编写步骤，注重手把手的教学实践。在原理的介绍上篇幅很少，而 RoR 这样“约定优于配置”的理念让我有点不适应，书中并无约定方面的解释，很多方法像变戏法一般地已经实现好了，而我却想一探究竟，搞清楚其幕后的动作。但毕竟这是一本入门书，或许是我要求太高了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="book" scheme="http://www.limbonova.com/tags/book/"/>
    
      <category term="rails" scheme="http://www.limbonova.com/tags/rails/"/>
    
      <category term="ruby" scheme="http://www.limbonova.com/tags/ruby/"/>
    
  </entry>
  
  <entry>
    <title>基于AS3.0的图像抖动实现</title>
    <link href="http://www.limbonova.com/2013/04/image-dithering-algorithm-as3/"/>
    <id>http://www.limbonova.com/2013/04/image-dithering-algorithm-as3/</id>
    <published>2013-04-02T12:21:09.000Z</published>
    <updated>2018-10-29T08:01:26.794Z</updated>
    
    <content type="html"><![CDATA[<p>不知当初自己出于什么目的，OneNote 里留了一条关于 Floyd–Steinberg dithering 的笔记。好奇之余，打开链接看了一下，方才想起这个当初让我觉得新奇的古老算法。</p><h2>概述</h2><p>余忆童稚时，能张目对日，明察秋毫……”如果你对过去黑白报纸的图片仔细观察过的话，一定会发现，那些黑白照片由很多圆形或方形的图形组成。是的，那就是半色调（Halftone）和抖动（Dither ）技术。</p><p><img src="https://c138.wikispaces.com/file/view/ht-mona-bw.gif/30303974/ht-mona-bw.gif" alt="Halftone"></p><p>半色调（Halftone）是指为了模拟出连续调影像（色阶）的视觉感觉，一般用墨点（半色调网点）的大小或频率的改变，来模拟明暗的变化。半色调广泛应用于报刊出版等领域，当年那些黑白出版物上尤其常见，现在的牛奶包装上也能看出来。</p><h2>阈值法（Thresholding）</h2><p>当像素值大于设定阈值时，输出为亮点，否则输出为暗点，从而实现二值化。经过处理的图像往往失去细节，缺乏层次感。下图所示的就是二值化的图像。<br><img src="http://bn1files.storage.live.com/y1pc9sLMhqq1WExNmIq9Qft1bu9Ixxo2xltiiwTy9vscj-inAdrNTw2DA/lena_binary.jpg" alt="lena_binary"></p><a id="more"></a><h2>模式法（patterning）</h2><p>相对阈值法的二值化处理，这种方法使用一个黑白像素矩阵来表示一个像素点，这个矩阵里黑白点不同组合实现该区域的亮度变化，模拟这个像素点的不同灰度值，从而实现图像的灰度显示。</p><p><img src="https://bn1files.storage.live.com/y1p54W1_o4h3FbO4N6q-0FRCZkO_fu2gdIFq6URKFP32b0GU6OH8njTKg/lena_gray.jpg" alt="lena_gray" title="255级灰度图像"></p><p>一个2阶矩阵，有4个点的位置，可能的组合为：4黑，1黑3白，2黑2白，3黑1白，4白。因此可以用来表示5级灰度。当图象中有一片灰度为的1的区域时，有明显的水平和垂直线条。</p><h2>抖动（dithering）</h2><p>patterning 方法虽然可行，但是消耗空间比较大，表示的灰度等级越高，需要的矩阵越大，256级灰度就需要16×16的矩阵空间来表示一个像素点。更坏的情况是，即使使用patternning，依然得不到要求的灰度等级。有没有一种只占用很少空间就可以表示的方法呢？显然有，这个时候抖动算法就派上用场了。</p><h3>误差扩散（Error diffusion）</h3><p>这个过程中用到了误差扩散算法，误差扩散的意思就是让误差扩散， ;-) 就是像素点在色彩深度降低时，产生的时误差扩散到其周围像素上。例如：当一个像素点灰度值为120，如果转换为16级灰度图像，120/16=7.5，取整后为7，误差为0.5，那么这0.5的误差就要按一定的算法规则扩散到其周围像素上。</p><h3>Floyd–Steinberg 抖动算法</h3><p>Floyd–Steinberg 是比较常见的抖动算法，误差扩散的规则用矩阵描述为：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mfrac><mrow><mn>1</mn></mrow><mrow><mn>1</mn><mn>6</mn></mrow></mfrac></mrow><mrow><mo fence="true">[</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>∗</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>7</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>3</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>5</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mn>1</mn></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">{1 \over 16} \begin{bmatrix} &amp;* &amp;7 \\3 &amp;5 &amp;1 \end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.45em;"></span><span class="strut bottom" style="height:2.40003em;vertical-align:-0.95003em;"></span><span class="base"><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span><span class="mord">6</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">∗</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.45em;"><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">7</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9500000000000004em;"></span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span></span></span></span></span></p><p>* 为当前计算的像素点，数字为其周围像素点的误差分配。<br>算法伪码为：</p><pre><code>for each y from top to bottom   for each x from left to right  oldpixel := pixel[x][y]  newpixel := find_closest_palette_color(oldpixel)  pixel[x][y] := newpixel  quant_error := oldpixel - newpixel  pixel[x+1][y] := pixel[x+1][y] + 7/16 * quant_error  pixel[x-1][y+1] := pixel[x-1][y+1] + 3/16 * quant_error  pixel[x][y+1] := pixel[x][y+1] + 5/16 * quant_error  pixel[x+1][y+1] := pixel[x+1][y+1] + 1/16 * quant_error</code></pre><h2>代码实现</h2><p>Ralph Hauwert 很久以前就已经在ActionScript上完整地实现了</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * applyFloydSteinberg(bitmapData:BitmapData, levels:int);</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * Floyd-Steinberg dithering is an image dithering algorithm </span></span><br><span class="line"><span class="comment"> * first published in 1976 by Robert W. Floyd and Louis Steinberg.</span></span><br><span class="line"><span class="comment"> * Using error diffusion, this form of dithering is visually much better then ordered diffusion like Bayer's.</span></span><br><span class="line"><span class="comment"> * R.W. Floyd, L. Steinberg, "An adaptive algorithm for spatial grey scale". </span></span><br><span class="line"><span class="comment"> * Proceedings of the Society of Information Display 17, 75–77 (1976).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">applyFloydSteinberg</span><span class="params">(bitmapData:BitmapData, levels:int)</span> : void </span>&#123;</span><br><span class="line"><span class="keyword">var</span> lNorm:Number = <span class="number">255</span>/levels;</span><br><span class="line"></span><br><span class="line"><span class="comment">//The FS kernel...note the 16th. Optimisation can still be done.</span></span><br><span class="line">  <span class="keyword">var</span> d1:Number = <span class="number">7</span>/<span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> d2:Number = <span class="number">3</span>/<span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> d3:Number = <span class="number">5</span>/<span class="number">16</span>;</span><br><span class="line">  <span class="keyword">var</span> d4:Number = <span class="number">1</span>/<span class="number">16</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">var</span> c:int, nc:int, lc:int;</span><br><span class="line">  <span class="keyword">var</span> r:int,g:int,b:int;</span><br><span class="line">  <span class="keyword">var</span> nr:int, ng:int, nb:int;</span><br><span class="line">  <span class="keyword">var</span> er:int, eg:int, eb:int;</span><br><span class="line">  <span class="keyword">var</span> lr:int, lg:int, lb:int;</span><br><span class="line">  <span class="keyword">var</span> x:int = <span class="number">0</span>, y:int = <span class="number">0</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(y=<span class="number">0</span>; y&lt;bitmapData.height;y++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(x=<span class="number">0</span>; x&lt;=bitmapData.width;x++)&#123;</span><br><span class="line">      <span class="comment">//Retrieve current RGB value.</span></span><br><span class="line">      c = bitmapData.getPixel(x, y);</span><br><span class="line">      r = c &gt;&gt; <span class="number">16</span> &amp;<span class="number">0xFF</span>;</span><br><span class="line">      g = c &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xFF</span>;</span><br><span class="line">      b = c &amp; <span class="number">0xFF</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//Normalize and scale to the number of levels.</span></span><br><span class="line">      <span class="comment">//basically a cheap but suboptimal form of color quantization.</span></span><br><span class="line">      nr = Math.round((r/<span class="number">255</span>) * levels) * lNorm;</span><br><span class="line">      ng = Math.round((g/<span class="number">255</span>) * levels) * lNorm;</span><br><span class="line">      nb = Math.round((b/<span class="number">255</span>) * levels) * lNorm;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//Set the current pixel.</span></span><br><span class="line">      nc = nr&lt;&lt;<span class="number">16</span>|ng&lt;&lt;<span class="number">8</span>|nb;</span><br><span class="line">      bitmapData.setPixel(x, y, nc);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//Quantization error.</span></span><br><span class="line">      er = r-nr;</span><br><span class="line">      eg = g-ng;</span><br><span class="line">      eb = b-nb;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//Apply the kernel.</span></span><br><span class="line">      <span class="comment">//+1,0</span></span><br><span class="line">      lc = bitmapData.getPixel(x+<span class="number">1</span>, y);</span><br><span class="line">      lr = (lc&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xFF</span>) + (d1*er);</span><br><span class="line">      lg = (lc&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xFF</span>) + (d1*eg);</span><br><span class="line">      lb = (lc&amp;<span class="number">0xFF</span>) + (d1*eb);</span><br><span class="line">      <span class="comment">//Clip &amp; Set</span></span><br><span class="line">      lr &lt; <span class="number">0</span> ? lr = <span class="number">0</span>: lr &gt; <span class="number">255</span> ? lr = <span class="number">255</span> : lr;</span><br><span class="line">      lg &lt; <span class="number">0</span> ? lg = <span class="number">0</span>: lg &gt; <span class="number">255</span> ? lg = <span class="number">255</span> : lg;</span><br><span class="line">      lb &lt; <span class="number">0</span> ? lb = <span class="number">0</span>: lb &gt; <span class="number">255</span> ? lb = <span class="number">255</span> : lb;</span><br><span class="line">      bitmapData.setPixel(x+<span class="number">1</span>, y, lr&lt;&lt;<span class="number">16</span> | lg &lt;&lt; <span class="number">8</span> | lb);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//-1,+1</span></span><br><span class="line">      lc = bitmapData.getPixel(x<span class="number">-1</span>, y+<span class="number">1</span>);</span><br><span class="line">      lr = (lc&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xFF</span>) + (d2*er);</span><br><span class="line">      lg = (lc&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xFF</span>) + (d2*eg);</span><br><span class="line">      lb = (lc&amp;<span class="number">0xFF</span>) + (d2*eb);</span><br><span class="line">      <span class="comment">//Clip &amp; Set</span></span><br><span class="line">      lr &lt; <span class="number">0</span> ? lr = <span class="number">0</span>: lr &gt; <span class="number">255</span> ? lr = <span class="number">255</span> : lr;</span><br><span class="line">      lg &lt; <span class="number">0</span> ? lg = <span class="number">0</span>: lg &gt; <span class="number">255</span> ? lg = <span class="number">255</span> : lg;</span><br><span class="line">      lb &lt; <span class="number">0</span> ? lb = <span class="number">0</span>: lb &gt; <span class="number">255</span> ? lb = <span class="number">255</span> : lb;</span><br><span class="line">      bitmapData.setPixel(x<span class="number">-1</span>, y+<span class="number">1</span>, lr&lt;&lt;<span class="number">16</span> | lg&lt;&lt;<span class="number">8</span> | lb);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//0,+1</span></span><br><span class="line">      lc = bitmapData.getPixel(x, y+<span class="number">1</span>);</span><br><span class="line">      lr = (lc&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xFF</span>) + (d3*er);</span><br><span class="line">      lg = (lc&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xFF</span>) + (d3*eg);</span><br><span class="line">      lb = (lc&amp;<span class="number">0xFF</span>) + (d3*eb);</span><br><span class="line">      <span class="comment">//Clip &amp; Set</span></span><br><span class="line">      lr &lt; <span class="number">0</span> ? lr = <span class="number">0</span>: lr &gt; <span class="number">255</span> ? lr = <span class="number">255</span> : lr;</span><br><span class="line">      lg &lt; <span class="number">0</span> ? lg = <span class="number">0</span>: lg &gt; <span class="number">255</span> ? lg = <span class="number">255</span> : lg;</span><br><span class="line">      lb &lt; <span class="number">0</span> ? lb = <span class="number">0</span>: lb &gt; <span class="number">255</span> ? lb = <span class="number">255</span> : lb;</span><br><span class="line">      bitmapData.setPixel(x, y+<span class="number">1</span>, lr&lt;&lt;<span class="number">16</span> | lg&lt;&lt; <span class="number">8</span> | lb);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//+1,+1</span></span><br><span class="line">      lc = bitmapData.getPixel(x+<span class="number">1</span>, y+<span class="number">1</span>);</span><br><span class="line">      lr = (lc&gt;&gt;<span class="number">16</span>&amp;<span class="number">0xFF</span>) + (d4*er);</span><br><span class="line">      lg = (lc&gt;&gt;<span class="number">8</span>&amp;<span class="number">0xFF</span>) + (d4*eg);</span><br><span class="line">      lb = (lc&amp;<span class="number">0xFF</span>) + (d4*eb);</span><br><span class="line">      <span class="comment">//Clip &amp; Set</span></span><br><span class="line">      lr &lt; <span class="number">0</span> ? lr = <span class="number">0</span>: lr &gt; <span class="number">255</span> ? lr = <span class="number">255</span> : lr;</span><br><span class="line">      lg &lt; <span class="number">0</span> ? lg = <span class="number">0</span>: lg &gt; <span class="number">255</span> ? lg = <span class="number">255</span> : lg;</span><br><span class="line">      lb &lt; <span class="number">0</span> ? lb = <span class="number">0</span>: lb &gt; <span class="number">255</span> ? lb = <span class="number">255</span> : lb;</span><br><span class="line">      bitmapData.setPixel(x+<span class="number">1</span>, y+<span class="number">1</span>, lr&lt;&lt;<span class="number">16</span> | lg &lt;&lt; <span class="number">8</span> | lb);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>应用示例</h2><p>Ralph Hauwert demo的基础上做了少量的修改，性能有所改善之外，为方便比较增加了一个保存图像的功能。</p><object classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" id="swfobj_0" width="915" height="682">  <param name="movie" value="/images/ImageDitheringDemoFlex.swf">  <!--[if !IE]>-->  <object type="application/x-shockwave-flash" data="/images/ImageDitheringDemoFlex.swf" width="915" height="682">  <!--<![endif]-->  <!--[if !IE]>-->  </object>  <!--<![endif]--></object><h2>总结</h2><p>半色调抖动算法本身并不复杂，但是实用性非常高，误差扩散的思想值得学习，也很有意思。最近接触了不少关于图像处理方面的算法，大多属于简单实用的类型，另一方面没有系统地学习图像处理，多数是看到有意思的算法，自己研究学习，纯属自娱自乐。关于Demo的优化，实际上也只用到了两句代码：</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bitmapdata.lock();</span><br><span class="line"><span class="comment">// do some pixel manipulation...</span></span><br><span class="line">bitmapdata.unlock();</span><br></pre></td></tr></table></figure>  <p>性能提升明显，差不多提高了一倍。</p><p>Web逐渐步入3D时代，图像处理方面的应用应该也会更加广泛，Web图像处理和Web 3D 还是很有前景的。</p><p>p.s. 示例里测试图是有一段值得一书故事的，下次再说了。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://unitzeroone.com/blog/2008/05/06/opensource-image-dithering-for-as3-demosource/" target="_blank" rel="noopener">http://unitzeroone.com/blog/2008/05/06/opensource-image-dithering-for-as3-demosource/</a></li><li><a href="http://vipbase.net/ipbook/chap04.htm" target="_blank" rel="noopener">http://vipbase.net/ipbook/chap04.htm</a></li><li><a href="http://en.wikipedia.org/wiki/Floyd%E2%80%93Steinberg_dithering" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/Floyd–Steinberg_dithering</a></li><li><a href="https://gzhang1973.wordpress.com/2009/01/24/%E5%8D%8A%E8%89%B2%E8%B0%83%E7%AE%97%E6%B3%95%E7%9A%84%E5%9F%BA%E7%A1%80-%E8%AF%AF%E5%B7%AE%E6%89%A9%E6%95%A3%E6%B3%95/" target="_blank" rel="noopener">https://gzhang1973.wordpress.com/2009/01/24/半色调算法的基础-误差扩散法/</a></li><li><a href="http://www.c-s-a.org.cn/ch/reader/download_pdf.aspx?file_no=19990714&amp;year_id=1999&amp;quarter_id=7&amp;falg=1" target="_blank" rel="noopener">http://www.c-s-a.org.cn/ch/reader/download_pdf.aspx?file_no=19990714&amp;year_id=1999&amp;quarter_id=7&amp;falg=1</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知当初自己出于什么目的，OneNote 里留了一条关于 Floyd–Steinberg dithering 的笔记。好奇之余，打开链接看了一下，方才想起这个当初让我觉得新奇的古老算法。&lt;/p&gt;
&lt;h2&gt;概述&lt;/h2&gt;
&lt;p&gt;余忆童稚时，能张目对日，明察秋毫……”如果你对过去黑白报纸的图片仔细观察过的话，一定会发现，那些黑白照片由很多圆形或方形的图形组成。是的，那就是半色调（Halftone）和抖动（Dither ）技术。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://c138.wikispaces.com/file/view/ht-mona-bw.gif/30303974/ht-mona-bw.gif&quot; alt=&quot;Halftone&quot;&gt;&lt;/p&gt;
&lt;p&gt;半色调（Halftone）是指为了模拟出连续调影像（色阶）的视觉感觉，一般用墨点（半色调网点）的大小或频率的改变，来模拟明暗的变化。半色调广泛应用于报刊出版等领域，当年那些黑白出版物上尤其常见，现在的牛奶包装上也能看出来。&lt;/p&gt;
&lt;h2&gt;阈值法（Thresholding）&lt;/h2&gt;
&lt;p&gt;当像素值大于设定阈值时，输出为亮点，否则输出为暗点，从而实现二值化。经过处理的图像往往失去细节，缺乏层次感。下图所示的就是二值化的图像。&lt;br&gt;
&lt;img src=&quot;http://bn1files.storage.live.com/y1pc9sLMhqq1WExNmIq9Qft1bu9Ixxo2xltiiwTy9vscj-inAdrNTw2DA/lena_binary.jpg&quot; alt=&quot;lena_binary&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="actionscript" scheme="http://www.limbonova.com/tags/actionscript/"/>
    
      <category term="algorithm" scheme="http://www.limbonova.com/tags/algorithm/"/>
    
      <category term="image processing" scheme="http://www.limbonova.com/tags/image-processing/"/>
    
  </entry>
  
  <entry>
    <title>HSV/HSL转换到RGB色彩空间</title>
    <link href="http://www.limbonova.com/2013/03/convert-hsv-hsl-to-rgb/"/>
    <id>http://www.limbonova.com/2013/03/convert-hsv-hsl-to-rgb/</id>
    <published>2013-03-08T10:08:17.000Z</published>
    <updated>2018-10-29T08:01:26.774Z</updated>
    
    <content type="html"><![CDATA[<p>处理图像时，有时候会遇到不同色彩空间转换的情况。比较常见的是HSV/HSL到RGB的转换。</p><h2>HSV(HSB)/HSL简介</h2><p>不同于RGB/CYMK，HSV和HSL是两种比较常见的基于圆柱坐标系的色彩表示方法。这种方法对颜色的表达,对人来说更直观，更易于感受。因此艺术家有时偏好使用 HSL或HSV 而不选择 三原色光模式（即RGB模型） 或 印刷四分色模式（即CMYK模型），因为它类似于人类感觉颜色的方式，具有较强的感知度。RGB 和 CMYK 分别是加法原色和减法原色模型，以原色组合的方式定义颜色，而 HSV 以人类更熟悉的方式封装了关于颜色的信息：“这是什么颜色？深浅如何？明暗如何？”。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Hsl-hsv_models.svg/500px-Hsl-hsv_models.svg.png" alt=""></p><h3>色彩定义</h3><ul><li>H ：Hue(色相)，色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。</li><li>S ：saturation(饱和度)，色彩的纯度，越高色彩越纯，低则逐渐变灰，取0-100%的数值。</li><li>V ：value(色调)，取0-100%。</li><li>B ：brightness(明度)，取0-100%。</li><li>L ：lightness(亮度)，取0-100%。</li></ul><p>HSL 和 HSV 二者都把颜色描述在圆柱坐标系内的点，这个圆柱的中心轴取值为自底部的黑色到顶部的白色而在它们中间是的灰色，绕这个轴的角度对应于“色相”，到这个轴的距离对应于“饱和度”，而沿着这个轴的高度对应于“亮度”，“色调”或“明度”。</p><p>这两种表示在用目的上类似，但在方法上有区别。二者在数学上都是圆柱，但 HSV（色相，饱和度，色调）在概念上可以被认为是颜色的倒圆锥体（黑点在下顶点，白色在上底面圆心），HSL 在概念上表示了一个双圆锥体和圆球体（白色在上顶点，黑色在下顶点，最大横切面的圆心是半程灰色）。注意尽管在 HSL 和 HSV 中“色相”指称相同的性质，它们的“饱和度”的定义是明显不同的。</p><p>因为 HSL 和 HSV 是设备依赖的 RGB 的简单变换，(h, s, l) 或 (h, s, v) 三元组定义的颜色依赖于所使用的特定红色、绿色和蓝色“加法原色”。每个独特的 RGB 设备都伴随着一个独特的 HSL 和 HSV 空间。但是 (h, s, l) 或 (h, s, v) 三元组在被约束于特定 RGB 空间比如 sRGB 的时候就变成明确的了。</p><p>HSV 模型在 1978 年由计算机图形学先驱 Alvy Ray Smith 创立，它是三原色光模式的一种非线性变换。</p><a id="more"></a><h2>HSV -&gt; RGB 转换</h2><h3>公式</h3><p>H ∈ [0°, 360°),  <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>S</mi><mrow><mi>H</mi><mi>S</mi><mi>V</mi></mrow></msub></mrow><annotation encoding="application/x-tex">S_{HSV}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.08125em;">H</span><span class="mord mathit mtight" style="margin-right:0.05764em;">S</span><span class="mord mathit mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span> ∈ [0, 1], V ∈ [0, 1]</p><p>计算公式如下：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>C</mi><mo>=</mo><mi>V</mi><mo>×</mo><msub><mi>S</mi><mrow><mi>H</mi><mi>S</mi><mi>V</mi></mrow></msub></mrow><annotation encoding="application/x-tex">C = V \times S_{HSV} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathit mtight" style="margin-right:0.08125em;">H</span><span class="mord mathit mtight" style="margin-right:0.05764em;">S</span><span class="mord mathit mtight" style="margin-right:0.22222em;">V</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>=</mo><mfrac><mrow><mi>H</mi></mrow><mrow><mn>6</mn><mn>0</mn><mi mathvariant="normal">°</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">H&#x27;=\dfrac {H} {60\degree} </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:1.36033em;"></span><span class="strut bottom" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="base"><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">6</span><span class="mord">0</span><span class="mord">°</span></span></span><span style="top:-3.15em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.2em;"><svg width="400em" height="0.2em" viewbox="0 0 400000 200" preserveaspectratio="xMinYMin slice"><path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"/></svg></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>X</mi><mo>=</mo><mi>C</mi><mo>×</mo><mo>(</mo><mn>1</mn><mo>−</mo><mi mathvariant="normal">∣</mi><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mi>m</mi><mi>o</mi><mi>d</mi><mn>2</mn><mo>−</mo><mn>1</mn><mi mathvariant="normal">∣</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">X = C \times ( 1 - |H&#x27; mod 2 -1| ) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.801892em;"></span><span class="strut bottom" style="height:1.051892em;vertical-align:-0.25em;"></span><span class="base"><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">∣</span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathit">m</span><span class="mord mathit">o</span><span class="mord mathit">d</span><span class="mord">2</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mord">∣</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><msub><mi>R</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>G</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo>)</mo><mo>=</mo><mrow><mo fence="true">{</mo><mtable><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if H is undefined </mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mi>C</mi><mo separator="true">,</mo><mi>X</mi><mo separator="true">,</mo><mn>0</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mn>0</mn><mo>≤</mo><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mn>1</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mi>X</mi><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mn>0</mn><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mn>1</mn><mo>≤</mo><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mn>2</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mi>C</mi><mo separator="true">,</mo><mi>X</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mn>2</mn><mo>≤</mo><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mn>0</mn><mo separator="true">,</mo><mi>X</mi><mo separator="true">,</mo><mi>C</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mn>3</mn><mo>≤</mo><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mn>4</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mi>X</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>C</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mn>4</mn><mo>≤</mo><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mn>5</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>(</mo><mi>C</mi><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mi>X</mi><mo>)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mtext> if </mtext><mn>5</mn><mo>≤</mo><msup><mi>H</mi><mo mathvariant="normal">′</mo></msup><mo>&lt;</mo><mn>6</mn></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">(R_1,G_1,B_1) = \begin{cases}(0,0,0) &amp; \text{ if H is undefined }\\(C,X,0) &amp; \text{ if } 0 \leq H&#x27; &lt; 1 \\(X,C,0) &amp; \text{ if } 1 \leq H&#x27; &lt; 2 \\(0,C,X) &amp; \text{ if } 2 \leq H&#x27; &lt; 3 \\(0,X,C) &amp; \text{ if } 3 \leq H&#x27; &lt; 4 \\(X,0,C) &amp; \text{ if } 4 \leq H&#x27; &lt; 5 \\(C,0,X) &amp; \text{ if } 5 \leq H&#x27; &lt; 6\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:5.290000000000002em;"></span><span class="strut bottom" style="height:10.080000000000002em;vertical-align:-4.790000000000001em;"></span><span class="base"><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.050019999999998em;"><span style="top:0.5000100000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:0.5000100000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:0.20001000000000024em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.09998999999999958em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.3999899999999994em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.6999899999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-0.999989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.299989999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.5999899999999991em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8999899999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1999899999999992em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500099999999995em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.300009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.600009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.900009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.200009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.8000099999999986em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.100009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.400009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-6.700009999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.000009999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-7.300019999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.55002em;"></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.290000000000002em;"><span style="top:-7.290000000000003em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-5.850000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-4.410000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.9700000000000015em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span><span style="top:-1.5300000000000011em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mclose">)</span></span></span><span style="top:1.350000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.07847em;">X</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.790000000000001em;"></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:5.290000000000002em;"><span style="top:-7.290000000000003em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if H is undefined </span></span></span></span><span style="top:-5.850000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord">0</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span></span></span><span style="top:-4.410000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord">1</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">2</span></span></span><span style="top:-2.9700000000000015em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord">2</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span><span style="top:-1.5300000000000011em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord">3</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">4</span></span></span><span style="top:-0.08999999999999997em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord">4</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">5</span></span></span><span style="top:1.350000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord text"><span class="mord"> if </span></span><span class="mord">5</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.08125em;">H</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.790000000000001em;"></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>RGB结果：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo>=</mo><mi>V</mi><mo>−</mo><mi>C</mi></mrow><annotation encoding="application/x-tex">m = V - C </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="base"><span class="mord mathit">m</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mord mathit" style="margin-right:0.22222em;">V</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit" style="margin-right:0.07153em;">C</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>(</mo><mi>R</mi><mo separator="true">,</mo><mi>G</mi><mo separator="true">,</mo><mi>B</mi><mo>)</mo><mo>=</mo><mo>(</mo><msub><mi>R</mi><mn>1</mn></msub><mo>+</mo><mi>m</mi><mo separator="true">,</mo><msub><mi>G</mi><mn>1</mn></msub><mo>+</mo><mi>m</mi><mo separator="true">,</mo><msub><mi>B</mi><mn>1</mn></msub><mo>+</mo><mi>m</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">(R,G,B) = (R_1+m, G_1+m, B_1+m) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.75em;"></span><span class="strut bottom" style="height:1em;vertical-align:-0.25em;"></span><span class="base"><span class="mopen">(</span><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit">G</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="mclose">)</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mord rule" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathit" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit">G</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">m</span><span class="mpunct">,</span><span class="mord rule" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathit" style="margin-right:0.05017em;">B</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"></span></span></span></span></span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mord rule" style="margin-right:0.2222222222222222em;"></span><span class="mord mathit">m</span><span class="mclose">)</span></span></span></span></span></p><h3>代码</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">HSLtoRGB</span><span class="params">(alpha:Number=1,hue:Number=0, saturation:Number=0.5,lightness:Number=1)</span>:uint</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a = Math.max(<span class="number">0</span>,Math.min(<span class="number">1</span>,alpha));</span><br><span class="line">  saturation = Math.max(<span class="number">0</span>,Math.min(<span class="number">1</span>,saturation));</span><br><span class="line">  lightness = Math.max(<span class="number">0</span>,Math.min(<span class="number">1</span>,lightness));</span><br><span class="line">  hue = hue%<span class="number">360</span>;</span><br><span class="line">  <span class="keyword">if</span>(hue&lt;<span class="number">0</span>)</span><br><span class="line">    hue+=<span class="number">360</span>;</span><br><span class="line">  hue/=<span class="number">60</span>;</span><br><span class="line">  <span class="keyword">var</span> C:Number = (<span class="number">1</span>-Math.abs(<span class="number">2</span>*lightness<span class="number">-1</span>))*saturation;</span><br><span class="line">  <span class="keyword">var</span> X:Number = C*(<span class="number">1</span>-Math.abs((hue%<span class="number">2</span>)<span class="number">-1</span>));</span><br><span class="line">  <span class="keyword">var</span> m:Number = lightness<span class="number">-0.5</span>*C;</span><br><span class="line">  C=(C+m)*<span class="number">255</span>;</span><br><span class="line">  X=(X+m)*<span class="number">255</span>;</span><br><span class="line">  m*=<span class="number">255</span>;</span><br><span class="line">  <span class="keyword">if</span>(hue&lt;<span class="number">1</span>) <span class="keyword">return</span> (Math.round(a*<span class="number">255</span>)&lt;&lt;<span class="number">24</span>)+(C&lt;&lt;<span class="number">16</span>)+(X&lt;&lt;<span class="number">8</span>)+m;</span><br><span class="line">  <span class="keyword">if</span>(hue&lt;<span class="number">2</span>) <span class="keyword">return</span> (Math.round(a*<span class="number">255</span>)&lt;&lt;<span class="number">24</span>)+(X&lt;&lt;<span class="number">16</span>)+(C&lt;&lt;<span class="number">8</span>)+m;</span><br><span class="line">  <span class="keyword">if</span>(hue&lt;<span class="number">3</span>) <span class="keyword">return</span> (Math.round(a*<span class="number">255</span>)&lt;&lt;<span class="number">24</span>)+(m&lt;&lt;<span class="number">16</span>)+(C&lt;&lt;<span class="number">8</span>)+X;</span><br><span class="line">  <span class="keyword">if</span>(hue&lt;<span class="number">4</span>) <span class="keyword">return</span> (Math.round(a*<span class="number">255</span>)&lt;&lt;<span class="number">24</span>)+(m&lt;&lt;<span class="number">16</span>)+(X&lt;&lt;<span class="number">8</span>)+C;</span><br><span class="line">  <span class="keyword">if</span>(hue&lt;<span class="number">5</span>) <span class="keyword">return</span> (Math.round(a*<span class="number">255</span>)&lt;&lt;<span class="number">24</span>)+(X&lt;&lt;<span class="number">16</span>)+(m&lt;&lt;<span class="number">8</span>)+C;</span><br><span class="line">  <span class="keyword">return</span> (Math.round(a*<span class="number">255</span>)&lt;&lt;<span class="number">24</span>)+(C&lt;&lt;<span class="number">16</span>)+(m&lt;&lt;<span class="number">8</span>)+X;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2>RGB色彩空间的坐标系</h2><p>这张图比较有意思：<br><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Hsl-and-hsv.svg/500px-Hsl-and-hsv.svg.png" alt="坐标系"></p><h2>总结</h2><p>一开始接触这个有点束手无策，后来从维基百科上看到了HSV/HSL 到 RGB 的转换公式，而且也能搜索到现成的处理函数，但知其然也须知其所以然。大概是因为最初工作的影响，每次组会讨论总会从background开始讲起，循循善诱，娓娓道来，虽然没有学到多少计算机知识，但是态度决定一切，能认识那么多杰出的人才，踏实勤奋的工作作风，严谨求真的科研精神，在那里的一年是恐怕是我人生中最大的收获之一。(扯远了…)</p><p>写这篇blog的同时，还试用了一下 <a href="http://www.mathjax.org" target="_blank" rel="noopener">MathJax </a> 这个插件，顺便学习了下 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mtext>L</mtext><mspace width="-0.36em"></mspace><mpadded voffset="0.20499900000000004em"><mrow><mstyle mathsize="0.7em"><mtext>A</mtext></mstyle></mrow></mpadded><mspace width="-0.15em"></mspace><mrow><mtext>TX</mtext><mspace width="-0.1667em"></mspace><mpadded voffset="-0.5ex"><mrow><mtext>E</mtext></mrow></mpadded><mspace width="-0.125em"></mspace></mrow></mrow></mrow><annotation encoding="application/x-tex">\LaTeX</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.89883em;vertical-align:-0.2155em;"></span><span class="base"><span class="mord text"><span class="mord textrm">L</span><span class="mord rule" style="margin-right:-0.36em;"></span><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.68333em;"><span style="top:-2.904999em;"><span class="pstrut" style="height:2.7em;"></span><span class="mord text"><span class="mord textrm sizing reset-size6 size3">A</span></span></span></span></span></span><span class="mord rule" style="margin-right:-0.15em;"></span><span class="mord text"><span class="mord textrm">T</span><span class="mord rule" style="margin-right:-0.1667em;"></span><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.46782999999999997em;"><span style="top:-2.7845em;"><span class="pstrut" style="height:3em;"></span><span class="mord text"><span class="mord textrm">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2155em;"></span></span></span><span class="mord rule" style="margin-right:-0.125em;"></span><span class="mord textrm">X</span></span></span></span></span></span> 的基本语法，简直是神器，难怪MathJax有很多学术界和出版界的单位赞助。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://en.wikipedia.org/wiki/HSL_and_HSV" target="_blank" rel="noopener">http://en.wikipedia.org/wiki/HSL_and_HSV</a></li><li><a href="http://snipplr.com/view/34817/" target="_blank" rel="noopener">http://snipplr.com/view/34817/</a></li><li><a href="http://blog.wonderwhy-er.com/as3-hsl-to-rgb" target="_blank" rel="noopener">http://blog.wonderwhy-er.com/as3-hsl-to-rgb</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;处理图像时，有时候会遇到不同色彩空间转换的情况。比较常见的是HSV/HSL到RGB的转换。&lt;/p&gt;
&lt;h2&gt;HSV(HSB)/HSL简介&lt;/h2&gt;
&lt;p&gt;不同于RGB/CYMK，HSV和HSL是两种比较常见的基于圆柱坐标系的色彩表示方法。这种方法对颜色的表达,对人来说更直观，更易于感受。因此艺术家有时偏好使用 HSL或HSV 而不选择 三原色光模式（即RGB模型） 或 印刷四分色模式（即CMYK模型），因为它类似于人类感觉颜色的方式，具有较强的感知度。RGB 和 CMYK 分别是加法原色和减法原色模型，以原色组合的方式定义颜色，而 HSV 以人类更熟悉的方式封装了关于颜色的信息：“这是什么颜色？深浅如何？明暗如何？”。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/Hsl-hsv_models.svg/500px-Hsl-hsv_models.svg.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3&gt;色彩定义&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;H ：Hue(色相)，色彩的基本属性，就是平常所说的颜色名称，如红色、黄色等。&lt;/li&gt;
&lt;li&gt;S ：saturation(饱和度)，色彩的纯度，越高色彩越纯，低则逐渐变灰，取0-100%的数值。&lt;/li&gt;
&lt;li&gt;V ：value(色调)，取0-100%。&lt;/li&gt;
&lt;li&gt;B ：brightness(明度)，取0-100%。&lt;/li&gt;
&lt;li&gt;L ：lightness(亮度)，取0-100%。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;HSL 和 HSV 二者都把颜色描述在圆柱坐标系内的点，这个圆柱的中心轴取值为自底部的黑色到顶部的白色而在它们中间是的灰色，绕这个轴的角度对应于“色相”，到这个轴的距离对应于“饱和度”，而沿着这个轴的高度对应于“亮度”，“色调”或“明度”。&lt;/p&gt;
&lt;p&gt;这两种表示在用目的上类似，但在方法上有区别。二者在数学上都是圆柱，但 HSV（色相，饱和度，色调）在概念上可以被认为是颜色的倒圆锥体（黑点在下顶点，白色在上底面圆心），HSL 在概念上表示了一个双圆锥体和圆球体（白色在上顶点，黑色在下顶点，最大横切面的圆心是半程灰色）。注意尽管在 HSL 和 HSV 中“色相”指称相同的性质，它们的“饱和度”的定义是明显不同的。&lt;/p&gt;
&lt;p&gt;因为 HSL 和 HSV 是设备依赖的 RGB 的简单变换，(h, s, l) 或 (h, s, v) 三元组定义的颜色依赖于所使用的特定红色、绿色和蓝色“加法原色”。每个独特的 RGB 设备都伴随着一个独特的 HSL 和 HSV 空间。但是 (h, s, l) 或 (h, s, v) 三元组在被约束于特定 RGB 空间比如 sRGB 的时候就变成明确的了。&lt;/p&gt;
&lt;p&gt;HSV 模型在 1978 年由计算机图形学先驱 Alvy Ray Smith 创立，它是三原色光模式的一种非线性变换。&lt;/p&gt;
    
    </summary>
    
    
      <category term="actionscript" scheme="http://www.limbonova.com/tags/actionscript/"/>
    
      <category term="algorithm" scheme="http://www.limbonova.com/tags/algorithm/"/>
    
      <category term="image processing" scheme="http://www.limbonova.com/tags/image-processing/"/>
    
  </entry>
  
  <entry>
    <title>重元寺骑行</title>
    <link href="http://www.limbonova.com/2013/02/cycling-log-chongyuan-temple/"/>
    <id>http://www.limbonova.com/2013/02/cycling-log-chongyuan-temple/</id>
    <published>2013-02-24T14:19:53.000Z</published>
    <updated>2018-10-29T08:01:26.775Z</updated>
    
    <content type="html"><![CDATA[<p>正月过半，乍暖还寒，然而阳光明媚，正是外出郊游的好时节。苏州是典型的江南水乡，不仅有周庄，甪直，同里千年古镇，水系也颇为发达，湖泊更是星罗棋布。而此时环湖骑行则是再合适不过的好主意了。</p><p>小西湖，是著名的大闸蟹产区——阳澄湖的内湖，隶属阳澄湖半岛度假区。这个度假区还在开发当中，目前主要有重元寺，莲池湖公园，小西湖这几个地方值得一去。湖边有一片很大的草地，绿茵葱葱，非常开阔。在距离市区这么近还有这么一处好地方，这里简直是世外桃源。每逢周末便能看到很多人自驾驱车前往，在草坪上搭帐篷，放风筝，这次还看到航模爱好者在试飞。沿湖修建了环湖自行车道，总长18公里，值得一提的是，还有一段3.5公里的水上赛道，让人一览湖光水色。</p><p><img src="http://bn1files.storage.live.com/y1pxBk3iGmaOs39yRQQ-A40uXJOG0QqfqfeZXSsEaog5xtUE_kr7xos-kskw_qvUDCZIY2tQ0wVb9wH7nC_0fwBqQ/IMGP0248.jpg" alt="野营帐篷"></p><a id="more"></a><p><img src="http://ovihqg.bn1.livefilestore.com/y1pZEarKIafTQdZMRajHbzRjTLBjcH3NAtW9CGsHHXzW2CDj0hG3aTadw_wiVDMp9nYI0uoR1HquJlOvhjfLw3EndRryVGa12KT/IMGP0254.jpg" alt="绿洲"></p><p><img src="http://ovihqg.bn1.livefilestore.com/y1peyWqKIkmwyMAxHwMsvd6gf7-ZbSAm3Ze25HXm-zgB3d51aJic-ErTnUtiIY6mvXQ2WCWyv5vIXLr8OnuHwDR9PZOAbcrOhiJ/IMGP0273.jpg" alt="湖边景色"></p><p><img src="http://ovihqg.bn1.livefilestore.com/y1pnxpZJn8rztzbc5PTJjwuhmStkxWZwCsW6YWZG2SssBNnxrSD3_K9e0mJeTUx6ztcVsJIu9EoDtURyuWGw2OCzw5aWE3o0rcD/IMGP0293.jpg" alt="环湖车道1"></p><p><img src="http://ovihqg.bn1.livefilestore.com/y1pItcdBsqEJuYGv-IKsNST4KrKWdXxonnR4kklP75FG5au8ET2s29uLeNxFNBAxs1iTZeiIIXO-px-smXcHpMCnsbZ4LgKfcVj/IMGP0303.jpg" alt="环湖车道2"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;正月过半，乍暖还寒，然而阳光明媚，正是外出郊游的好时节。苏州是典型的江南水乡，不仅有周庄，甪直，同里千年古镇，水系也颇为发达，湖泊更是星罗棋布。而此时环湖骑行则是再合适不过的好主意了。&lt;/p&gt;
&lt;p&gt;小西湖，是著名的大闸蟹产区——阳澄湖的内湖，隶属阳澄湖半岛度假区。这个度假区还在开发当中，目前主要有重元寺，莲池湖公园，小西湖这几个地方值得一去。湖边有一片很大的草地，绿茵葱葱，非常开阔。在距离市区这么近还有这么一处好地方，这里简直是世外桃源。每逢周末便能看到很多人自驾驱车前往，在草坪上搭帐篷，放风筝，这次还看到航模爱好者在试飞。沿湖修建了环湖自行车道，总长18公里，值得一提的是，还有一段3.5公里的水上赛道，让人一览湖光水色。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://bn1files.storage.live.com/y1pxBk3iGmaOs39yRQQ-A40uXJOG0QqfqfeZXSsEaog5xtUE_kr7xos-kskw_qvUDCZIY2tQ0wVb9wH7nC_0fwBqQ/IMGP0248.jpg&quot; alt=&quot;野营帐篷&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="biking" scheme="http://www.limbonova.com/tags/biking/"/>
    
  </entry>
  
  <entry>
    <title>观潮与弄潮</title>
    <link href="http://www.limbonova.com/2013/02/book-review-on-top-of-tides/"/>
    <id>http://www.limbonova.com/2013/02/book-review-on-top-of-tides/</id>
    <published>2013-02-20T12:00:58.000Z</published>
    <updated>2018-10-29T08:01:26.769Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://img3.doubanio.com/lpic/s6807265.jpg" alt="cover"></p><p>春节期间看完了这本书，收获颇多。一开始看到介绍，我以为这是一本记述IT简史的书，看到后面，越发现远远不止这些。</p><h2>观潮：时代的浪潮</h2><p>IT技术人员，特别是作者这样的计算机科学家，历来对贝尔实验室有着无比的崇敬和向往。故事从贝尔实验室的东家 —— AT&amp;T 公司开始，悉数介绍了 AT&amp;T，IBM，Apple，Intel，Microsoft，Cisco，Yahoo，HP，Motorola，Google 等科技浪潮中各领风骚的著名企业，还有 Sun，Novell，Netscape，RealNetworks 这些“与机会失之交臂的公司”。回顾科技工业一百多年来的发展历程，分析了这些公司成功失败的原因。</p><p>在谈到微软时，吴军描述比尔·盖茨在起家时，包括微软成立后的十几年里，一直惯用冒险的空手套白狼手法抢占先机。当年操作系统领域的专家 Jim Allchin 对微软的技术根本瞧不上，他说，你们微软的东西是最烂的。而盖茨做到了保守和冒险的平衡，打动了 Allchin等一批技术大牛，完成研发上的布局。对于市场的策略则是：薄利多销和来者不拒。这个可以从早期的微软广告中窥见一斑，比如史蒂夫·鲍尔默做的DOS广告等等。</p><p>Cisco，我只知道这是一家卖路由器等网络设备的公司，还参与过GFW这样为虎作伥的项目。没想到思科的历史这么久远，尤其是善待离职创业的员工，以及对其创业公司的扶持和收购，真是十分高明的手法。</p><p>作者形容摩托罗拉是一家贵族式的公司，这个在模拟通信领域的佼佼者，在数字通信时代显得力不从心，依然孤傲地以技术为重心，却眼睁睁地看着木工厂起家的诺基亚超越了自己。在商业竞争中，光有技术显然是不行的。正如作者所言，“从技术角度看，铱星移动通信系统是非常成功的。这是真正的科技精品。我常常想，我们这些被成为高科技公司的互联网公司做到的东西和铱星系统相比，简直就像是玩具。” 君子之泽，五世而斩，虽然贵族式的摩托罗拉被Google收购，即便Google看中的是它若干的通信专利，但是至少它的技术创造依然造福于人。</p><a id="more"></a><h2>弄潮：风投和创业</h2><p>如果这仅仅是本讲讲IT故事的书，它的价值就大打折扣了，作者用了很大的篇幅阐述风险投资与技术创业，以及它们的相互关系。虽然我只是一介山野码农，目前没有创业的想法和准备，但是这大大开阔了我的眼界，让我明白为什么AT&amp;T和朗讯衰落，而Intel稳健前行，为什么Youtube会被Google收购，Facebook如何上市NASDAQ，为何 Instagram 会被 Facebook 以10亿美元的价值收购 ……</p><p>“有两三个辍学的大学生（最好是斯坦福的），有一天在车库里甚至是不经意发明了一个什么东东，马上来了几个（没头没脑的）风投资本家，随手给了他们几百万美元。两年后，这几个年轻人办起的 <a href="http://burnmoney.com" target="_blank" rel="noopener">burnmoney.com</a> 公司就上市了，华尔街欣喜若狂，也不管它有没有盈利，当天就把它的股价炒了三倍，这几个创始人一夜之间成了亿万富翁，跟着他们喝汤的员工们也个个成为了百万富翁。接下来，他们盖起百万千万的豪宅，开上保时捷甚至法拉利的跑车。每个人又甩手给母校盖了栋大楼，于是张三李四王五的大楼就到处都是了。” 作者在书中描述的“硅谷六合彩”（Silicon Valley Lottery），虽说中奖的概率比被汽车撞到的概率小很多，怎么看都像是 Facebook 的发家过程。</p><p>“一个成功的创业公司,首先，创始人很重要。任何梦想家都不足以成事，因为所有的成功者都是实干家；但光有好的团队和技术还远远不够，他们有商业头脑而且必须找到一个能盈利的商业模式（Business Model）；还要有判断力和执行力，通常，办起一个公司并不难，把它从小做到大，并且做到盈利就不容易；真正具备这些条件已经很不容易了，而一个初创公司的成功很大程度上还要看外部环境好不好，最后也还要有运气。” 在思考创业公司成功的因素上讲了很多，我觉得总结成一句话就是 —— “天时·地利·人和”。（这不废话么?）</p><p>一将功成万骨枯，互联网泡沫之后，成功者更是寥寥。而风投和华尔街的资本则是流水，既可载舟，亦可覆舟。风投可以为创业公司指导方向，帮助开展业务。风投是创业公司的朋友和帮手，正如丘吉尔所说：“没有永远的朋友，只有永远的利益”，因为它们的基本利益是一致的。</p><h2>总结</h2><p>“经过我的学习，思考和实践，我认定这样一个规律：科技的发展不是均匀的，而是以浪潮的形式出现。对个人来讲，看清楚浪潮，赶上浪潮，便不枉此生…… 我写这些内容的目的之一是希望帮助更多的人看清科技工业的发展规律，抓住机遇。” 由于看的是Google黑板报版的电子书，因此相比出版的纸质书缺少最后四个章节和一些修订内容，但已经让我学到了不少。相比《黑客和画家》的技术+创业的内容结构，《浪潮之巅》以随笔的方式娓娓道来，回顾了IT产业的发展历史，总结前人的经验教训，前车之鉴。更是让我了解了硅谷的创业环境，硅谷人的精神，还有一直不甚了解的IT创业，风投，上市的过程。这是本值得IT从业人员一读的好书。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://img3.doubanio.com/lpic/s6807265.jpg&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
&lt;p&gt;春节期间看完了这本书，收获颇多。一开始看到介绍，我以为这是一本记述IT简史的书，看到后面，越发现远远不止这些。&lt;/p&gt;
&lt;h2&gt;观潮：时代的浪潮&lt;/h2&gt;
&lt;p&gt;IT技术人员，特别是作者这样的计算机科学家，历来对贝尔实验室有着无比的崇敬和向往。故事从贝尔实验室的东家 —— AT&amp;amp;T 公司开始，悉数介绍了 AT&amp;amp;T，IBM，Apple，Intel，Microsoft，Cisco，Yahoo，HP，Motorola，Google 等科技浪潮中各领风骚的著名企业，还有 Sun，Novell，Netscape，RealNetworks 这些“与机会失之交臂的公司”。回顾科技工业一百多年来的发展历程，分析了这些公司成功失败的原因。&lt;/p&gt;
&lt;p&gt;在谈到微软时，吴军描述比尔·盖茨在起家时，包括微软成立后的十几年里，一直惯用冒险的空手套白狼手法抢占先机。当年操作系统领域的专家 Jim Allchin 对微软的技术根本瞧不上，他说，你们微软的东西是最烂的。而盖茨做到了保守和冒险的平衡，打动了 Allchin等一批技术大牛，完成研发上的布局。对于市场的策略则是：薄利多销和来者不拒。这个可以从早期的微软广告中窥见一斑，比如史蒂夫·鲍尔默做的DOS广告等等。&lt;/p&gt;
&lt;p&gt;Cisco，我只知道这是一家卖路由器等网络设备的公司，还参与过GFW这样为虎作伥的项目。没想到思科的历史这么久远，尤其是善待离职创业的员工，以及对其创业公司的扶持和收购，真是十分高明的手法。&lt;/p&gt;
&lt;p&gt;作者形容摩托罗拉是一家贵族式的公司，这个在模拟通信领域的佼佼者，在数字通信时代显得力不从心，依然孤傲地以技术为重心，却眼睁睁地看着木工厂起家的诺基亚超越了自己。在商业竞争中，光有技术显然是不行的。正如作者所言，“从技术角度看，铱星移动通信系统是非常成功的。这是真正的科技精品。我常常想，我们这些被成为高科技公司的互联网公司做到的东西和铱星系统相比，简直就像是玩具。” 君子之泽，五世而斩，虽然贵族式的摩托罗拉被Google收购，即便Google看中的是它若干的通信专利，但是至少它的技术创造依然造福于人。&lt;/p&gt;
    
    </summary>
    
    
      <category term="book" scheme="http://www.limbonova.com/tags/book/"/>
    
  </entry>
  
  <entry>
    <title>3.7.7内核的nVidia驱动安装</title>
    <link href="http://www.limbonova.com/2013/02/fix-nvidia-driver-on-kernel-3-7-7/"/>
    <id>http://www.limbonova.com/2013/02/fix-nvidia-driver-on-kernel-3-7-7/</id>
    <published>2013-02-17T10:23:39.000Z</published>
    <updated>2018-10-29T08:01:26.779Z</updated>
    
    <content type="html"><![CDATA[<p>更新3.7.7内核之后，nVidia显卡驱动需要重新编译，但是这次和以前不一样，安装时报错导致无法继续。</p><h2>问题分析</h2><p>根据报错的信息，可以打开日志文件查看详细的原因：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">less /var/<span class="built_in">log</span>/nvidia-installer.log</span><br></pre></td></tr></table></figure><p>日志信息如下：</p><blockquote><p>-&gt; Kernel source path: ‘/lib/modules/3.7.7-201.fc18.i686.PAE/source’<br>-&gt; Kernel output path: '/lib/modules/3.7.7-201.fc18.i686.PAE/build’<br>ERROR: If you are using a Linux 2.4 kernel, please make sure<br>you either have configured kernel sources matching your<br>kernel or the correct set of kernel headers installed<br>on your system.</p><p>If you are using a Linux 2.6 kernel, please make sure<br>you have configured kernel sources matching your kernel<br>installed on your system. If you specified a separate<br>output directory using either the “KBUILD_OUTPUT” or<br>the “O” KBUILD parameter, make sure to specify this<br>directory with the SYSOUT environment variable or with<br>the equivalent nvidia-installer command line option.</p><p>Depending on where and how the kernel sources (or the<br>kernel headers) were installed, you may need to specify<br>their location with the SYSSRC environment variable or<br>the equivalent nvidia-installer command line option.<br>ERROR: Installation has failed. Please see the file<br>’/var/log/nvidia-installer.log’ for details. You may find suggestions<br>on fixing installation problems in the README available on the Linux<br>driver download page at <a href="http://www.nvidia.com" target="_blank" rel="noopener">www.nvidia.com</a>.</p></blockquote><p>大概原因是安装脚本无法确认系统版本，因而没有指定KBUILD_OUTPUT之类的参数。</p> <a id="more"></a><h2>解决方案</h2><p>因为需要对驱动的安装脚本作修改，因此需要解压缩安装包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./NVIDIA-Linux-x86-310.19.run -x</span><br></pre></td></tr></table></figure><p>修改文件 <a href="http://contest.sh" target="_blank" rel="noopener">contest.sh</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> NVIDIA-Linux-x86-310.19/</span><br><span class="line">vi kernel/conftest.sh</span><br></pre></td></tr></table></figure> <p>修改:1697行附近的代码，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># kernel older than 2.6.6, that's all we require to</span></span><br><span class="line"><span class="comment"># build the module.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">VERSION=$(grep <span class="string">"^VERSION ="</span> <span class="variable">$MAKEFILE</span> | cut <span class="_">-d</span> <span class="string">" "</span> <span class="_">-f</span> 3)</span><br><span class="line">PATCHLEVEL=$(grep <span class="string">"^PATCHLEVEL ="</span> <span class="variable">$MAKEFILE</span> | cut <span class="_">-d</span> <span class="string">" "</span> <span class="_">-f</span> 3)</span><br><span class="line">SUBLEVEL=$(grep <span class="string">"^SUBLEVEL ="</span> <span class="variable">$MAKEFILE</span> | cut <span class="_">-d</span> <span class="string">" "</span> <span class="_">-f</span> 3)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$VERSION</span>"</span> <span class="_">-a</span> <span class="variable">$VERSION</span> -ge 3 ] || </span><br><span class="line">   [ -n <span class="string">"<span class="variable">$PATCHLEVEL</span>"</span> <span class="_">-a</span> <span class="variable">$PATCHLEVEL</span> -ge 6 </span><br><span class="line"> <span class="_">-a</span> -n <span class="string">"<span class="variable">$SUBLEVEL</span>"</span> <span class="_">-a</span> <span class="variable">$SUBLEVEL</span> -le 5 ]; <span class="keyword">then</span></span><br><span class="line"> SELECTED_MAKEFILE=Makefile.kbuild</span><br><span class="line"> RET=0</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>修改:160行附近的代码，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> [ <span class="string">"<span class="variable">$ARCH</span>"</span> = <span class="string">"i386"</span> -o <span class="string">"<span class="variable">$ARCH</span>"</span> = <span class="string">"x86_64"</span> ]; <span class="keyword">then</span></span><br><span class="line">  CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -I<span class="variable">$SOURCES</span>/arch/x86/include"</span></span><br><span class="line">  CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -I<span class="variable">$SOURCES</span>/arch/x86/include/uapi"</span></span><br><span class="line">  CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -I<span class="variable">$OUTPUT</span>/arch/x86/include/generated"</span></span><br><span class="line">  CFLAGS=<span class="string">"<span class="variable">$CFLAGS</span> -I<span class="variable">$OUTPUT</span>/arch/x86/include/generated/uapi"</span></span><br></pre></td></tr></table></figure>  <p>保存文件并运行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nvidia-installer</span><br></pre></td></tr></table></figure> <p>现在应该可以通过正常安装了。</p><hr><p>参考资料</p><ol><li><a href="https://bugs.archlinux.org/task/33827" target="_blank" rel="noopener">https://bugs.archlinux.org/task/33827</a></li><li><a href="http://forums.fedoraforum.org/showthread.php?t=288869" target="_blank" rel="noopener">http://forums.fedoraforum.org/showthread.php?t=288869</a></li><li><a href="http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/x11-drivers/nvidia-drivers/files/nvidia-drivers-313.18-linux-3.7%2B.patch?revision=1.1" target="_blank" rel="noopener">http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/x11-drivers/nvidia-drivers/files/nvidia-drivers-313.18-linux-3.7%2B.patch?revision=1.1</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;更新3.7.7内核之后，nVidia显卡驱动需要重新编译，但是这次和以前不一样，安装时报错导致无法继续。&lt;/p&gt;
&lt;h2&gt;问题分析&lt;/h2&gt;
&lt;p&gt;根据报错的信息，可以打开日志文件查看详细的原因：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;less /var/&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;/nvidia-installer.log&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;日志信息如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;-&amp;gt; Kernel source path: ‘/lib/modules/3.7.7-201.fc18.i686.PAE/source’&lt;br&gt;
-&amp;gt; Kernel output path: &#39;/lib/modules/3.7.7-201.fc18.i686.PAE/build’&lt;br&gt;
ERROR: If you are using a Linux 2.4 kernel, please make sure&lt;br&gt;
you either have configured kernel sources matching your&lt;br&gt;
kernel or the correct set of kernel headers installed&lt;br&gt;
on your system.&lt;/p&gt;
&lt;p&gt;If you are using a Linux 2.6 kernel, please make sure&lt;br&gt;
you have configured kernel sources matching your kernel&lt;br&gt;
installed on your system. If you specified a separate&lt;br&gt;
output directory using either the “KBUILD_OUTPUT” or&lt;br&gt;
the “O” KBUILD parameter, make sure to specify this&lt;br&gt;
directory with the SYSOUT environment variable or with&lt;br&gt;
the equivalent nvidia-installer command line option.&lt;/p&gt;
&lt;p&gt;Depending on where and how the kernel sources (or the&lt;br&gt;
kernel headers) were installed, you may need to specify&lt;br&gt;
their location with the SYSSRC environment variable or&lt;br&gt;
the equivalent nvidia-installer command line option.&lt;br&gt;
ERROR: Installation has failed. Please see the file&lt;br&gt;
’/var/log/nvidia-installer.log’ for details. You may find suggestions&lt;br&gt;
on fixing installation problems in the README available on the Linux&lt;br&gt;
driver download page at &lt;a href=&quot;http://www.nvidia.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.nvidia.com&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大概原因是安装脚本无法确认系统版本，因而没有指定KBUILD_OUTPUT之类的参数。&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.limbonova.com/tags/linux/"/>
    
      <category term="fedora" scheme="http://www.limbonova.com/tags/fedora/"/>
    
      <category term="nvidia" scheme="http://www.limbonova.com/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>在Fedora上安装nVidia显卡驱动程序</title>
    <link href="http://www.limbonova.com/2013/01/install-nvidia-driver-on-fedora/"/>
    <id>http://www.limbonova.com/2013/01/install-nvidia-driver-on-fedora/</id>
    <published>2013-01-23T17:33:13.000Z</published>
    <updated>2018-10-29T08:01:26.796Z</updated>
    
    <content type="html"><![CDATA[<p>自从Linus骂了nVidia一顿之后，似乎起到了点作用。前不久nVidia还和Steam联手，致力提高Linux下的游戏体验，发布了据说性能提升十分显著的R300驱动，不管是否如此，对桌面用户也是大有裨益的。本文参考了nVidia官方安装文档，结合本人的安装R310.19的经历整理而成。</p><h2>系统需求</h2><h3>软件需求</h3><blockquote><p><em>Software Element</em>  <em>Supported versions</em>    <em>Check With…</em><br>Linux kernel        2.4.22 and newer        cat /proc/version<br>XFree86*            4.0.1 and newer         XFree86 -version<br><a href="http://X.Org" target="_blank" rel="noopener">X.Org</a>*              1.0 - 1.13              Xorg -version<br>Kernel modutils     2.1.121 and newer       insmod --version<br>glibc               2.0                     ls /lib/libc.so.* &gt; 6</p></blockquote><h3>硬件需求</h3><p>当然是你的显卡要在驱动的支持列表内；</p><p>参见 <a href="http://us.download.nvidia.com/XFree86/Linux-x86/310.19/README/supportedchips.html" target="_blank" rel="noopener">Supported NVIDIA GPU Products</a></p><h2>安装步骤</h2><h3>禁用nouveau</h3><h4>blacklist</h4><ol><li>操作前保证有足够的权限，打开文件</li></ol><blockquote><p>vi /etc/modprobe.d/balcklist.conf</p></blockquote><ol start="2"><li>找到 nvidiafb这一行，注释掉</li></ol><blockquote><p>#blacklist nvidiafb</p></blockquote><ol start="3"><li>(可跳过，驱动会自动创建)新建文件 vi /etc/modprobe.d/disable-nouveau.conf,添加以下：</li></ol><blockquote><p>blacklist nouveau<br>options nouveau modeset=0</p></blockquote><a id="more"></a><h4>grub2参数</h4><p>Fedora 18内核已经包含Nouveau，因此必须禁用才能继续安装：</p><ol><li>修改grub默认参数</li></ol><blockquote><p>vi /etc/default/grub</p></blockquote><ol start="2"><li>“GRUB_CMDLINE_LINUX” 末尾添加 nouveau.modeset=0；<br>GRUB_CMDLINE_LINUX=&quot;… nouveau.modeset=0&quot;</li><li>重新生成grub.conf</li></ol><blockquote><p>grub2-mkconfig -o /boot/grub2/grub.cfg</p></blockquote><ol start="4"><li>检查参数是否已经添加</li></ol><blockquote><p>cat /etc/grub2.cfg |grep nouveau.modeset=0</p></blockquote><p>使用上面这种方式的好处是，内核更新了，也会自动添加&quot;nouveau.modeset=0&quot;的启动参数，如果不设置则无法启动Gnome桌面系统。内核升级后也会无法启动Gnome桌面系统，届时只要在grub启动界面，手动设置启动参数，即在上述参数后加 3，进系统后再重新安装驱动即可。</p><h3>开始安装</h3><h4>设置运行级别</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - root</span><br><span class="line">init 3</span><br></pre></td></tr></table></figure><h4>运行安装包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh NVIDIA-Linux-x86-310.19.run</span><br></pre></td></tr></table></figure><p>安装很简单，安装包已经很自动化了，只要按照提示基本没有什么问题。如果提示nouveau正在运行,无法安装，则要重新启动，进入系统后重复开始安装这个步骤。安装过程中会提示是否自动创建屏蔽nouveau的blacklist配置，是否更新X设置，都选是即可。</p><p>安装完毕之后重新启动桌面系统</p><blockquote><p>init 5<br>安装完成！</p></blockquote><h4>.run安装包的其它选项</h4><p>–info</p><blockquote><p>Print embedded info about the .run file and exit.</p></blockquote><p>–check</p><blockquote><p>Check integrity of the archive and exit.</p></blockquote><p>–extract-only</p><blockquote><p>Extract the contents of ./NVIDIA-Linux-x86-310.19.run, but do not run nvidia-installer.</p></blockquote><p>–help</p><blockquote><p>Print usage information for the common commandline options and exit.</p></blockquote><p>–advanced-options</p><blockquote><p>Print usage information for common command line options as well as the advanced options, and then exit.</p></blockquote><h2>总结</h2><p>实际上安装驱动并不是很麻烦，主要是安装前的设置比较繁复，尤其是要在修改grub里的启动参数，Fedora更新太快，内核隔三岔五地更新。一不小心没设置&quot;nouveau.modeset=0&quot;，就启动不了Gnome，还要花时间查找原因，浪费时间和精力。</p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://us.download.nvidia.com/XFree86/Linux-x86/310.19/README/installationandconfiguration.html" target="_blank" rel="noopener">http://us.download.nvidia.com/XFree86/Linux-x86/310.19/README/installationandconfiguration.html</a></li><li><a href="http://fedoraproject.org/wiki/GRUB_2/zh-cn" target="_blank" rel="noopener">http://fedoraproject.org/wiki/GRUB_2/zh-cn</a></li><li><a href="http://us.download.nvidia.com/XFree86/Linux-x86/310.19/README/supportedchips.html" target="_blank" rel="noopener">http://us.download.nvidia.com/XFree86/Linux-x86/310.19/README/supportedchips.html</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从Linus骂了nVidia一顿之后，似乎起到了点作用。前不久nVidia还和Steam联手，致力提高Linux下的游戏体验，发布了据说性能提升十分显著的R300驱动，不管是否如此，对桌面用户也是大有裨益的。本文参考了nVidia官方安装文档，结合本人的安装R310.19的经历整理而成。&lt;/p&gt;
&lt;h2&gt;系统需求&lt;/h2&gt;
&lt;h3&gt;软件需求&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Software Element&lt;/em&gt;  &lt;em&gt;Supported versions&lt;/em&gt;    &lt;em&gt;Check With…&lt;/em&gt;&lt;br&gt;
Linux kernel        2.4.22 and newer        cat /proc/version&lt;br&gt;
XFree86*            4.0.1 and newer         XFree86 -version&lt;br&gt;
&lt;a href=&quot;http://X.Org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;X.Org&lt;/a&gt;*              1.0 - 1.13              Xorg -version&lt;br&gt;
Kernel modutils     2.1.121 and newer       insmod --version&lt;br&gt;
glibc               2.0                     ls /lib/libc.so.* &amp;gt; 6&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;硬件需求&lt;/h3&gt;
&lt;p&gt;当然是你的显卡要在驱动的支持列表内；&lt;/p&gt;
&lt;p&gt;参见 &lt;a href=&quot;http://us.download.nvidia.com/XFree86/Linux-x86/310.19/README/supportedchips.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Supported NVIDIA GPU Products&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;安装步骤&lt;/h2&gt;
&lt;h3&gt;禁用nouveau&lt;/h3&gt;
&lt;h4&gt;blacklist&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;操作前保证有足够的权限，打开文件&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;vi /etc/modprobe.d/balcklist.conf&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;找到 nvidiafb这一行，注释掉&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;#blacklist nvidiafb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;(可跳过，驱动会自动创建)新建文件 vi /etc/modprobe.d/disable-nouveau.conf,添加以下：&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;blacklist nouveau&lt;br&gt;
options nouveau modeset=0&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://www.limbonova.com/tags/linux/"/>
    
      <category term="fedora" scheme="http://www.limbonova.com/tags/fedora/"/>
    
      <category term="nvidia" scheme="http://www.limbonova.com/tags/nvidia/"/>
    
  </entry>
  
  <entry>
    <title>在Fedora上安装Ruby on Rails</title>
    <link href="http://www.limbonova.com/2013/01/install-ruby-on-rails-on-fedora/"/>
    <id>http://www.limbonova.com/2013/01/install-ruby-on-rails-on-fedora/</id>
    <published>2013-01-20T12:20:12.000Z</published>
    <updated>2018-10-29T08:01:26.797Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Practically all the software in the world is either broken or very difficult to use. So users dread software. They’ve been trained that whenever they try to install something, or even fill out a form online, it’s not going to work. I dread installing stuff, and I have a Ph.D. in computer science.<br>Paul Graham, Founders at Work</p></blockquote><p>这几年一直在用AS3.0做开发，已经很久没有接触Linux了。博客上挂着Fedora的倒计时牌子，每次看到新版本倒计时一个接一个地陆续发布，这个周末重新装上了Fedora，学习一些其他的Web开发知识。虽说Ruby on Rails这几年不是很流行了，而且近期Twitter改用java引起了不小的震动，有些人认为RoR过时了,Ruby日薄西山了。我倒是觉得技术人员与其关注这些，不如去专注学习技术。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/9/9c/Ruby_on_Rails_logo.jpg" alt="ror_logo"></p><h2>安装步骤</h2><p>Fedora更新非常快，我用的是目前最新的Fedora 18。虽然按照文档和教程一步一步安装的，但还是遇到了很多问题。安装的方法有很多种，这个和Ruby语言的特性也很相似 😉 。考虑到环境配置和开发工作，使用RVM安装比较好，RVM可以管理多个Ruby版本和RubyGem，在开发时可以根据需要切换版本，配置环境也很方便。使用yum安装ruby，管理比较麻烦，不适合开发工作。</p><h3>安装git和cURL</h3><p>可以考虑先更新所有包</p><blockquote><p>yum update</p></blockquote><p>安装git</p><blockquote><p>yum install git-core</p></blockquote><p>安装curl</p><blockquote><p>yum install curl</p></blockquote><h3>安装RVM</h3><p>RVM，即Ruby Version Manager，可以管理多个版本Ruby，RubyGem，Rails，对开发来说非常有用。</p><blockquote><p>curl -L <a href="http://get.rvm.io" target="_blank" rel="noopener">get.rvm.io</a> | bash -s stable<br>source ~/.rvm/scripts/rvm</p></blockquote><a id="more"></a><p>安装完毕后检查RVM的软件包依赖</p><blockquote><p>rvm requirements</p></blockquote><blockquote><p>输出信息如下：</p><p>Requirements for redhat/18./i386</p><p>NOTE: ‘ruby’ represents Matz’s Ruby Interpreter (MRI) (1.8.X, 1.9.X)<br>This is the <em>original</em> / standard Ruby Language Interpreter<br>’ree’  represents Ruby Enterprise Edition<br>’rbx’  represents Rubinius</p><p>Additional Dependencies:</p><h1>For update-system:</h1><h1>For rvm:</h1><p>sudo yum install bash curl git patch</p><h1>For ruby:</h1><p>sudo yum install gcc-c++ patch readline readline-devel zlib zlib-devel libyaml-devel libffi-devel openssl-devel make bzip2 autoconf automake libtool bison iconv-devel</p><h1>For jruby:</h1><p>sudo yum install java</p></blockquote><h3>安装其它组件</h3><p>这些软件是在运行时可能要用到的，根据需要安装。</p><h4>Javascript运行时</h4><p>访问ExecJS安装可支持的JavaScript运行时，推荐安装Node.js。<br>这里有点麻烦，可以先尝试通过yum查找，名称不一定是nodejs，如果有就安装</p><blockquote><p>yum search <em>nodejs</em><br>yum install nodejs</p></blockquote><p>如果没有，就去找合适的RPM包，或者直接下载源代码编译安装;<br>安装node.js</p><blockquote><p>cd node<br>sudo ./configure<br>sudo make<br>sudo make install</p></blockquote><p>喝杯茶等待安装完毕,检查版本</p><blockquote><p>[anthony@localhost ~]$ node -v<br>v0.9.8-pre</p></blockquote><h4>SQLite等组件</h4><blockquote><p>yum install libxslt-devel libxml2-devel sqlite-devel</p></blockquote><h3>安装Ruby</h3><p>安装了RVM之后，所有Ruby相关的都可以用它来安装配置了。</p><p>安装Ruby</p><blockquote><p>rvm install 1.9.3</p></blockquote><p>如果报错，需要添加参数</p><blockquote><p>rvm install 1.9.3 --with-openssl-dir=$HOME/.rvm/</p></blockquote><p>使用ruby 1.9.3作为默认版本</p><blockquote><p>rvm use 1.9.3 --default</p></blockquote><p>检查ruby版本</p><blockquote><p>ruby -v</p></blockquote><p>更新gems</p><blockquote><p>gem update</p></blockquote><h3>安装Rails</h3><p>安装rails</p><blockquote><p>gem install rails</p></blockquote><p>检查rails版本</p><blockquote><p>rails -v</p></blockquote><p>Rails测试<br>安装完了，接下来可以用rails生成个helloWorld了。</p><blockquote><p>mkdir rails_projects<br>cd rails_projects<br>rails new first_app</p></blockquote><p>开始创建，喝杯茶……</p><blockquote><p>create<br>create  README.rdoc<br>create  Rakefile<br>create  <a href="http://config.ru" target="_blank" rel="noopener">config.ru</a><br>create  .gitignore<br>create  Gemfile<br>create  app<br>create  app/assets/images/rails.png<br>create  app/assets/javascripts/application.js<br>create  app/assets/stylesheets/application.css<br>create  app/controllers/application_controller.rb<br>create  app/helpers/application_helper.rb<br>create  app/views/layouts/application.html.erb<br>create  app/mailers/.gitkeep<br>create  app/models/.gitkeep<br>create  config<br>create  config/routes.rb<br>create  config/application.rb<br>create  config/environment.rb<br>create  config/environments<br>.<br>.<br>.<br>create  vendor/plugins<br>create  vendor/plugins/.gitkeep<br>run  bundle install<br>Fetching gem metadata from <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a>…<br>Fetching gem metadata from <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a>…<br>Using rake (10.0.3)<br>Using i18n (0.6.1)<br>Using multi_json (1.5.0)<br>Using activesupport (3.2.11)<br>Using builder (3.0.4)<br>Using activemodel (3.2.11)<br>Using erubis (2.7.0)<br>Using journey (1.0.4)<br>Using rack (1.4.4)<br>Using rails (3.2.11)<br>Using sass (3.2.5)<br>Using sass-rails (3.2.6)<br>Using sqlite3 (1.3.7)<br>Using uglifier (1.3.0)<br>Your bundle is complete! Use <code>bundle show [gemname]</code> to see where a bundled gem is installed.</p></blockquote><p>创建完毕，启动服务器</p><blockquote><p>cd first_app<br>rails server</p></blockquote><p>好了，打开浏览器，登录 http://localhost:3000看看 🙂</p><h2>总结</h2><p>万事开头难，第一次安装时经常遇到各种问题：ruby安装失败，gem update报错，rails生成报错，启动报错等等。不过总算完成了，接下来的时间里就要去边做边学了。</p><p>另外，我也开始尝试使用Markdown来写文档了，这篇总结就是由Markdown格式转换的。喝水不忘挖井人，最后缅怀一下<a href="http://www.aaronsw.com" target="_blank" rel="noopener">Aaron Swartz</a>。</p><p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/0/06/Aaron_Swartz_profile.jpg/173px-Aaron_Swartz_profile.jpg" alt="Aaron Swartz" title="Aaron Swartz (1986 - 2013)"></p><hr><p><strong>参考资料</strong></p><ol><li><a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book" target="_blank" rel="noopener">http://ruby.railstutorial.org/ruby-on-rails-tutorial-book</a></li><li><a href="http://blog.sudobits.com/2012/05/02/how-to-install-ruby-on-rails-in-ubuntu-12-04-lts/" target="_blank" rel="noopener">http://blog.sudobits.com/2012/05/02/how-to-install-ruby-on-rails-in-ubuntu-12-04-lts/</a></li><li><a href="http://www.evansdiy.com/tips/the+way+to+install+nodejs" target="_blank" rel="noopener">http://www.evansdiy.com/tips/the+way+to+install+nodejs</a></li><li><a href="https://github.com/joyent/node#readme" target="_blank" rel="noopener">https://github.com/joyent/node#readme</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Practically all the software in the world is either broken or very difficult to use. So users dread software. They’ve been trained that whenever they try to install something, or even fill out a form online, it’s not going to work. I dread installing stuff, and I have a Ph.D. in computer science.&lt;br&gt;
Paul Graham, Founders at Work&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这几年一直在用AS3.0做开发，已经很久没有接触Linux了。博客上挂着Fedora的倒计时牌子，每次看到新版本倒计时一个接一个地陆续发布，这个周末重新装上了Fedora，学习一些其他的Web开发知识。虽说Ruby on Rails这几年不是很流行了，而且近期Twitter改用java引起了不小的震动，有些人认为RoR过时了,Ruby日薄西山了。我倒是觉得技术人员与其关注这些，不如去专注学习技术。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/9/9c/Ruby_on_Rails_logo.jpg&quot; alt=&quot;ror_logo&quot;&gt;&lt;/p&gt;
&lt;h2&gt;安装步骤&lt;/h2&gt;
&lt;p&gt;Fedora更新非常快，我用的是目前最新的Fedora 18。虽然按照文档和教程一步一步安装的，但还是遇到了很多问题。安装的方法有很多种，这个和Ruby语言的特性也很相似 😉 。考虑到环境配置和开发工作，使用RVM安装比较好，RVM可以管理多个Ruby版本和RubyGem，在开发时可以根据需要切换版本，配置环境也很方便。使用yum安装ruby，管理比较麻烦，不适合开发工作。&lt;/p&gt;
&lt;h3&gt;安装git和cURL&lt;/h3&gt;
&lt;p&gt;可以考虑先更新所有包&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;yum update&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装git&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install git-core&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装curl&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install curl&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;安装RVM&lt;/h3&gt;
&lt;p&gt;RVM，即Ruby Version Manager，可以管理多个版本Ruby，RubyGem，Rails，对开发来说非常有用。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;curl -L &lt;a href=&quot;http://get.rvm.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;get.rvm.io&lt;/a&gt; | bash -s stable&lt;br&gt;
source ~/.rvm/scripts/rvm&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="fedora" scheme="http://www.limbonova.com/tags/fedora/"/>
    
      <category term="rails" scheme="http://www.limbonova.com/tags/rails/"/>
    
  </entry>
  
</feed>
