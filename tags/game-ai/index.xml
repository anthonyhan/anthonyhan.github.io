<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>game ai on LimboNova</title>
    <link>/tags/game-ai/</link>
    <description>Recent content in game ai on LimboNova</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>© Anthony</copyright>
    <lastBuildDate>Sun, 18 Feb 2024 22:24:57 +0800</lastBuildDate>
    <atom:link href="/tags/game-ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>面向数据的行为树（5）：行为树结构剖析</title>
      <link>/posts/data-oriented-bt-series-5-behavior-tree-entrails/</link>
      <pubDate>Sun, 18 Feb 2024 22:24:57 +0800</pubDate>
      <guid>/posts/data-oriented-bt-series-5-behavior-tree-entrails/</guid>
      <description>&lt;p&gt;这篇文章是 Bjoern Knafla 撰写的系列文章《面向数据的行为树（Data-oriented Behavior Tree Series）》 第5篇。文章原载于AltDevBlogADay，AltDevBlogADay 是一个技术文集，主要由游戏业界老兵们于2011-2014年撰写。原站已经关闭，即使时隔多年，很多文章仍值得一看。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系列文章目录&#34;&gt;系列文章目录&lt;/h2&gt;&#xA;&lt;p&gt;《面向数据的行为树》系列文章介绍了作者在面向数据的行为树设计过程中的思考和探索，以下是系列文章的目录：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;面向数据的行为树（1）：行为树入门&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（2）：震惊！面向对象行为树并不面向数据&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（3）：数据导向流催生的行为树&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（4）：面向数据的行为树概述&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（5）：行为树结构剖析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;今天我们来看看行为树运行时实现的主要数据结构，以及在行为树更新期间它们是如何相互作用的。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/data-oriented-bt-entrails/treebeard.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向数据的行为树（4）：面向数据的行为树概述</title>
      <link>/posts/data-oriented-bt-series-4-data-oriented-behavior-tree-overview/</link>
      <pubDate>Sat, 03 Feb 2024 12:14:47 +0800</pubDate>
      <guid>/posts/data-oriented-bt-series-4-data-oriented-behavior-tree-overview/</guid>
      <description>&lt;p&gt;这篇文章是 Bjoern Knafla 撰写的系列文章《面向数据的行为树（Data-oriented Behavior Tree Series）》 第4篇。文章原载于AltDevBlogADay，AltDevBlogADay 是一个技术文集，主要由游戏业界老兵们于2011-2014年撰写。原站已经关闭，即使时隔多年，很多文章仍值得一看。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系列文章目录&#34;&gt;系列文章目录&lt;/h2&gt;&#xA;&lt;p&gt;《面向数据的行为树》系列文章介绍了作者在面向数据的行为树设计过程中的思考和探索，以下是系列文章的目录：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;面向数据的行为树（1）：行为树入门&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（2）：震惊！面向对象行为树并不面向数据&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（3）：数据导向流催生的行为树&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（4）：面向数据的行为树概述&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（5）：行为树结构剖析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;上一篇关于面向数据行为树的文章对许多人来说太长，很难找到足够的时间完整阅读。我自己也会有困难抽出足够时间和精力完全消化它。因此，剥离面向数据设计的诸多实践内容后，这篇文章就是上篇文章的高层次概述。&lt;/p&gt;&#xA;&lt;h2 id=&#34;动机&#34;&gt;动机&lt;/h2&gt;&#xA;&lt;p&gt;目前和未来硬件中，相比计算机在寄存器中的数据计算，内存访问和数据移动具有更高的成本（能量和时钟周期）。到主内存的内存带宽是有限的。测量以处理器周期为单位，内存访问速度和计算性能之间的差距是一个令人恐惧的鸿沟（夸张的说法）。缓存未命中和/或从主内存而不是 CPU 缓存获取数据的必要性是计算的瓶颈，并且可能窃取运行在其他核心上的计算任务的内存带宽。&lt;/p&gt;&#xA;&lt;p&gt;依赖于节点指向其他节点的传统层次结构的行为树（BT）实现，在遍历树时很容易导致许多随机内存访问。每次随机内存访问都是一个潜在的缓存未命中（Cache Miss），这意味着等待数据并浪费时钟周期。&lt;/p&gt;&#xA;&lt;p&gt;另外，如果叶节点调用的动作处理大量的数据，那么会发生更多的缓存未命中——请求的数据到达 CPU 时可能会逐出行为树数据，一旦树遍历继续，则需要从主内存中恢复。&lt;/p&gt;&#xA;&lt;p&gt;虽然许多行为树的使用在性能分析器中不会看到其遍历的影响，但我们想了解并学习如何构建更高效的硬件和更面向数据的行为树，从而使许多实体（Entity）运行大量的行为树，甚至在 PS3 的 SPU 上。&lt;/p&gt;&#xA;&lt;p&gt;在开发过程中，快速迭代和支持游戏 AI 的监控和调试是提高游戏性（玩家体验）的一个重要因素。我希望游戏运行时的行为树支持实时调整，而不是因为行为树变化，需要重新编译，重新启动游戏。&lt;/p&gt;&#xA;&lt;h2 id=&#34;要点概括&#34;&gt;要点概括&lt;/h2&gt;&#xA;&lt;p&gt;为了满足在游戏中快速遍历行为树，以及快速修改和开发期间观察游戏的需求，我们使用两种不同的行为树表示形式，分别用于运行时和开发时。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向数据的行为树（3）：数据导向流催生的行为树</title>
      <link>/posts/data-oriented-bt-series-3-data-oriented-streams-spring-behavior-trees/</link>
      <pubDate>Wed, 10 Jan 2024 19:40:32 +0800</pubDate>
      <guid>/posts/data-oriented-bt-series-3-data-oriented-streams-spring-behavior-trees/</guid>
      <description>&lt;p&gt;这篇文章是 Bjoern Knafla 撰写的系列文章《面向数据的行为树（Data-oriented Behavior Tree Series）》 第3篇。文章原载于AltDevBlogADay，AltDevBlogADay 是一个技术文集，主要由游戏业界老兵们于2011-2014年撰写。原站已经关闭，即使时隔多年，很多文章仍值得一看。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系列文章目录&#34;&gt;系列文章目录&lt;/h2&gt;&#xA;&lt;p&gt;《面向数据的行为树》系列文章介绍了作者在面向数据的行为树设计过程中的思考和探索，以下是系列文章的目录：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;面向数据的行为树（1）：行为树入门&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（2）：震惊！面向对象行为树并不面向数据&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（3）：数据导向流催生的行为树&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（4）：面向数据的行为树概述&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（5）：行为树结构剖析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;如何使行为树及其分支、情境依赖性遍历以及它们的非规则数据访问模式与游戏平台的内存层次结构协调？如何将数据导向设计付诸实践？在运行时进行快速迭代和行为调整又该如何实现？&lt;/p&gt;&#xA;&lt;p&gt;这些问题激发了作者对面向数据的行为树的探索。在第一篇文章中，我们了解了行为树的概念，在第二篇文章中，我们理解了平台的内存系统对发挥性能的关键作用，面向数据思想，以及如何适应这一编程思想，现在是时候将这些知识付诸实践了。&lt;/p&gt;&#xA;&lt;h2 id=&#34;目标和需求&#34;&gt;目标和需求&lt;/h2&gt;&#xA;&lt;h3 id=&#34;功能需求&#34;&gt;功能需求&lt;/h3&gt;&#xA;&lt;p&gt;行为树是一种工具，也是一种模型。它可以描述 Actor 的行为，并将整个决策过程分解为多个行为的组合。行为节点也具有明确的语义，它可以影响行为树的遍历方式，从而影响 Actor 的决策过程和执行结果。它的功能应该具备：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;易于创建、理解 Actor 的决策过程；&lt;/li&gt;&#xA;&lt;li&gt;简化行为的重用，具备重用的行为库；&lt;/li&gt;&#xA;&lt;li&gt;能够实现游戏内 AI 行为的快速迭代、调试、优化；&lt;/li&gt;&#xA;&lt;li&gt;提供直观的调试信息，最终实现AI内部运作信息的可视化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;性能需求&#34;&gt;性能需求&lt;/h3&gt;&#xA;&lt;p&gt;一款游戏可能只有几个，或者有数百到数千个，由行为树控制的实体（也称为 Actor）。在这两种情况下，游戏人工智能（AI）通常每帧只有很少的时间预算，行为树不应该夺走”导航“和”视线感知“所需的计算时间。宝贵的计算周期也不应该浪费在等待数据进入 CPU 核心寄存器上。对于我们这个实验，在运行时实现高效的决策制定和角色控制，以下因素至关重要：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;最小化缓存碎片，减少随机内存访问，警惕内存访问延迟&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;；&lt;/li&gt;&#xA;&lt;li&gt;可以将 Actor 的行为树数据作为一个整体或逐块地移动到计算核心的本地内存中&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;；&lt;/li&gt;&#xA;&lt;li&gt;节约内存带宽，保持较低的内存需求，利用内存分层结构内的数据共享；&lt;/li&gt;&#xA;&lt;li&gt;了解最坏情况下的内存使用情况，预先分配内存并简化在游戏主机上的运行；&lt;/li&gt;&#xA;&lt;li&gt;不要失去对调用堆栈深度的控制；&lt;/li&gt;&#xA;&lt;li&gt;利用并发的优势。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;总结起来就是，在游戏建模或开发阶段要求灵活性和快速迭代，而游戏运行阶段则要求执行效率和高性能。这些需求在很大程度上是相互对立的，因此&lt;strong&gt;此次尝试的前提条件是：对行为树的开发时和运行时表示使用单独的表示，然后再将二者巧妙地连接起来，两全其美&lt;/strong&gt;，代价就是更大的代码量和复杂性。&lt;/p&gt;</description>
    </item>
    <item>
      <title>面向数据的行为树（2）：震惊！面向对象行为树并不面向数据</title>
      <link>/posts/data-oriented-bt-series-2-shocker-naive-object-oriented-behavior-tree-isnt-data-oriented/</link>
      <pubDate>Wed, 20 Dec 2023 20:51:18 +0800</pubDate>
      <guid>/posts/data-oriented-bt-series-2-shocker-naive-object-oriented-behavior-tree-isnt-data-oriented/</guid>
      <description>&lt;p&gt;这篇文章是 Bjoern Knafla 撰写的系列文章《面向数据的行为树（Data-oriented Behavior Tree Series）》 第2篇。文章原载于AltDevBlogADay，AltDevBlogADay 是一个技术文集，主要由游戏业界老兵们于2011-2014年撰写。原站已经关闭，即使时隔多年，很多文章仍值得一看。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系列文章目录&#34;&gt;系列文章目录&lt;/h2&gt;&#xA;&lt;p&gt;《面向数据的行为树》系列文章介绍了作者在面向数据的行为树设计过程中的思考和探索，以下是系列文章的目录：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;面向数据的行为树（1）：行为树入门&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（2）：震惊！面向对象行为树并不面向数据&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（3）：数据导向流催生的行为树&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（4）：面向数据的行为树概述&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（5）：行为树结构剖析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;简单的行为树可以使用面向对象方式来实现，如果性能满足需求，非常适合人手不多开发时间紧张的小型团队。&lt;/p&gt;&#xA;&lt;p&gt;简单实现如下：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BehaviorTreeNode&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; BehaviorState update() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resetState&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;template&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;ActionBehaviorTreeNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BehaviorTreeNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;explicit&lt;/span&gt; ActionBehaviorTreeNode(ActionData &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Calls a certain member function of actor.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; BehaviorState &lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Does nothing.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resetState&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ActionData &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;data;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SequenceBehaviorTreeNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BehaviorTreeNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Iterate through children, start from next to run until done or a child&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// returns that it is running.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; BehaviorState update();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Calls resetState for the next to run node as it might have returned a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// running state during the last update.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Prepares to start from the first child on next update.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resetState&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector children; &lt;span style=&#34;color:#75715e&#34;&gt;// In sequence order.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t nextChildToUpdateIndex;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;PriorityBehaviorTreeNode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; BehaviorTreeNode {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Iterate through children, start from next to run until the first one&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// returns success or that it is running.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// If this child&amp;#39;s index is lower than that of the previous one returning&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// running, rest the later child.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; BehaviorState update();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Calls resetState for the next to run child as it might have returned a&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// running state during the last update.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// Prepares to start from the first child on next update.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;resetState&lt;/span&gt;();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;vector children; &lt;span style=&#34;color:#75715e&#34;&gt;// In highest to lowest priority order.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;  std&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;size_t nextChildToUpdateIndex;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// ... and so on with other node types...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>面向数据的行为树（1）：行为树入门</title>
      <link>/posts/data-oriented-bt-series-1-introduction-to-behavior-trees/</link>
      <pubDate>Wed, 29 Nov 2023 15:03:07 +0800</pubDate>
      <guid>/posts/data-oriented-bt-series-1-introduction-to-behavior-trees/</guid>
      <description>&lt;p&gt;这篇文章是 Bjoern Knafla 撰写的系列文章《面向数据的行为树（Data-oriented Behavior Tree Series）》 第1篇。文章原载于AltDevBlogADay，AltDevBlogADay 是一个技术文集，主要由游戏业界老兵们于2011-2014年撰写。原站已经关闭，即使时隔多年，很多文章仍值得一看。&lt;/p&gt;&#xA;&lt;h2 id=&#34;系列文章目录&#34;&gt;系列文章目录&lt;/h2&gt;&#xA;&lt;p&gt;《面向数据的行为树》系列文章介绍了作者在面向数据的行为树设计过程中的思考和探索，以下是系列文章的目录：&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;面向数据的行为树（1）：行为树入门&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（2）：震惊！面向对象行为树并不面向数据&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（3）：数据导向流催生的行为树&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（4）：面向数据的行为树概述&lt;/li&gt;&#xA;&lt;li&gt;面向数据的行为树（5）：行为树结构剖析&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;行为树简介&#34;&gt;行为树简介&lt;/h2&gt;&#xA;&lt;p&gt;什么是行为树？它的工作原理是什么？它在游戏AI中又起什么作用？&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://images4.wikia.nocookie.net/__cb20100617193929/harrypotter/images/8/8e/Whomping_Willow_PA.jpg&#34; alt=&#34;The mis-behaving Whomping Willow tree from the movie Harry Potter and the Prisoner of Azkaban - picture hosted by the Harry Potter Wiki&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;本文介绍了作者将面向数据、内存优化的行为树二者结合，以简化开发过程中的创建和修改的试验（读作：探索）经历。作者写这篇文章是为了记录其发现和决定，并征求读者的反馈意见，最终实现一个真正有用的BSD许可的BT工具包。&lt;/p&gt;</description>
    </item>
    <item>
      <title>行为树入门工具包</title>
      <link>/posts/the-behavior-tree-starter-kit/</link>
      <pubDate>Mon, 28 Mar 2022 23:44:48 +0800</pubDate>
      <guid>/posts/the-behavior-tree-starter-kit/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;&#xA;&lt;p&gt;偶然看到一个2012年 Alex Champandard 的演讲&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，本想看看有什么可以借鉴，看到一半后，发现就是 Game AI Pro 的文章 《The Behavior Tree Starter Kit&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;》的演示版。结合代码&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;，对照着看一遍，有助于理解。&lt;/p&gt;&#xA;&lt;h2 id=&#34;motivation&#34;&gt;Motivation&lt;/h2&gt;&#xA;&lt;p&gt;行为树广泛应用于各个系统：角色，策略，小队，动画，镜头……&lt;/p&gt;&#xA;&lt;p&gt;使用案例：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Rockstar Games： R.A.G.E.&lt;/li&gt;&#xA;&lt;li&gt;Guerrilla Games：Killzone 2 &amp;amp; 3&lt;/li&gt;&#xA;&lt;li&gt;Uncharted 2&lt;/li&gt;&#xA;&lt;li&gt;Halo 3&lt;/li&gt;&#xA;&lt;li&gt;NBA &amp;lsquo;09&lt;/li&gt;&#xA;&lt;li&gt;Metro 2033&lt;/li&gt;&#xA;&lt;li&gt;Crysis: Warhead&lt;/li&gt;&#xA;&lt;li&gt;League of Legends&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;the-basics&#34;&gt;The Basics&lt;/h2&gt;&#xA;&lt;h3 id=&#34;v1原型&#34;&gt;v1：原型&lt;/h3&gt;&#xA;&lt;p&gt;一个基本的行为树实现：&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;enum&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Status&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Return values of and valid states for behaviors.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BH_INVALID,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BH_SUCCESS,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BH_FAILURE,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BH_RUNNING,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    BH_ABORTED,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Behavior&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; * Base class for actions, conditions and composites.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; Status update()&#x9;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onInitialize&lt;/span&gt;()&#x9;&#x9;&#x9;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;onTerminate&lt;/span&gt;(Status)&#x9;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Behavior()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;   m_eStatus(BH_INVALID)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;virtual&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;~&lt;/span&gt;Behavior()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Status &lt;span style=&#34;color:#a6e22e&#34;&gt;tick&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; BH_RUNNING)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            onInitialize();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; update();&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; BH_RUNNING)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            onTerminate(m_eStatus);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m_eStatus;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;reset&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BH_INVALID;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;abort&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        onTerminate(BH_ABORTED);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BH_ABORTED;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isTerminated&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BH_SUCCESS  &lt;span style=&#34;color:#f92672&#34;&gt;||&lt;/span&gt;  m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BH_FAILURE;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;isRunning&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m_eStatus &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; BH_RUNNING;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Status &lt;span style=&#34;color:#a6e22e&#34;&gt;getStatus&lt;/span&gt;() &lt;span style=&#34;color:#66d9ef&#34;&gt;const&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; m_eStatus;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Status m_eStatus;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>如何选择游戏AI架构</title>
      <link>/posts/deciding-on-an-ai-architecture-which-tool-for-the-job/</link>
      <pubDate>Wed, 10 Nov 2021 16:06:11 +0800</pubDate>
      <guid>/posts/deciding-on-an-ai-architecture-which-tool-for-the-job/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Conference:&lt;/strong&gt; GDC 2010&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Session Name:&lt;/strong&gt; Deciding on an AI Architecture: Which Tool for the Job?&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Speaker(s):&lt;/strong&gt; Alex Champandard, Michael Dawe, Dave Mark, Steve Rabin, Charles Rich&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Track / Format:&lt;/strong&gt; AI Summit&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Video:&lt;/strong&gt; &lt;a href=&#34;https://gdcvault.com/play/1012411/Deciding-on-an-AI-Architecture&#34;&gt;GDC Vault - Deciding on an AI Architecture: Which Tool for the Job?&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;“工欲善其事，必先利其器。”&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;—— 《论语·卫灵公》&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;AI 架构的选择是 AI 程序员需要解决的最重要问题之一。这个选择将为项目奠定基础，同时也决定了未来的方向。主要的 AI 架构都有自己的优缺点，很难确定哪一个架构最适合一个项目。&lt;/p&gt;&#xA;&lt;p&gt;本次讨论将从独特的角度探讨这个问题。每一种主流架构都有一位代言人，他们将被提供假想的游戏例子，并被要求解释为什么他们支持的架构是最合适的选择，而其他的则不合适。通过不同架构的代言人就同一问题进行讨论和分析，可以更全面地评估每种架构的优劣，并对具体项目做出更合适的建议。&lt;/p&gt;</description>
    </item>
    <item>
      <title>《剑与勇士(Swords &amp; Soldiers)》的游戏AI设计</title>
      <link>/posts/ai-in-swords-and-soldiers/</link>
      <pubDate>Mon, 18 Oct 2021 20:22:12 +0800</pubDate>
      <guid>/posts/ai-in-swords-and-soldiers/</guid>
      <description>&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;&#xA;&lt;p&gt;偶然发现收藏夹里躺了多年的文章链接&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，写作时间是2011年前后，作者是 Ronimo Games 的联合创始人 Joost van Dongen，简述了当时他们如何构建《剑与勇士》的 AI。&lt;a href=&#34;https://store.steampowered.com/app/63500/Swords_and_Soldiers_HD&#34;&gt;《剑与勇士》（Swords &amp;amp; Soldiers）&lt;/a&gt;是 Ronimo Games 在2009年开发的一款2D横向卷轴RTS游戏。&lt;/p&gt;&#xA;&lt;p&gt;简单翻译整理了一下，看看有没有参考价值。&lt;/p&gt;&#xA;&lt;h2 id=&#34;译文&#34;&gt;译文&lt;/h2&gt;&#xA;&lt;p&gt;众所周知，为策略游戏创建良好的 AI 是一项艰巨的任务。AI 设计当然从来都不是一件容易的事，但对于策略游戏来说，选项和情况的复杂性非常高。我认为《剑与勇士》是第一款在游戏中实现真正出色 AI 的游戏，所以我想看看我们是如何做到这一点的会很有趣。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/ai-in-swords-and-soldiers/swords_and_soldiers.webp&#34; alt=&#34;swords_and_soldiers&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;人工智能领域要么解决非常简单的问题，比如国际象棋（与实时战略游戏相比，国际象棋非常简单，更不用说与现实世界相比了！），要么只会提供大量精巧高效的辅助算法，比如寻路。在复杂情况下做出真正的决策本质上是一个尚未解决的问题，而且不会在短期内得到解决。&lt;/p&gt;</description>
    </item>
    <item>
      <title>《巨兽战争(Gigantic)》的游戏AI行为树设计</title>
      <link>/posts/behavior-trees-in-gigantic/</link>
      <pubDate>Tue, 07 Sep 2021 15:46:59 +0800</pubDate>
      <guid>/posts/behavior-trees-in-gigantic/</guid>
      <description>&lt;p&gt;偶然看到 &lt;a href=&#34;https://medium.com/@gautamv/managing-ai-in-gigantic-523dc84763cf&#34;&gt;Managing AI in Gigantic&lt;/a&gt; 和 &lt;a href=&#34;https://medium.com/@gautamv/advanced-behavior-tree-structures-4b9dc0516f92&#34;&gt;Advanced Behavior Tree Structures&lt;/a&gt; 这两篇文章，简述了一款 PvPvE 游戏 Gigantic 的 AI 架构，提供了一些不一样的思路。&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/behavior-trees-in-gigantic/image_gigantic_banner.webp&#34; alt=&#34;image_gigantic_banner.webp&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://store.steampowered.com/app/327690/Gigantic/&#34;&gt;Gigantic&lt;/a&gt;是一个结合了PVE的5v5的多人对战游戏。对战双方各有一个叫做守护者的NPC巨兽。玩家通过在己方泉水召唤生物，定时收集泉水，通过击杀敌方英雄或泉水召唤物来为己方巨兽充能。双方围绕保护己方巨兽，攻击敌方巨兽来展开对抗，直到消灭对方巨兽，赢得胜利。&lt;/p&gt;&#xA;&lt;p&gt;作为一款快节奏的PvPvE游戏，NPC守护者是游戏的关键要素，其AI的表现至关重要。&lt;/p&gt;&#xA;&lt;p&gt;有限状态机不够灵活，重用节点不方便。使用行为树可以解决这一问题，而且可以轻松地同 Utility AI，GOAP 等其它方案结合。&lt;/p&gt;</description>
    </item>
    <item>
      <title>《光环 2》的游戏AI系统设计</title>
      <link>/posts/managing-complexity-in-the-halo-2-ai-system/</link>
      <pubDate>Sun, 20 Jun 2021 21:17:08 +0800</pubDate>
      <guid>/posts/managing-complexity-in-the-halo-2-ai-system/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Conference:&lt;/strong&gt; GDC 2005&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Speaker(s)  :&lt;/strong&gt; Damian Isla&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Video:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=m9W-hpxuApk&#34;&gt;Managing Complexity in the Halo 2 AI System - YouTube&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;《光环》系列的 AI 久负盛名，其行为树的应用堪称业界典范。而 Damian Isla 在 GDC 2005 的演讲《Managing Complexity in the Halo 2 AI System》成了行为树架构设计绕不开的参考资料。结合演讲视频和演示幻灯片，精读了文章《GDC 2005 Proceeding: Handling Complexity in the Halo 2 AI》。&lt;/p&gt;&#xA;&lt;h2 id=&#34;复杂性问题&#34;&gt;复杂性问题&lt;/h2&gt;&#xA;&lt;h3 id=&#34;可扩展性的复杂性&#34;&gt;可扩展性的复杂性&lt;/h3&gt;&#xA;&lt;p&gt;可扩展性（Scalability）的3个维度：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Variety： 大量不同的角色：野猪兽，精英，鬼面兽，猎人，地狱伞兵，海军陆战队……&lt;/li&gt;&#xA;&lt;li&gt;Variation： 不同的使用故事场景：叙事性，节奏性，戏剧性，挑战性……&lt;/li&gt;&#xA;&lt;li&gt;Volume： 大量不同的行为：近战，射击，驾驶，躲藏……&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;设计需求的复杂性&#34;&gt;设计需求的复杂性&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;strong&gt;Transparency&lt;/strong&gt;：即使是不了解 AI 内部工作原理的外行观察者（玩家）能够对AI的内部状态做出合理的推断，并以此来解释和预测AI的行为。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Coherence&lt;/strong&gt;：保持行为的连贯性和一致性。为了让AI的行为更连贯自然，需要注意启动、停止动作的时机合理。还要特别防止 AI 行为中出现摇摆不定问题，即在两个选项间反复切换的现象。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Directability&lt;/strong&gt;：保证可指挥性，AI 系统应该能够接受设计师的指示和命令。&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Workability&lt;/strong&gt;：对设计和开发它的工程师应该要有足够的可操作性，工程师需要能够读取、理解AI系统内部的状态和运作机制，对 AI 系统进行测试、调试、修改与优化。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;如何管理复杂性&#34;&gt;如何管理复杂性&lt;/h2&gt;&#xA;&lt;h3 id=&#34;决策机制&#34;&gt;决策机制&lt;/h3&gt;&#xA;&lt;h4 id=&#34;行为-dag&#34;&gt;行为 DAG&lt;/h4&gt;&#xA;&lt;p&gt;Halo 2 AI实现了行为树，更具体地说，是行为DAG（有向无环图），因为单个行为（或行为子树）可以占据图中的多个位置。下图为Halo 2的实际核心行为DAG的精简版本，原图包含50种不同的行为。&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;/images/managing-complexity-in-the-halo-2-ai-system/behavior-dag.webp&#34; alt=&#34;example of behavior-dag&#34;&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>游戏AI入门指南(Part 3)</title>
      <link>/posts/the-total-beginners-guide-to-game-ai-part-3/</link>
      <pubDate>Tue, 25 May 2021 23:10:09 +0000</pubDate>
      <guid>/posts/the-total-beginners-guide-to-game-ai-part-3/</guid>
      <description>&lt;h2 id=&#34;学习能力和适应能力&#34;&gt;学习能力和适应能力&lt;/h2&gt;&#xA;&lt;p&gt;我们在一开始就提到游戏AI通常不使用“机器学习”，因为它不适合游戏世界中智能代理的实时控制。但这并不意味着我们不能从机器学习领域中汲取灵感。也许我们希望射击游戏中的AI对手去学习寻找最佳位置，以便获得最多的击杀数。或者在像《铁拳》或《街头霸王》这样的格斗游戏中，当我们使用一遍又一遍地使用相同的“组合技”时，AI对手能学会应对从而迫使我们使用其它的战术。因此有时候一定程度的机器学习还是很有用处的。&lt;/p&gt;&#xA;&lt;h3 id=&#34;统计和概率&#34;&gt;统计和概率&lt;/h3&gt;&#xA;&lt;p&gt;在我们研究更复杂的例子之前，值得考虑一下：通过使用一些简单测量得出的数据来做出决策，我们可以走多远？例如，假设有一个即时战略游戏(Real-time strategy game)，我们要猜测玩家是否会在前几分钟内发起一次快攻，以此来决定是否需要加强防御。也许我们可以从玩家的过去行为中推断出未来的行为。一开始我们没有可以推断的玩家数据，但每次AI与人类对手对战时，它都可以记录第一次攻击的时间。经过多次对战，这些时间的平均值可以非常近似于将来该玩家攻击的时间。&lt;/p&gt;&#xA;&lt;p&gt;但简单地平均化存在一个的问题：它会随着时间的推移而趋向于居中。因此如果玩家在前20次采用快攻策略，而在接下来的20次采用较慢的策略，那么平均数将处于中间位置，这个数值对我们来说一点用处也没有。纠正此问题的一种方法是简单的&lt;a href=&#34;https://en.wikipedia.org/wiki/Moving_average&#34;&gt;移动平均(windowed average)&lt;/a&gt;，如只考虑最后20个数据点。&lt;/p&gt;&#xA;&lt;p&gt;假设玩家过去的偏好会延续到将来，在估计某些动作发生的可能性时可以使用类似的方法。例如，如果玩家用火球术攻击5次，闪电箭攻击2次，又进行了1次近战攻击，那么他很可能喜欢火球术，每8次使用5次。由此推论，我们可以得出使用不同攻击的概率为：火球术= 62.5％，闪电箭= 25％，近战= 12.5％。建议我们的AI角色找一些抗火装备！&lt;/p&gt;&#xA;&lt;p&gt;另一个有趣的方法是使用&lt;a href=&#34;https://zh.wikipedia.org/zh-hans/%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%88%86%E7%B1%BB%E5%99%A8&#34;&gt;朴素贝叶斯分类器(Naive Bayes Classifier)&lt;/a&gt;来检查大量输入数据并对当前情况进行分类，以便AI代理可以适当地做出反应。贝叶斯分类器最著名的应用就是电子邮件垃圾邮件过滤，它会检查电子邮件中的单词，比较这些单词在之前主要出现在垃圾邮件还是非垃圾邮件中，以此来判断新邮件是不是垃圾邮件。我们也可以做类似的事情，只是我们的输入数据有点少。通过记录所有我们了解到的有用信息（如建造了哪些敌方单位，使用了哪些法术，研究了哪些科技），然后记录由此产生的结果（战争还是和平，速攻策略还是防御策略等），根据这些我们可以选择适当的行为。&lt;/p&gt;&#xA;&lt;p&gt;使用所有这些学习方法，足够(通常更可取的是）在发售之前进行游戏测试期间对收集的数据进行处理。让AI可以应对游戏测试者的不同策略，但在游戏发售后不会改变。相比之下，发售后能够应对玩家的AI可能最终会变得过于可预测而呆板乏味，或者太难而以击败。&lt;/p&gt;</description>
    </item>
    <item>
      <title>游戏AI入门指南(Part 2)</title>
      <link>/posts/the-total-beginners-guide-to-game-ai-part-2/</link>
      <pubDate>Sat, 03 Apr 2021 00:36:28 +0000</pubDate>
      <guid>/posts/the-total-beginners-guide-to-game-ai-part-2/</guid>
      <description>&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&#34;https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942/&#34;&gt;The Total Beginner&amp;rsquo;s Guide to Game AI&lt;/a&gt;&#xA;&lt;strong&gt;作者：&lt;/strong&gt; &lt;a href=&#34;https://www.gamedev.net/profile/2996-kylotan/&#34;&gt;Ben Sizer&lt;/a&gt;&#xA;&lt;strong&gt;译者：&lt;/strong&gt; &lt;a href=&#34;https://www.limbonova.com/about/#blog-author&#34;&gt;Anthony Han&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;进阶决策&#34;&gt;进阶决策&lt;/h2&gt;&#xA;&lt;p&gt;虽然简单的反应型系统已十分强大，但在很多情况下还是不够完善的。有时我们想根据代理当前正在做的事情做出不同的决定，并将其作为一个条件来使用，那么就会有些不太方便。有时因为条件太多，导致无法在决策树或脚本中表达清楚。有时在决定下一步行动之前，需要先思考再评估情况将如何变化。对于这些问题，我们需要更复杂的解决方案。&lt;/p&gt;&#xA;&lt;h3 id=&#34;有限状态机&#34;&gt;有限状态机&lt;/h3&gt;&#xA;&lt;p&gt;有限状态机（Finite State Machine，简称FSM）是一个花哨的专用术语，来描述这样的东西：举例来说，某个AI代理目前处于几种可能的状态中，它可以从一个状态转换到另一个状态。而这些状态的数量有限，因此得名。现实生活中的例子如一组交通信号灯，它会从红色变成黄色，再变成绿色，然后再变回红色。不同的地方有不同的亮灯顺序，但原理是相同的——每个状态代表某种事物（例如“停止”，“前进”，“尽可能停止”等），任何时候都仅处于一种状态，并且它会根据简单的规则从一个状态过渡到另一个状态。&lt;/p&gt;&#xA;&lt;p&gt;这非常适用于游戏中的NPC。一个警卫可能具有以下状态：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;巡逻&lt;/li&gt;&#xA;&lt;li&gt;攻击&lt;/li&gt;&#xA;&lt;li&gt;逃跑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;当状态改变时，你可能会想到这些规则：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;如果警卫看到敌人，就立即攻击&lt;/li&gt;&#xA;&lt;li&gt;如果警卫正在攻击但无法再看到敌人，那么返回巡逻&lt;/li&gt;&#xA;&lt;li&gt;如果警卫正在攻击但受了重伤，那么开始逃跑&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;这个规则很简单，你可以直接把它写成硬编码的if语句，用一个变量来保存警卫的状态，并进行各种检查：查看附近是否有敌人，警卫的健康状况如何等等。但如果我们要添加更多的状态：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;空闲（巡逻期间）&lt;/li&gt;&#xA;&lt;li&gt;搜寻（刚才发现的敌人躲起来时）&lt;/li&gt;&#xA;&lt;li&gt;求助（发现敌人，但因为敌人太强而无法独自作战时）&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;通常在每个状态下可做出的选择是有限的——例如当警卫的健康状况不佳时，他们可能不想寻找敌人。&lt;/p&gt;&#xA;&lt;p&gt;如果最终用一长串的“if (x and y but not z) then p”来表示，就显得有些笨拙了。如果以一种通用统一的方式来实现状态之间的转换，应该会有所帮助。为此我们要考虑所有状态，并且在每个状态下，列出到其它状态的所有转换和条件。我们还要指定一个初始状态来决定在条件适用之前从哪里开始。&lt;/p&gt;</description>
    </item>
    <item>
      <title>游戏AI入门指南(Part 1)</title>
      <link>/posts/the-total-beginners-guide-to-game-ai-part-1/</link>
      <pubDate>Sat, 20 Mar 2021 20:30:43 +0000</pubDate>
      <guid>/posts/the-total-beginners-guide-to-game-ai-part-1/</guid>
      <description>&lt;p&gt;&lt;strong&gt;原文：&lt;/strong&gt; &lt;a href=&#34;https://www.gamedev.net/articles/programming/artificial-intelligence/the-total-beginners-guide-to-game-ai-r4942/&#34;&gt;The Total Beginner&amp;rsquo;s Guide to Game AI&lt;/a&gt;&#xA;&lt;strong&gt;作者：&lt;/strong&gt; &lt;a href=&#34;https://www.gamedev.net/profile/2996-kylotan/&#34;&gt;Ben Sizer&lt;/a&gt;&#xA;&lt;strong&gt;译者：&lt;/strong&gt; &lt;a href=&#34;https://www.limbonova.com/about/#blog-author&#34;&gt;Anthony Han&lt;/a&gt;&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这是一篇非常好的综述类文章，对当今的游戏AI常用技术和实现方法做了简单介绍，参考了近年来的 Game AI Pro 系列。虽然不及论文那样严谨，但全文条理清晰，通俗易懂。确实是一篇入门指南佳作。花了点业余时间翻译出来，为了分享，也希望能温故知新。&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;&#xA;&lt;p&gt;本文将介绍游戏人工智能（或简称“游戏AI”）的入门概念，让读者了解使用哪些方法来处理AI问题，它们如何协同工作以及如何使用相应的语言或引擎来实现。&lt;/p&gt;&#xA;&lt;p&gt;我们假设你具备电子游戏的基本知识，并掌握几何，三角函数等数学概念。大多数代码示例为伪代码，因此不需要特定的编程语言知识。&lt;/p&gt;&#xA;&lt;h2 id=&#34;什么是游戏ai&#34;&gt;什么是游戏AI?&lt;/h2&gt;&#xA;&lt;p&gt;游戏AI主要关注实体根据当前条件所采取的行动。这就是传统人工智能文献所指的控制“&lt;a href=&#34;https://en.wikipedia.org/wiki/Intelligent_agent&#34;&gt;智能代理&lt;/a&gt;”，代理通常是游戏中的角色，但也可以是车辆，机器人。或者更抽象的东西，例如一组实体，甚至一个国家或文明。智能代理需要在各种情况下观察周围环境，依此做出决策，并采取行动。这就是所谓的“感知/思考/行动(Sense/Think/Act)”循环：&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;感知：代理侦测到或被告知环境中可能影响其行为的事物（例如：附近的威胁，要收集的物品，要调查的兴趣点）。&lt;/li&gt;&#xA;&lt;li&gt;思考：代理决定采取的应对措施（例如：考虑是否足够安全来收集物品，或者决定应该先集中精力战斗还是躲藏）。&lt;/li&gt;&#xA;&lt;li&gt;行动：代理将先前的决定付诸行动（例如：沿着通向敌人或物品等的路径移动）。由于代理做出了行动，形势已经改变，因此再次重复循环。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;现实世界中的AI，特别是成为新闻热点的那些，通常主要关注循环中的“感知”部分。例如，自动驾驶汽车拍摄道路的图像，结合其他数据（例如雷达和光达），并分析所看到的状况。这个过程一般是通过机器学习来完成，机器学习尤其擅长这方面，获取大量现实世界中有噪声的数据（如汽车前方的道路照片或视频）并加以分析理解，提取诸如“前方20码处有一辆汽车”这类的语义信息。这些被称为“&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E7%BB%9F%E8%AE%A1%E5%88%86%E7%B1%BB&#34;&gt;分类问题&lt;/a&gt;”。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
